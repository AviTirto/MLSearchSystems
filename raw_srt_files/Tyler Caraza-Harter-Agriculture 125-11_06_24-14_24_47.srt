1
00:00:00,000 --> 00:00:01,740
Everybody for coming today.

2
00:00:01,740 --> 00:00:03,080
I know there might be a lot of

3
00:00:03,080 --> 00:00:04,840
other things on
People's MDs Day.

4
00:00:04,840 --> 00:00:06,000
I know there is O Md, but

5
00:00:06,000 --> 00:00:07,440
we're a plow ahead
with the course,

6
00:00:07,440 --> 00:00:09,440
and I appreciate
you're all here.

7
00:00:09,440 --> 00:00:11,979
Some announcements.
What is that?

8
00:00:11,979 --> 00:00:13,699
We have the Mid term on Monday?

9
00:00:13,699 --> 00:00:15,499
So hopefully people are
preparing for that.

10
00:00:15,499 --> 00:00:16,619
If they have it already, again,

11
00:00:16,619 --> 00:00:20,179
it'll just be here, kind of
the same deal as last time.

12
00:00:20,179 --> 00:00:22,859
Also, we only have

13
00:00:22,859 --> 00:00:25,899
$50 of credits for the
Google virtual machines.

14
00:00:25,899 --> 00:00:28,660
And that let us make
P five optional.

15
00:00:28,660 --> 00:00:30,740
We would either be like on
a Google Virtual Machine

16
00:00:30,740 --> 00:00:33,459
or these CSL virtual machines.

17
00:00:33,459 --> 00:00:35,759
Starting in P six, it
will have to be on

18
00:00:35,759 --> 00:00:37,759
the CSL VM because
I want to save

19
00:00:37,759 --> 00:00:39,939
a little bit of
credit for PA, right?

20
00:00:39,939 --> 00:00:41,980
And we should have just like
a couple of dollars left.

21
00:00:41,980 --> 00:00:43,939
And so as soon as you're
done with P five,

22
00:00:43,939 --> 00:00:46,040
please shut off your Vb.

23
00:00:46,040 --> 00:00:47,980
Well, back up
everything on your VM,

24
00:00:47,980 --> 00:00:50,359
then shut it off and
delete it so that we can

25
00:00:50,359 --> 00:00:51,900
save that last couple of dollar

26
00:00:51,900 --> 00:00:54,049
for the end of the semester.

27
00:00:54,049 --> 00:00:56,880
We've been learning
about Cassandra,

28
00:00:56,880 --> 00:01:00,299
and I'll head back
to our slides.

29
00:01:00,299 --> 00:01:01,840
We're going to do some
worksheets today,

30
00:01:01,840 --> 00:01:04,280
we're go over some
more concepts.

31
00:01:04,280 --> 00:01:07,619
And the main idea here

32
00:01:07,619 --> 00:01:09,240
with consistent hashing
is that we have

33
00:01:09,240 --> 00:01:11,179
something called a token rig,

34
00:01:11,179 --> 00:01:12,459
and it's a rig because it's

35
00:01:12,459 --> 00:01:14,499
a number line that wraps around.

36
00:01:14,499 --> 00:01:16,680
If you go all the way to
the end on the far right,

37
00:01:16,680 --> 00:01:18,760
you'll wrap around to the left.

38
00:01:18,760 --> 00:01:22,640
And the idea is that we have
a bunch of rows of data,

39
00:01:22,640 --> 00:01:24,599
and we have a bunch
of worker machines,

40
00:01:24,599 --> 00:01:26,919
and we want to somehow
put them each at

41
00:01:26,919 --> 00:01:29,460
a specific location on this rig.

42
00:01:29,460 --> 00:01:30,960
And if we do that, then that

43
00:01:30,960 --> 00:01:32,640
naturally gives us
a way of saying,

44
00:01:32,640 --> 00:01:37,060
this row, be logs to
that worker or node.

45
00:01:37,060 --> 00:01:40,060
And so we had a couple
of different approaches.

46
00:01:40,060 --> 00:01:43,130
For the rose, What

47
00:01:43,130 --> 00:01:45,309
we would do is we'd look
at their partition key,

48
00:01:45,309 --> 00:01:46,910
right, remember
this is Cassandra,

49
00:01:46,910 --> 00:01:48,930
and we would just
take a hash of it.

50
00:01:48,930 --> 00:01:50,530
We call that the token, right?

51
00:01:50,530 --> 00:01:53,090
And that works great
because we might

52
00:01:53,090 --> 00:01:55,850
have millions or billions
or even trillions of rows.

53
00:01:55,850 --> 00:01:57,650
And so I don't want
to have some giant

54
00:01:57,650 --> 00:01:59,290
data structure to keep
track of it, right?

55
00:01:59,290 --> 00:02:00,450
Just a little bit of math with

56
00:02:00,450 --> 00:02:03,330
the hash function is enough
for me to decide for

57
00:02:03,330 --> 00:02:08,049
all these different rows where
they go on the token rig.

58
00:02:08,049 --> 00:02:10,450
We're also putting
computers on the token rig,

59
00:02:10,450 --> 00:02:12,209
but we do not hash those.

60
00:02:12,209 --> 00:02:14,849
The reason why is that if

61
00:02:14,849 --> 00:02:17,940
you did something like
hash partitioning,

62
00:02:17,940 --> 00:02:19,300
and you add an additional node,

63
00:02:19,300 --> 00:02:21,159
and then you recalculate that.

64
00:02:21,159 --> 00:02:22,839
The number would be
very different, right?

65
00:02:22,839 --> 00:02:25,260
So what we're going to
do with these nodes

66
00:02:25,260 --> 00:02:26,560
is that we're actually to give

67
00:02:26,560 --> 00:02:27,979
them a token that
will choose, right?

68
00:02:27,979 --> 00:02:29,620
We could pick something,
maybe it's random.

69
00:02:29,620 --> 00:02:31,119
Maybe it's picked carefully.

70
00:02:31,119 --> 00:02:32,939
And because we're picking it,

71
00:02:32,939 --> 00:02:35,779
rather than having some
formulaic way to choose it,

72
00:02:35,779 --> 00:02:37,300
we cannot just use
a little bit of

73
00:02:37,300 --> 00:02:38,859
math to re figure
out what it is.

74
00:02:38,859 --> 00:02:40,200
We have to have
some data structure

75
00:02:40,200 --> 00:02:41,480
somewhere to remember,

76
00:02:41,480 --> 00:02:44,239
and what that data structure
is is a token math.

77
00:02:44,239 --> 00:02:47,299
It's basically like a dictionary
where the key is a node,

78
00:02:47,299 --> 00:02:49,669
and the value is the token.

79
00:02:49,669 --> 00:02:51,699
So once we've done
that, we've got

80
00:02:51,699 --> 00:02:54,700
every computer and every
row on the token rig,

81
00:02:54,700 --> 00:02:56,319
then what I may be
talking about a lot.

82
00:02:56,319 --> 00:02:58,499
I'm may keep using this
phrase is where they say,

83
00:02:58,499 --> 00:03:00,279
we're going to walk the rig.

84
00:03:00,279 --> 00:03:02,520
And we walk the rig.
What we want to figure

85
00:03:02,520 --> 00:03:06,179
out what machine a
specific row goes on.

86
00:03:06,179 --> 00:03:07,900
And the way we'll do that
is we'll choose a row.

87
00:03:07,900 --> 00:03:11,019
For example, let's say
I choose the row B,

88
00:03:11,019 --> 00:03:12,499
and I will walk the rig to

89
00:03:12,499 --> 00:03:14,140
the right until I
pup into a node.

90
00:03:14,140 --> 00:03:16,179
Right? So if I buy B, I may say,

91
00:03:16,179 --> 00:03:18,139
oh, well, that's node two.

92
00:03:18,139 --> 00:03:20,619
And in some cases, it's
a little bit trickier,

93
00:03:20,619 --> 00:03:21,859
like if I have E, and I keep

94
00:03:21,859 --> 00:03:23,439
walking to the right, well,
it'll just wrap around.

95
00:03:23,439 --> 00:03:26,720
I'll say that E goes
on node one, right?

96
00:03:26,720 --> 00:03:29,144
So that's where we
ended last slide.

97
00:03:29,144 --> 00:03:30,949
I want to show you another way

98
00:03:30,949 --> 00:03:32,069
people often visualize this.

99
00:03:32,069 --> 00:03:33,230
I think sometimes people get so

100
00:03:33,230 --> 00:03:34,690
caught up and like,
Oh, it's a rig.

101
00:03:34,690 --> 00:03:36,209
They insist on
drawing it that way,

102
00:03:36,209 --> 00:03:38,169
and I think that adds
unnecessary complexity.

103
00:03:38,169 --> 00:03:39,390
I don't even know why
there's something

104
00:03:39,390 --> 00:03:41,729
about two Pi here
or degrees, right?

105
00:03:41,729 --> 00:03:43,450
Anyway, if you go on Wikipedia,

106
00:03:43,450 --> 00:03:44,650
this is the way people visualize

107
00:03:44,650 --> 00:03:46,190
consistent Ashley.
That's very common.

108
00:03:46,190 --> 00:03:48,570
I just want to realize that's
the same as this picture,

109
00:03:48,570 --> 00:03:51,049
but I find this picture
easier to work with.

110
00:03:51,049 --> 00:03:53,210
Alright. So any questions

111
00:03:53,210 --> 00:03:56,250
about last time before we
talk about adding a new row?

112
00:03:57,110 --> 00:03:58,609
All right.

113
00:03:58,609 --> 00:04:01,629
So I may imagine that
we're adding a new row,

114
00:04:01,629 --> 00:04:06,509
a new node, and we'll have
to choose token for it.

115
00:04:06,509 --> 00:04:08,970
So you chose a token, let's
say it lands right here.

116
00:04:08,970 --> 00:04:12,010
When that happens, what
that means is that

117
00:04:12,010 --> 00:04:13,329
for some of these other rows

118
00:04:13,329 --> 00:04:14,750
where we were walking
the rig before,

119
00:04:14,750 --> 00:04:15,989
instead of hitting node three,

120
00:04:15,989 --> 00:04:17,330
they might hit node four.

121
00:04:17,330 --> 00:04:19,409
In other words, node
four is to steal

122
00:04:19,409 --> 00:04:22,030
away some of the work
from node three.

123
00:04:22,030 --> 00:04:24,075
So I'd up looking like this.

124
00:04:24,075 --> 00:04:26,840
Instead of having C
under node three,

125
00:04:26,840 --> 00:04:29,840
now it's under under
node four, right?

126
00:04:29,840 --> 00:04:32,840
This is good because we
talked about before,

127
00:04:32,840 --> 00:04:34,279
if we're doing hash partitioning

128
00:04:34,279 --> 00:04:36,019
and I changed the
number of nodes,

129
00:04:36,019 --> 00:04:37,179
then I would really have to move

130
00:04:37,179 --> 00:04:38,679
every single piece of data.

131
00:04:38,679 --> 00:04:41,640
And in this case, I did not
have to move that much data.

132
00:04:41,640 --> 00:04:43,780
And and I could estimate
it publistically.

133
00:04:43,780 --> 00:04:47,160
If I do hash partitioning
and I you know,

134
00:04:47,160 --> 00:04:49,540
have Ed computers,
I'm drawing to Ed.

135
00:04:49,540 --> 00:04:52,020
Only one e of the data is

136
00:04:52,020 --> 00:04:54,820
likely to be in the same
place as it was before.

137
00:04:54,820 --> 00:04:56,700
And so almost all of
it, if it is large,

138
00:04:56,700 --> 00:04:58,280
almost all of it
is going to move.

139
00:04:58,280 --> 00:05:00,500
In this case, how much
of it has to move?

140
00:05:00,500 --> 00:05:02,500
Well, I can look at the
size of the whole rag,

141
00:05:02,500 --> 00:05:04,660
and I can look at the
size of the new range,

142
00:05:04,660 --> 00:05:05,880
and I take the size of the new

143
00:05:05,880 --> 00:05:07,060
range divided by
the whole thing.

144
00:05:07,060 --> 00:05:08,740
That's a relatively
small fraction,

145
00:05:08,740 --> 00:05:12,700
especially as I have more
and more nodes, right?

146
00:05:12,700 --> 00:05:14,720
These kind of ranges
will be smaller, right?

147
00:05:14,720 --> 00:05:18,060
So I have to move a very
small fraction of the data.

148
00:05:18,060 --> 00:05:20,299
This is what we would
call an elastic system.

149
00:05:20,299 --> 00:05:21,939
I can add and remove nodes,

150
00:05:21,939 --> 00:05:24,515
and that's not an
expensive thing to do.

151
00:05:24,515 --> 00:05:27,229
Now, there's a
couple of problems.

152
00:05:27,229 --> 00:05:29,750
One is that what happens if I

153
00:05:29,750 --> 00:05:31,930
get two nodes with
the exact same token.

154
00:05:31,930 --> 00:05:33,610
That's called a
collision. Sometimes in

155
00:05:33,610 --> 00:05:36,610
your starting cassa you
might get an error about it.

156
00:05:36,610 --> 00:05:39,490
Why does that happen?
Well, in the old days,

157
00:05:39,490 --> 00:05:42,930
they would pick the token
randomly for a node,

158
00:05:42,930 --> 00:05:44,409
and so this would
be very unlikely.

159
00:05:44,409 --> 00:05:46,010
But now they're trying
to pick it so they

160
00:05:46,010 --> 00:05:48,029
space the ranges
relatively evenly.

161
00:05:48,029 --> 00:05:50,290
And so if you have two nodes
adding at the same time,

162
00:05:50,290 --> 00:05:52,090
it's actually very common that

163
00:05:52,090 --> 00:05:53,710
they will collide
with each other.

164
00:05:53,710 --> 00:05:56,389
And after you have a
cluster up and running,

165
00:05:56,389 --> 00:05:58,890
one solution is just as you
add nodes, add one at a time.

166
00:05:58,890 --> 00:06:01,355
Don't add a bunch of
nodes at the same time.

167
00:06:01,355 --> 00:06:03,259
When you're first
starting a cluster,

168
00:06:03,259 --> 00:06:05,379
you might say, I want to
start these three nodes.

169
00:06:05,379 --> 00:06:06,860
Then this is more
likely to happen,

170
00:06:06,860 --> 00:06:08,860
and that's where I've seen
this error message before.

171
00:06:08,860 --> 00:06:10,819
So what we can do
is we can identify

172
00:06:10,819 --> 00:06:13,699
a few initial starting nodes
that are called s nodes,

173
00:06:13,699 --> 00:06:16,919
and those will not use this
kind of smart technique.

174
00:06:16,919 --> 00:06:18,400
They'll have a better
approach to make sure

175
00:06:18,400 --> 00:06:20,140
that they all can
see each other,

176
00:06:20,140 --> 00:06:21,340
and so we'll have those s nodes,

177
00:06:21,340 --> 00:06:22,580
we get those up and running,

178
00:06:22,580 --> 00:06:25,400
and there will not
be any collisions.

179
00:06:25,610 --> 00:06:28,810
Now, there's another
problem here.

180
00:06:28,810 --> 00:06:31,769
Even though this is
an elastic system,

181
00:06:31,769 --> 00:06:34,130
it's not going to be
super ballots, right?

182
00:06:34,130 --> 00:06:35,549
I added this new node,

183
00:06:35,549 --> 00:06:38,329
and instead of helping all
of the other existing nodes,

184
00:06:38,329 --> 00:06:40,450
we only helped
node three, right?

185
00:06:40,450 --> 00:06:42,750
So in the long term,
there's a problem, right?

186
00:06:42,750 --> 00:06:44,049
We aren't getting good ballots.

187
00:06:44,049 --> 00:06:46,450
In the short term, there's
also a problem because

188
00:06:46,450 --> 00:06:50,090
node three needs to send a
lot of its ta to node four.

189
00:06:50,090 --> 00:06:52,789
So node four can take over
those responsibilities,

190
00:06:52,789 --> 00:06:55,290
and that's a lot of network
IO truing from node three,

191
00:06:55,290 --> 00:06:57,190
and that could actually
make node three,

192
00:06:57,190 --> 00:06:58,950
who maybe needs the most help.

193
00:06:58,950 --> 00:07:02,190
I could actually make it
slower in the short term,

194
00:07:02,190 --> 00:07:03,849
right? That's a real problem.

195
00:07:03,849 --> 00:07:06,349
And It's kind of similar

196
00:07:06,349 --> 00:07:07,629
to if you just imagine a team

197
00:07:07,629 --> 00:07:08,850
of engineers working
a something,

198
00:07:08,850 --> 00:07:10,529
imagine a team that's
kind of overworked.

199
00:07:10,529 --> 00:07:13,509
And like, Okay, we're going
to hire a new engineer.

200
00:07:13,509 --> 00:07:16,690
What you would prefer is
that engineer kind of takes

201
00:07:16,690 --> 00:07:18,170
a little bit of work
away from everybody.

202
00:07:18,170 --> 00:07:19,509
So things are balance.

203
00:07:19,509 --> 00:07:21,910
Instead, imagine that new
engineer is like, Okay,

204
00:07:21,910 --> 00:07:24,629
you're just to help this
one senior engineer,

205
00:07:24,629 --> 00:07:25,950
and they're going to
have to trade you.

206
00:07:25,950 --> 00:07:27,070
So they're already busy,

207
00:07:27,070 --> 00:07:28,190
but now they have to trade you.

208
00:07:28,190 --> 00:07:29,189
And then after their trade,

209
00:07:29,189 --> 00:07:30,330
then you're going to
have half to work it so

210
00:07:30,330 --> 00:07:31,450
that they'll kind
of have less work

211
00:07:31,450 --> 00:07:32,630
than everybody else. Right?

212
00:07:32,630 --> 00:07:33,490
So instead, we want to

213
00:07:33,490 --> 00:07:34,510
have something that
looks like this,

214
00:07:34,510 --> 00:07:36,589
but we want to when
we add a node,

215
00:07:36,589 --> 00:07:38,889
we want to take a little bit
of work away from everybody.

216
00:07:38,889 --> 00:07:42,094
And that leads us to
approach called V nodes.

217
00:07:42,094 --> 00:07:44,280
And the idea of vetoes
is instead of just

218
00:07:44,280 --> 00:07:46,400
having one token for each node,

219
00:07:46,400 --> 00:07:47,620
we can have more
than one, right?

220
00:07:47,620 --> 00:07:49,850
You can see before, You know,

221
00:07:49,850 --> 00:07:51,709
I just had one token for each.

222
00:07:51,709 --> 00:07:54,049
Now, maybe I have
two tokens for each.

223
00:07:54,049 --> 00:07:56,650
And every time I have
a token on the rig,

224
00:07:56,650 --> 00:07:58,510
that defines an
inclusive range from

225
00:07:58,510 --> 00:08:02,269
that token left until
there's another token.

226
00:08:02,269 --> 00:08:03,750
And so when I do that,

227
00:08:03,750 --> 00:08:05,709
now there's more small ranges.

228
00:08:05,709 --> 00:08:09,430
And the good thing then is
that when I add node four,

229
00:08:09,430 --> 00:08:11,270
this is taking a little
bit of work away from

230
00:08:11,270 --> 00:08:14,210
node wood and a little bit
of work away from node two.

231
00:08:14,210 --> 00:08:15,490
And you can actually
configure out.

232
00:08:15,490 --> 00:08:17,349
How many virtual nodes

233
00:08:17,349 --> 00:08:18,870
do you want for
each physical node?

234
00:08:18,870 --> 00:08:21,709
I think the default is be
like 16. But we can do that.

235
00:08:21,709 --> 00:08:23,829
We can divide up the work
a little bit more evenly.

236
00:08:23,829 --> 00:08:26,109
We'll have to have some more
space in our token map,

237
00:08:26,109 --> 00:08:28,630
but this is still going
to be an improvement.

238
00:08:28,630 --> 00:08:29,590
All right.

239
00:08:29,590 --> 00:08:31,269
Do people have any questions
about virtual nodes

240
00:08:31,269 --> 00:08:35,909
so far? Oh, right.

241
00:08:36,430 --> 00:08:39,389
Another thing is that
it helps us deal with

242
00:08:39,389 --> 00:08:42,289
machines that are really
not equally powerful.

243
00:08:42,289 --> 00:08:43,869
You might imagine
that when I buy

244
00:08:43,869 --> 00:08:45,849
a new set of machines
for a casadric cluster,

245
00:08:45,849 --> 00:08:47,749
I probably bought a bunch of
machines that are identical.

246
00:08:47,749 --> 00:08:50,609
I have the same CPU
and memory resources.

247
00:08:50,609 --> 00:08:52,570
Now, over time, if
I have more data,

248
00:08:52,570 --> 00:08:53,729
I want to add more machines,

249
00:08:53,729 --> 00:08:55,950
maybe the state of the
art hardware is changed.

250
00:08:55,950 --> 00:09:00,390
Maybe we have bigger memory
capacity and more cores.

251
00:09:00,390 --> 00:09:01,630
And so I might want to give

252
00:09:01,630 --> 00:09:04,480
the newer machines I'm
adding to an old cluster.

253
00:09:04,480 --> 00:09:06,530
More work than the old ones

254
00:09:06,530 --> 00:09:07,849
because they're more
capable, right?

255
00:09:07,849 --> 00:09:09,290
So one of the ways I could also

256
00:09:09,290 --> 00:09:10,689
use V nodes is that I could say,

257
00:09:10,689 --> 00:09:12,770
Okay, I have this node for
which the more powerful.

258
00:09:12,770 --> 00:09:14,550
Let's give it four tokens.

259
00:09:14,550 --> 00:09:17,270
The more tokens you
have, the more rages

260
00:09:17,270 --> 00:09:19,090
you'll have on the token rag,

261
00:09:19,090 --> 00:09:20,669
the more work you're probably
going to end up with.

262
00:09:20,669 --> 00:09:22,670
It's all probabilistic,
of course.

263
00:09:22,670 --> 00:09:24,469
When I'm doing that, what I'll

264
00:09:24,469 --> 00:09:26,050
say is this is a
heterogeneous cluster.

265
00:09:26,050 --> 00:09:27,449
Heterogeneous cluster means that

266
00:09:27,449 --> 00:09:28,930
not all the machines are equal.

267
00:09:28,930 --> 00:09:30,829
In contrast to
homogeneous cluster,

268
00:09:30,829 --> 00:09:32,829
all the machines are
identical to each other.

269
00:09:32,829 --> 00:09:40,379
Yeah, right here. Ode
rages which node row.

270
00:09:40,379 --> 00:09:45,040
Yeah, how do I figure out
which nodes which row?

271
00:09:45,040 --> 00:09:47,279
Yeah, who gets D. So the way

272
00:09:47,279 --> 00:09:48,499
I do it is I would start on D,

273
00:09:48,499 --> 00:09:49,820
and I would walk to
the right and I'm

274
00:09:49,820 --> 00:09:51,719
re bump into node two.

275
00:09:51,719 --> 00:09:55,420
So D will go to node
two. That makes sens?

276
00:09:55,420 --> 00:09:56,900
So I can either

277
00:09:56,900 --> 00:09:58,299
think of it like from
the node perspective,

278
00:09:58,299 --> 00:10:02,420
I walk right, or I can think
of it I say nod a row.

279
00:10:02,420 --> 00:10:04,019
I can think of it from
the row's perspective.

280
00:10:04,019 --> 00:10:05,339
I start there and I walk right,

281
00:10:05,339 --> 00:10:07,239
or I can think of it from
the nodes perspective.

282
00:10:07,239 --> 00:10:10,060
I say I on this token and
everything to the left,

283
00:10:10,060 --> 00:10:13,739
like up until, but not
including another node, right?

284
00:10:13,739 --> 00:10:15,480
Yeah, thanks for asking.

285
00:10:15,480 --> 00:10:17,439
Yeah, there are
questions people have.

286
00:10:17,439 --> 00:10:19,159
Yeah.

287
00:10:27,350 --> 00:10:30,450
Yeah, how is this helping solve

288
00:10:30,450 --> 00:10:31,770
the problem of only one node be

289
00:10:31,770 --> 00:10:33,490
responsible for
the data transfer?

290
00:10:33,490 --> 00:10:35,210
Well, in this case,

291
00:10:35,210 --> 00:10:37,709
Node two used to own
all of this range here.

292
00:10:37,709 --> 00:10:39,230
And so Node two will have to

293
00:10:39,230 --> 00:10:41,249
give some of that
data to node four.

294
00:10:41,249 --> 00:10:42,610
I also see over here,

295
00:10:42,610 --> 00:10:44,489
another place where
none four is adding,

296
00:10:44,489 --> 00:10:45,849
node one is to its right.

297
00:10:45,849 --> 00:10:47,289
So in this case, node one is

298
00:10:47,289 --> 00:10:49,249
sending some of its
data to node four.

299
00:10:49,249 --> 00:10:50,449
Right? So instead of just having

300
00:10:50,449 --> 00:10:52,269
one node sending a lot of data,

301
00:10:52,269 --> 00:10:53,509
we have more nodes, each

302
00:10:53,509 --> 00:10:54,890
setting a smaller
amount of data.

303
00:10:54,890 --> 00:10:56,930
We're kind of spreading
out the work a little bit.

304
00:10:56,930 --> 00:10:58,529
And you can imagine some
trade offs here, right?

305
00:10:58,529 --> 00:11:03,829
I guess, more V nodes we
have for physical node,

306
00:11:03,829 --> 00:11:05,329
the more we could break that up.

307
00:11:05,329 --> 00:11:06,849
But also, you don't
want to have a

308
00:11:06,849 --> 00:11:09,490
giant token MAP data
structure, right?

309
00:11:09,490 --> 00:11:12,789
So you can 16 is the default,
which is probably fine.

310
00:11:12,789 --> 00:11:14,430
If you have 16 machines

311
00:11:14,430 --> 00:11:16,270
helping one new machine
come up to speed,

312
00:11:16,270 --> 00:11:17,649
that'll probably get done pretty

313
00:11:17,649 --> 00:11:18,850
quickly. Does that make sense?

314
00:11:18,850 --> 00:11:20,049
Yeah, thanks for asking.

315
00:11:20,049 --> 00:11:22,269
Yeah, other questions
people have.

316
00:11:26,720 --> 00:11:30,420
Oh, yeah, how does it decide
where to place these new ds?

317
00:11:30,420 --> 00:11:32,639
Is that That's a policy
that's evolved, right?

318
00:11:32,639 --> 00:11:35,779
Originally, they used to just
choose it randomly, right?

319
00:11:35,779 --> 00:11:37,999
They started to see, like, Oh,

320
00:11:37,999 --> 00:11:39,340
well, if I have this rage,

321
00:11:39,340 --> 00:11:40,620
let's try to cut it evily,

322
00:11:40,620 --> 00:11:42,260
let's try to look
for a bigger rage.

323
00:11:42,260 --> 00:11:44,939
And so, they're trying
to be clever about it.

324
00:11:44,939 --> 00:11:47,999
I'm guessing that
will evolve, right?

325
00:11:47,999 --> 00:11:50,139
How they choose it, right?

326
00:11:50,139 --> 00:11:52,479
And I'm not sure what the
state of the art is, right?

327
00:11:52,479 --> 00:11:53,980
They probably just keep
adding more and more,

328
00:11:53,980 --> 00:11:55,539
clever things to it over time.

329
00:11:55,539 --> 00:11:56,600
Yeah, thanks for rest.

330
00:11:56,600 --> 00:12:03,350
Yeah. Question.
Function. Oh, yeah.

331
00:12:03,350 --> 00:12:05,049
What is the rage of
the hash function?

332
00:12:05,049 --> 00:12:07,369
So I guess in this case,
they're using at 64, right?

333
00:12:07,369 --> 00:12:10,989
So it's quite a big range of
numbers. Yeah, they're here.

334
00:12:17,350 --> 00:12:19,890
Yeah, for the rows,

335
00:12:19,890 --> 00:12:21,690
it's just a hash function,
so it's not rand,

336
00:12:21,690 --> 00:12:23,189
it'll be deterministic, right?

337
00:12:23,189 --> 00:12:25,149
I kind of the key
insight there is

338
00:12:25,149 --> 00:12:27,409
that we're choosing the tokens

339
00:12:27,409 --> 00:12:29,569
differently for the rows that we

340
00:12:29,569 --> 00:12:32,229
do the nose because we
have a lot of rows, right?

341
00:12:32,229 --> 00:12:34,569
And so we don't want to have
any kind of data structure,

342
00:12:34,569 --> 00:12:36,270
I even if we choose randomly,

343
00:12:36,270 --> 00:12:37,930
we have to remember
what we chose.

344
00:12:37,930 --> 00:12:40,190
When we're citing Rosa Token,

345
00:12:40,190 --> 00:12:41,609
we want to just do
it with math, right?

346
00:12:41,609 --> 00:12:43,330
Because math doesn't
take any memory,

347
00:12:43,330 --> 00:12:44,549
and everybody can
do the same math,

348
00:12:44,549 --> 00:12:45,469
no matter where they are.

349
00:12:45,469 --> 00:12:46,929
So we have lots
and lots of rows,

350
00:12:46,929 --> 00:12:49,430
so it's just like a simple
hash flection for the rows.

351
00:12:49,430 --> 00:12:52,350
For the nodes, we have a
little bit more flexibility.

352
00:12:52,350 --> 00:12:53,430
There's not that many rows.

353
00:12:53,430 --> 00:12:55,849
I can put all a little
bit of meta data about

354
00:12:55,849 --> 00:12:58,169
every single row in a
big Python dictionary

355
00:12:58,169 --> 00:12:59,709
or whatever data
structure they have.

356
00:12:59,709 --> 00:13:01,589
That make sense? Yeah,
Thanks for asty.

357
00:13:01,589 --> 00:13:06,089
Yeah other questions
people. All right.

358
00:13:06,410 --> 00:13:08,889
So one of the questions is,

359
00:13:08,889 --> 00:13:11,469
where should this
token Map live?

360
00:13:11,469 --> 00:13:12,809
That's a very important thing

361
00:13:12,809 --> 00:13:16,795
because unless you have
information about the Token Map,

362
00:13:16,795 --> 00:13:18,959
You have no way of
tracking down for

363
00:13:18,959 --> 00:13:21,699
a specific row where
I can find it, right?

364
00:13:21,699 --> 00:13:24,099
And the solution
in a system like,

365
00:13:24,099 --> 00:13:26,680
you know, HDFS is that
they have a name node.

366
00:13:26,680 --> 00:13:29,080
They have a centralized name
node that has all that data,

367
00:13:29,080 --> 00:13:30,420
and if you want to get access

368
00:13:30,420 --> 00:13:32,240
to the data, you talk
to the name node.

369
00:13:32,240 --> 00:13:36,440
That's not great, right? Because
the name node could die.

370
00:13:36,440 --> 00:13:38,280
It could become a
performance bottledck.

371
00:13:38,280 --> 00:13:40,639
And so what they do,

372
00:13:40,639 --> 00:13:42,359
instead, is they put

373
00:13:42,359 --> 00:13:44,800
the token map on
every single worker.

374
00:13:44,800 --> 00:13:46,260
If we have 100 workers,

375
00:13:46,260 --> 00:13:49,740
they all have a token map that
describes all 100 workers,

376
00:13:49,740 --> 00:13:52,459
right? And that's fine, right?

377
00:13:52,459 --> 00:13:53,859
That works pretty
well. We're very

378
00:13:53,859 --> 00:13:55,479
unlikely to lose that data.

379
00:13:55,479 --> 00:13:57,179
The holy trick is that,

380
00:13:57,179 --> 00:13:59,139
you know, when I
change the token map,

381
00:13:59,139 --> 00:14:00,760
for example, because
there's a new node

382
00:14:00,760 --> 00:14:02,759
entering the system, I
have to update that.

383
00:14:02,759 --> 00:14:04,819
And if I have to
update 100 copies of

384
00:14:04,819 --> 00:14:07,500
the same thing, that
could be a problem.

385
00:14:07,500 --> 00:14:08,639
How do I do it efficiently?

386
00:14:08,639 --> 00:14:10,759
And more importantly,
how do I do

387
00:14:10,759 --> 00:14:13,559
it if one of the machines
is temporarily down, right?

388
00:14:13,559 --> 00:14:15,680
So I'm imagining this here.

389
00:14:15,680 --> 00:14:17,500
This machine was rebooting,

390
00:14:17,500 --> 00:14:19,359
or having some kind
of other issue.

391
00:14:19,359 --> 00:14:21,979
And when that happened,
node four table.

392
00:14:21,979 --> 00:14:23,740
We're trying to add node
four to the cluster,

393
00:14:23,740 --> 00:14:28,200
and so I can tell nodes one
and two about that new node.

394
00:14:28,200 --> 00:14:30,579
But what about node three,
right? Like, what do I do?

395
00:14:30,579 --> 00:14:33,120
Do I have to wait until
the cluster is perfectly

396
00:14:33,120 --> 00:14:36,259
healthy with all nodes
online to add a new node?

397
00:14:36,259 --> 00:14:38,200
I mean, honestly,
I might be adding

398
00:14:38,200 --> 00:14:39,380
the new nodes specifically

399
00:14:39,380 --> 00:14:40,979
because another node
is down, right?

400
00:14:40,979 --> 00:14:42,560
So I don't want to have to wait.

401
00:14:42,560 --> 00:14:44,940
And so we have to have
a more clever approach

402
00:14:44,940 --> 00:14:46,140
that can let the system

403
00:14:46,140 --> 00:14:49,939
proceed even while we

404
00:14:49,939 --> 00:14:51,799
can update everything
at the same time.

405
00:14:51,799 --> 00:14:54,580
And so the approach is
called Jos or maybe we call,

406
00:14:54,580 --> 00:14:56,479
like an epidemic algorithm.

407
00:14:56,479 --> 00:15:00,259
And the idea is that node
four, right we're adding that?

408
00:15:00,259 --> 00:15:02,479
We'll just let a
handful of nodes know.

409
00:15:02,479 --> 00:15:03,879
Maybe even just like node two.

410
00:15:03,879 --> 00:15:05,439
So no two knows about it.

411
00:15:05,439 --> 00:15:06,979
And then what will
happen is that

412
00:15:06,979 --> 00:15:08,779
the nodes engage in Joss.

413
00:15:08,779 --> 00:15:11,319
And Joss upp happens randomly.

414
00:15:11,319 --> 00:15:15,040
I think it's like every one
seconds, but it's tunable.

415
00:15:15,040 --> 00:15:17,899
Each node will randomly
choose another node,

416
00:15:17,899 --> 00:15:19,700
and they'll exchange
information.

417
00:15:19,700 --> 00:15:21,119
L node two will say to node one,

418
00:15:21,119 --> 00:15:22,739
Hey, have you heard
about node four,

419
00:15:22,739 --> 00:15:24,579
and node one will say, no,

420
00:15:24,579 --> 00:15:27,854
Node two will be, here are
its tokens. Now you know.

421
00:15:27,854 --> 00:15:30,249
Right? You can
already see, right,

422
00:15:30,249 --> 00:15:32,389
how fast gossip spreads
in real life or

423
00:15:32,389 --> 00:15:34,750
how fast like a virus
spreads in real life.

424
00:15:34,750 --> 00:15:36,370
And this is not
even engineered by

425
00:15:36,370 --> 00:15:37,149
somebody to try to make it

426
00:15:37,149 --> 00:15:38,449
spread as fast as
possible, right?

427
00:15:38,449 --> 00:15:40,329
So this will happen
very quickly, right?

428
00:15:40,329 --> 00:15:43,569
There's, you know, every
second gossips happening.

429
00:15:43,569 --> 00:15:46,430
I'll quickly spread to all
the nodes that are available.

430
00:15:46,430 --> 00:15:47,849
And the good thing
is is that when

431
00:15:47,849 --> 00:15:49,730
this node three
comes back on line,

432
00:15:49,730 --> 00:15:52,589
whoever it gossips with
will very quickly tell.

433
00:15:52,589 --> 00:15:53,889
Within a matter of
seconds, they'll

434
00:15:53,889 --> 00:15:55,730
have it. That's
how I end up here.

435
00:15:55,730 --> 00:16:02,659
This How much does the network
I owe slow the efficiency?

436
00:16:02,659 --> 00:16:05,199
I guess it depends on how
frequently you do it.

437
00:16:05,199 --> 00:16:06,880
You could trade off
like if I want to toss

438
00:16:06,880 --> 00:16:09,000
up more frequently and
spend more network I owe.

439
00:16:09,000 --> 00:16:12,260
My intuition is that probably

440
00:16:12,260 --> 00:16:15,559
it's not a big factor because
when you're trying to say,

441
00:16:15,559 --> 00:16:18,039
like, Hey, do we have
the same token map?

442
00:16:18,039 --> 00:16:20,019
There are ways to have

443
00:16:20,019 --> 00:16:22,660
a check sum or like a
hash of your token map.

444
00:16:22,660 --> 00:16:24,199
And so it's not necessarily that

445
00:16:24,199 --> 00:16:25,939
I send you everything
I know every time.

446
00:16:25,939 --> 00:16:27,699
It's like, we might
first of say,

447
00:16:27,699 --> 00:16:29,139
Hey, do you know what I know?

448
00:16:29,139 --> 00:16:30,500
And if the answer is yes,

449
00:16:30,500 --> 00:16:31,879
then you could be done,
and if it's like,

450
00:16:31,879 --> 00:16:33,399
Oh, we actually have
a different view

451
00:16:33,399 --> 00:16:34,959
of the world, then we
could actually do it.

452
00:16:34,959 --> 00:16:36,979
So I think it'll be
pretty fast in general.

453
00:16:36,979 --> 00:16:39,140
Yeah, I sought a question.

454
00:16:44,460 --> 00:16:46,740
Yeah, every node chooses

455
00:16:46,740 --> 00:16:48,359
another node every
second to gossip with.

456
00:16:48,359 --> 00:16:49,519
So they're just trying to make

457
00:16:49,519 --> 00:16:51,440
the news spread as
fast as possible.

458
00:16:51,440 --> 00:16:53,399
That will kind of
go exponentially.

459
00:16:53,399 --> 00:16:55,660
The information will
quickly be everywhere.

460
00:16:55,660 --> 00:16:58,080
Yeah, right here. When two nodes

461
00:16:58,080 --> 00:17:00,340
disagree, how do you
determine who's?

462
00:17:00,340 --> 00:17:02,060
Oh, when two nodes disagree,

463
00:17:02,060 --> 00:17:04,129
how do you determine
who's right?

464
00:17:04,129 --> 00:17:05,819
Something.

465
00:17:05,819 --> 00:17:08,020
Yeah, you're saying
like, Oh, maybe

466
00:17:08,020 --> 00:17:10,899
somebody deleted a note
or something like that.

467
00:17:10,899 --> 00:17:12,459
I don't know what
they do. I mean,

468
00:17:12,459 --> 00:17:13,719
I could speculate based on

469
00:17:13,719 --> 00:17:15,719
how people build
other things, right?

470
00:17:15,719 --> 00:17:18,779
You can imagine like putting
times staaps on the events.

471
00:17:18,779 --> 00:17:21,680
You can imagine this is
called like a tombstone.

472
00:17:21,680 --> 00:17:22,760
Sometimes when you
delete something

473
00:17:22,760 --> 00:17:24,000
instead of having
no information,

474
00:17:24,000 --> 00:17:27,060
you keep some information
like this thing was deleted.

475
00:17:27,060 --> 00:17:29,520
And so if you had a time
statap and a tombstone,

476
00:17:29,520 --> 00:17:30,660
you could say, like, Oh,

477
00:17:30,660 --> 00:17:33,120
you think it's added, but I
actually think it's deleted,

478
00:17:33,120 --> 00:17:34,679
and I'm more up to date, right?

479
00:17:34,679 --> 00:17:36,259
So I don't know how
exactly they do it,

480
00:17:36,259 --> 00:17:37,579
but it's probably
something like that.

481
00:17:37,579 --> 00:17:39,280
Yeah, so I had up over here.

482
00:17:39,280 --> 00:17:42,719
Us all the time.

483
00:17:44,680 --> 00:17:47,019
Yeah, they're just
like literally

484
00:17:47,019 --> 00:17:48,819
gossiping all the
time forever, right?

485
00:17:48,819 --> 00:17:51,699
So they're just like sending
these little messages like,

486
00:17:51,699 --> 00:17:53,139
Hey, like, what do
you know, right?

487
00:17:53,139 --> 00:17:55,539
You know, I mean, there's
some overhead to it,

488
00:17:55,539 --> 00:17:56,879
but, you know, there are

489
00:17:56,879 --> 00:17:59,039
changes that everybody
knows quickly, right?

490
00:17:59,039 --> 00:18:00,780
Yeah. Yeah, thanks for asking.

491
00:18:00,780 --> 00:18:04,759
Yeah other questions
people have. All right.

492
00:18:04,820 --> 00:18:08,939
Now, how would you actually
go about reading some data?

493
00:18:08,939 --> 00:18:10,479
Well, if you were a HDFS,

494
00:18:10,479 --> 00:18:12,220
then the client would talk
to the name node first

495
00:18:12,220 --> 00:18:14,320
because name node
has the block map.

496
00:18:14,320 --> 00:18:16,020
But this isn't HDFS.

497
00:18:16,020 --> 00:18:18,139
In this case, the
client could talk to

498
00:18:18,139 --> 00:18:19,919
literally Eddie node of

499
00:18:19,919 --> 00:18:22,180
the system because all the
nodes have the token map,

500
00:18:22,180 --> 00:18:23,560
right, Edy node can
help them figure

501
00:18:23,560 --> 00:18:25,219
out how to do the IO.

502
00:18:25,219 --> 00:18:27,219
And so the client
will just maybe it

503
00:18:27,219 --> 00:18:28,339
chooses like one randomly or

504
00:18:28,339 --> 00:18:29,980
maybe it chooses
from a small set.

505
00:18:29,980 --> 00:18:31,740
It's not too important how.

506
00:18:31,740 --> 00:18:33,439
But what will happen then is

507
00:18:33,439 --> 00:18:35,420
that what it talks to
will be the coordinator.

508
00:18:35,420 --> 00:18:36,830
And the coordinator I'd

509
00:18:36,830 --> 00:18:38,709
actually have the data,
but probably not.

510
00:18:38,709 --> 00:18:41,329
We generally happen if I
try to read the node f,

511
00:18:41,329 --> 00:18:43,330
who's the coordinator
in this case,

512
00:18:43,330 --> 00:18:46,349
will find the data for me
based on where it knows it is,

513
00:18:46,349 --> 00:18:49,050
and send it back, or maybe
it'll write it there.

514
00:18:49,050 --> 00:18:51,229
And, you know, different clients

515
00:18:51,229 --> 00:18:52,329
will connect and have different

516
00:18:52,329 --> 00:18:53,590
coordinators doesn't
really matter.

517
00:18:53,590 --> 00:18:56,010
Any node can be a coordinator.

518
00:18:56,970 --> 00:19:00,869
Alright, cool. So let's do a
couple of top hat questions,

519
00:19:00,869 --> 00:19:03,729
and then they'll do some
worksheet problems.

520
00:19:05,570 --> 00:19:06,969
All right.

521
00:19:06,969 --> 00:19:09,329
My first question is about
how much space do we have to

522
00:19:09,329 --> 00:19:13,010
use for the Token Map.

523
00:19:50,710 --> 00:19:53,990
About 30 seconds left.

524
00:20:26,720 --> 00:20:30,359
Most people say the number
of nodes in Cassady,

525
00:20:30,359 --> 00:20:32,339
which is totally correct, right?

526
00:20:32,339 --> 00:20:34,179
We wouldn't want to have

527
00:20:34,179 --> 00:20:36,180
information there
about individual rows

528
00:20:36,180 --> 00:20:37,240
because we have too many rows.

529
00:20:37,240 --> 00:20:38,620
The token map would be too big,

530
00:20:38,620 --> 00:20:41,400
but it's very
reasonable to remember

531
00:20:41,400 --> 00:20:45,039
all of the tokens for
each node of the cluster.

532
00:20:45,039 --> 00:20:47,679
All right. Well, let me
pull up another one.

533
00:20:51,640 --> 00:20:59,640
Oh, right. And this one is
about the wrapping rage.

534
00:21:39,580 --> 00:21:42,900
About 30 seconds left.

535
00:22:18,280 --> 00:22:20,639
Okay, so people are saying B,

536
00:22:20,639 --> 00:22:24,299
but answer is actually C, right?

537
00:22:24,299 --> 00:22:25,839
So remember if I'm a row,

538
00:22:25,839 --> 00:22:27,720
and I'm trying to
find my vetode.

539
00:22:27,720 --> 00:22:29,279
I first check if I have

540
00:22:29,279 --> 00:22:31,380
an exact batch of the token.
That usually doesn't happen.

541
00:22:31,380 --> 00:22:35,220
But if I do that I'm
drug, otherwise,

542
00:22:35,220 --> 00:22:36,999
what I do is I keep
walking to the right,

543
00:22:36,999 --> 00:22:38,299
I go bigger and
bigger and bigger,

544
00:22:38,299 --> 00:22:39,600
until if I don't find anything,

545
00:22:39,600 --> 00:22:41,699
then I wrap around to
the smallest, right?

546
00:22:41,699 --> 00:22:44,319
So only if the token of

547
00:22:44,319 --> 00:22:48,659
a row is bigger than
all the vetodes,

548
00:22:48,659 --> 00:22:50,440
that I'm in the wrapping range.

549
00:22:50,440 --> 00:22:53,160
Alright? A question about
that I see that threw

550
00:22:53,160 --> 00:22:57,339
people ahat. All right.

551
00:22:57,339 --> 00:22:59,699
Cool. So let's throw ahead,

552
00:22:59,699 --> 00:23:03,659
and we will head over
to the document camera.

553
00:23:03,659 --> 00:23:05,459
And and hopefully people have

554
00:23:05,459 --> 00:23:06,639
the worksheet printed or on

555
00:23:06,639 --> 00:23:08,659
a tablet or something like that.

556
00:23:08,659 --> 00:23:11,339
And there's really
two sides of it.

557
00:23:11,339 --> 00:23:13,199
The first side assumes that

558
00:23:13,199 --> 00:23:15,940
there's only one
replica of every row.

559
00:23:15,940 --> 00:23:17,499
Even with all these
vetos, right?

560
00:23:17,499 --> 00:23:19,120
We only have one
replica of every row.

561
00:23:19,120 --> 00:23:20,659
Later, I'd be to show
that we can have

562
00:23:20,659 --> 00:23:22,600
multiple replicas of
the same piece of data.

563
00:23:22,600 --> 00:23:24,179
And so this side is all

564
00:23:24,179 --> 00:23:26,719
partitioning with
replication of one.

565
00:23:26,719 --> 00:23:29,339
And then the second part,
which we'll get to is

566
00:23:29,339 --> 00:23:30,639
what happens when
we have multiple

567
00:23:30,639 --> 00:23:32,800
replicas of the
same piece of data.

568
00:23:32,800 --> 00:23:35,239
Alright, so the
first question is,

569
00:23:35,239 --> 00:23:37,320
for this token map up here,

570
00:23:37,320 --> 00:23:40,359
how many nodes are
there in the system.

571
00:23:40,359 --> 00:23:41,860
And so I ask that first later,

572
00:23:41,860 --> 00:23:43,360
I'll ask about how many Vodes.

573
00:23:43,360 --> 00:23:44,680
But for the first question,

574
00:23:44,680 --> 00:23:46,699
maybe people can hold up
some number of fingers.

575
00:23:46,699 --> 00:23:50,999
How many computers or nodes
are there in this cluster?

576
00:23:54,320 --> 00:23:58,179
I'm seeing some threes,
which is correct, right?

577
00:23:58,179 --> 00:24:02,459
There's nodes. There's
nodes one, two, and three.

578
00:24:02,459 --> 00:24:05,099
Okay, great. And how
many V nodes are there?

579
00:24:05,099 --> 00:24:07,560
You might need
more than one had?

580
00:24:11,580 --> 00:24:15,320
All right? I'm S sevens,

581
00:24:15,320 --> 00:24:17,019
which is correct, right?

582
00:24:17,019 --> 00:24:21,020
Because I have two plus two
plus plus three over here.

583
00:24:21,020 --> 00:24:24,339
All right, great.
So another one,

584
00:24:24,339 --> 00:24:26,439
I may ask, and people up
su number of figures.

585
00:24:26,439 --> 00:24:28,279
I'm asked of nodes
one, two or three,

586
00:24:28,279 --> 00:24:30,019
which one probably has

587
00:24:30,019 --> 00:24:33,939
the most resources in terms
of either computer battery?

588
00:24:37,420 --> 00:24:41,079
I'm S three, which is correct.

589
00:24:41,079 --> 00:24:44,100
We gave Node three more tokens,

590
00:24:44,100 --> 00:24:45,659
and that means that
probabilistically

591
00:24:45,659 --> 00:24:47,020
on more of the token rig,

592
00:24:47,020 --> 00:24:48,799
which means it's probably
going to get more work.

593
00:24:48,799 --> 00:24:53,539
Yeah, question. I don't
know if the exact sees.

594
00:24:58,070 --> 00:25:00,649
Oh, oh, that's a
great, great question.

595
00:25:00,649 --> 00:25:02,390
So is it possible
that one V node

596
00:25:02,390 --> 00:25:03,709
has more than one token?

597
00:25:03,709 --> 00:25:07,209
No, by definition, one
V node has one token.

598
00:25:07,209 --> 00:25:09,750
And so what we're really
the problem we're really

599
00:25:09,750 --> 00:25:10,849
trying to solve is we wanted to

600
00:25:10,849 --> 00:25:12,769
have one physical machine.

601
00:25:12,769 --> 00:25:15,930
We wanted one physical machine
to have multiple tokens.

602
00:25:15,930 --> 00:25:18,129
And so the ranges,

603
00:25:18,129 --> 00:25:19,489
corresponding to each
of those token is,

604
00:25:19,489 --> 00:25:20,469
what we call a V node, right?

605
00:25:20,469 --> 00:25:21,990
So a V node is one range,

606
00:25:21,990 --> 00:25:24,710
a node is a machine that
has multiple V nodes.

607
00:25:24,710 --> 00:25:25,889
That makes sense? Yeah, Yeah,

608
00:25:25,889 --> 00:25:27,889
thanks for bringing that back.

609
00:25:27,889 --> 00:25:29,789
Yeah, if anybody else
had any questions,

610
00:25:29,789 --> 00:25:33,589
pop up a head at
any time. Alright.

611
00:25:33,630 --> 00:25:36,889
So let's see how we can
actually draw this out.

612
00:25:36,889 --> 00:25:38,249
I think it's helpful
just kind of go

613
00:25:38,249 --> 00:25:40,229
through the steps of
visualizing this.

614
00:25:40,229 --> 00:25:42,529
And so I can already
see that node two,

615
00:25:42,529 --> 00:25:45,310
one of its tokens
is negative six.

616
00:25:45,310 --> 00:25:47,450
Let's just label all
of these on the top.

617
00:25:47,450 --> 00:25:48,709
You know, normally, it's like,

618
00:25:48,709 --> 00:25:50,230
you have every possible at 64.

619
00:25:50,230 --> 00:25:51,430
I like to just try to draw these

620
00:25:51,430 --> 00:25:53,430
tidy ranges for these examples.

621
00:25:53,430 --> 00:25:55,570
Okay, let's do node wood.

622
00:25:55,570 --> 00:26:04,710
Node wood is at T
negative two and four.

623
00:26:04,950 --> 00:26:11,390
All right. Node two is at
negative six and zero.

624
00:26:11,800 --> 00:26:17,180
And Node three is at
negative four, two and five.

625
00:26:17,180 --> 00:26:25,840
So negative four. Two and
five. Alright, great.

626
00:26:25,840 --> 00:26:27,339
So if I give you

627
00:26:27,339 --> 00:26:28,660
a token bath and ask

628
00:26:28,660 --> 00:26:30,659
some questions about Waki the
rag or something like that,

629
00:26:30,659 --> 00:26:32,120
hopefully, like,
you would first,

630
00:26:32,120 --> 00:26:34,519
you know, make a picture, so
you could reason through it.

631
00:26:34,519 --> 00:26:36,440
Alright. So my first question,

632
00:26:36,440 --> 00:26:38,279
I'll just get like one
volunteer for this.

633
00:26:38,279 --> 00:26:39,980
I'm wondering what
ring positions

634
00:26:39,980 --> 00:26:41,910
are in the wrapping range?

635
00:26:41,910 --> 00:26:45,999
Re, right here.
Excellent, right?

636
00:26:45,999 --> 00:26:49,479
So six and seven are in
the wrapping range, right?

637
00:26:49,479 --> 00:26:53,040
If we're trying to find a note

638
00:26:53,040 --> 00:26:57,639
and the token of our row
is in that wrapping range,

639
00:26:57,639 --> 00:27:00,100
then we'll wrap around
to the right over here.

640
00:27:00,100 --> 00:27:02,220
Alright, great. Let's do a
couple of these quickly,

641
00:27:02,220 --> 00:27:03,319
so I'm wondering which note is

642
00:27:03,319 --> 00:27:05,640
responsible for each
of these tokens.

643
00:27:05,640 --> 00:27:10,300
So let's say that a row
gives me Token four.

644
00:27:10,680 --> 00:27:12,840
That's actually an exact match.

645
00:27:12,840 --> 00:27:14,279
I'll just do that
one for us, right?

646
00:27:14,279 --> 00:27:17,540
So node four. I'm sorry.

647
00:27:17,540 --> 00:27:21,379
So the row with Token four is
going to give us node one.

648
00:27:21,379 --> 00:27:24,979
All right. And now I have
another row with Token one.

649
00:27:24,979 --> 00:27:27,419
Maybe people can hold up
some number of fingers.

650
00:27:27,419 --> 00:27:29,559
Which node will take this one?

651
00:27:31,140 --> 00:27:33,479
I'm seeing a mix of answers.

652
00:27:33,479 --> 00:27:35,379
When we walk the ring,
we walk to the right.

653
00:27:35,379 --> 00:27:37,859
So I walk to the right, and
I bump into node three.

654
00:27:37,859 --> 00:27:40,859
So node three is the
one that owns this one.

655
00:27:40,859 --> 00:27:42,459
We always walk the ring to

656
00:27:42,459 --> 00:27:44,299
the right. Alright. Great, cool.

657
00:27:44,299 --> 00:27:47,420
And now I have six and
some number of fingers,

658
00:27:47,420 --> 00:27:51,000
which node I you're
going to own this row?

659
00:27:51,000 --> 00:27:55,140
Se kind of a mix
of answers again.

660
00:27:55,140 --> 00:27:57,639
Right? So the
answer is node two.

661
00:27:57,639 --> 00:28:00,760
So I always walk to the right
and I have to wrap around,

662
00:28:00,760 --> 00:28:02,839
and I hit node two
over here, right?

663
00:28:02,839 --> 00:28:04,379
So node two.

664
00:28:04,580 --> 00:28:07,440
Hey, I threw people off
with a couple of these.

665
00:28:07,440 --> 00:28:08,639
I want to just pause and see if

666
00:28:08,639 --> 00:28:10,059
anybody has any questions.

667
00:28:10,059 --> 00:28:13,659
Yeah, right here.
Yeah. Question is

668
00:28:14,580 --> 00:28:20,319
walk to the right would
not be consider values.

669
00:28:20,319 --> 00:28:22,100
We do consider values at equal.

670
00:28:22,100 --> 00:28:24,360
If it's an exact match, then,

671
00:28:24,360 --> 00:28:28,019
if a row and a worker happen
to have the same token,

672
00:28:28,019 --> 00:28:29,600
that rows that token.

673
00:28:29,600 --> 00:28:31,559
And it's always
hard to remember,

674
00:28:31,559 --> 00:28:34,579
h, what's inclusive or
not? I just remember.

675
00:28:34,579 --> 00:28:36,920
Once I kind of formulate
it to myself that way,

676
00:28:36,920 --> 00:28:41,100
if a row and a worker match
that row is on that worker.

677
00:28:41,100 --> 00:28:42,559
That's the very first
thing. The second thing

678
00:28:42,559 --> 00:28:43,979
to remember is always
walk to the right.

679
00:28:43,979 --> 00:28:45,699
Yeah, question.

680
00:28:51,960 --> 00:28:55,739
Yeah, the wrapping range
means that you're past

681
00:28:55,739 --> 00:28:59,159
the biggest V node because
you always walk to the right.

682
00:28:59,159 --> 00:29:00,700
And so if you're past
the biggest V node,

683
00:29:00,700 --> 00:29:02,960
you're able to walk off
the end and wrap around.

684
00:29:02,960 --> 00:29:05,959
Yeah. Yeah, thanks for
clarifying. Yeah, right here.

685
00:29:14,000 --> 00:29:17,599
C node one be
responsible for what?

686
00:29:25,180 --> 00:29:27,559
Okay, so I'm on Token one.

687
00:29:27,559 --> 00:29:30,480
So I'm right here.
And you're asking,

688
00:29:30,480 --> 00:29:33,019
could which node be responsible?

689
00:29:33,580 --> 00:29:36,739
Node one could not be because

690
00:29:37,100 --> 00:29:40,319
I'm not really interested in
like the node number, right?

691
00:29:40,319 --> 00:29:44,039
I'm more interested in
the token number, right?

692
00:29:44,039 --> 00:29:47,799
And so Node three has

693
00:29:47,799 --> 00:29:50,079
the first token number

694
00:29:50,079 --> 00:29:52,400
when I walk to the right.
Does that make sense?

695
00:29:52,400 --> 00:29:54,240
Yeah, I guess it's kind
of like a little weird,

696
00:29:54,240 --> 00:29:56,300
but I'm not And maybe
I should have called

697
00:29:56,300 --> 00:29:57,799
these node ABC just to

698
00:29:57,799 --> 00:29:59,460
make sure that there's
no confusion there,

699
00:29:59,460 --> 00:30:02,139
but it doesn't
care what that is.

700
00:30:02,139 --> 00:30:04,319
Yeah, thanks for
asking. All right.

701
00:30:04,319 --> 00:30:08,375
So yeah, right here. 62.

702
00:30:08,375 --> 00:30:10,570
Yep, I start at six,

703
00:30:10,570 --> 00:30:13,769
and I walked to the
right until I find it.

704
00:30:13,769 --> 00:30:17,090
So I fall off the end and
I find node two over here.

705
00:30:17,090 --> 00:30:19,050
The first one I run into.

706
00:30:19,050 --> 00:30:20,230
Yep. That's called
walking in the Ring.

707
00:30:20,230 --> 00:30:22,450
And I saw another
hand up over here.

708
00:30:24,210 --> 00:30:27,670
Oh, yeah, why is it a
negative eight to seven?

709
00:30:27,670 --> 00:30:30,749
It could be anything.
For, you know,

710
00:30:30,749 --> 00:30:33,730
for n 64, it's a
much bigger range.

711
00:30:33,730 --> 00:30:34,889
And so I'm just trying to have

712
00:30:34,889 --> 00:30:36,390
something that is kind of small.

713
00:30:36,390 --> 00:30:38,269
So I think that I guess

714
00:30:38,269 --> 00:30:40,389
like if I had like
a four bit number,

715
00:30:40,389 --> 00:30:43,050
then and it was like signed,
that would be the range.

716
00:30:43,050 --> 00:30:44,550
But I mean, I guess I
could have drawn anything.

717
00:30:44,550 --> 00:30:45,849
I could have said
like five to five.

718
00:30:45,849 --> 00:30:47,749
I'm just trying to
draw a simple picture.

719
00:30:47,749 --> 00:30:48,550
Makes sense.

720
00:30:48,550 --> 00:30:58,360
I don't Oh,

721
00:30:58,360 --> 00:30:59,400
could you're saying,

722
00:30:59,400 --> 00:31:01,760
like, could a negative number
be in the wrapping range?

723
00:31:01,760 --> 00:31:03,739
Yeah, yeah, it
absolutely could be.

724
00:31:03,739 --> 00:31:04,999
It'd be kind of,
like, a funny ring.

725
00:31:04,999 --> 00:31:07,580
But for example, if
for whatever reason,

726
00:31:07,580 --> 00:31:09,300
like, if I had, like, my tokens,

727
00:31:09,300 --> 00:31:11,839
like if the biggest token
was negative three,

728
00:31:11,839 --> 00:31:14,599
then the whole wrapping
range would be here, right?

729
00:31:14,599 --> 00:31:17,219
So I guess, like I

730
00:31:17,219 --> 00:31:19,779
guess I'm drawing like tokens
in our signed numbers,

731
00:31:19,779 --> 00:31:22,439
but like thinking about,

732
00:31:22,439 --> 00:31:23,760
whether it's a
positive or negative

733
00:31:23,760 --> 00:31:25,020
number doesn't help
us answer anything.

734
00:31:25,020 --> 00:31:26,959
I'm just interested in
the order of the numbers.

735
00:31:26,959 --> 00:31:28,559
If that makes sense? Yeah,
thanks for polling that out.

736
00:31:28,559 --> 00:31:30,219
I didn't think about
the sign. Yeah, right.

737
00:31:30,219 --> 00:31:37,879
87 These are not part of
the wrapping range, right.

738
00:31:37,879 --> 00:31:40,659
Right. Be if I'm walking
the ring to the right,

739
00:31:40,659 --> 00:31:42,300
I don't have any kind
of special case.

740
00:31:42,300 --> 00:31:44,540
The rapping ring is
the only special case.

741
00:31:44,540 --> 00:31:47,439
Yeah, yeah, thank you.
Yeah. Other questions

742
00:31:47,439 --> 00:31:49,059
people have? Lots
of great questions.

743
00:31:49,059 --> 00:31:50,799
So I'm glad people are
really digging in.

744
00:31:50,799 --> 00:31:52,419
We really have to have
a firm foundation here

745
00:31:52,419 --> 00:31:53,939
because we don't even
have a replication yet.

746
00:31:53,939 --> 00:31:55,940
Everything gets more
complicated with replication.

747
00:31:55,940 --> 00:31:59,319
So I really want people to
be solid on this. All right.

748
00:31:59,319 --> 00:32:02,189
Now, We've talked about
how we draw this.

749
00:32:02,189 --> 00:32:04,190
This is based on what's
on the Token map.

750
00:32:04,190 --> 00:32:05,869
Down here, I kind
of just imagine

751
00:32:05,869 --> 00:32:07,149
that I have rows
with these Tokens.

752
00:32:07,149 --> 00:32:08,309
But where do those come from?

753
00:32:08,309 --> 00:32:10,889
Well, they came from
The token function,

754
00:32:10,889 --> 00:32:12,869
which is really just
a hash function.

755
00:32:12,869 --> 00:32:15,169
And so I'm imagining,

756
00:32:15,169 --> 00:32:16,929
remember this is
Cassandra, right?

757
00:32:16,929 --> 00:32:18,710
So my rows have a primary key.

758
00:32:18,710 --> 00:32:21,309
And let's say the
primary key is A B.

759
00:32:21,309 --> 00:32:23,549
And the primary key consists of

760
00:32:23,549 --> 00:32:26,889
one partition column followed
by one fluster tolumn.

761
00:32:26,889 --> 00:32:28,889
And so I can imagine
taking the hash of,

762
00:32:28,889 --> 00:32:30,930
like, A or B or of both.

763
00:32:30,930 --> 00:32:32,730
And so I want to
figure out, given

764
00:32:32,730 --> 00:32:34,430
what we know about Cassandra,

765
00:32:34,430 --> 00:32:41,209
how should I choose a
token for for this row.

766
00:32:41,209 --> 00:32:46,270
Any thoughts? Yeah, right here.

767
00:32:47,470 --> 00:32:50,370
Yeah, you said it has
just the partition key,

768
00:32:50,370 --> 00:32:51,839
which is correct, right?

769
00:32:51,839 --> 00:32:55,210
These are actually irrelevant
pieces of information.

770
00:32:55,210 --> 00:32:57,229
So remember, when
we learned about

771
00:32:57,229 --> 00:32:58,749
Cassandra and how we're like

772
00:32:58,749 --> 00:33:00,389
creating these schemas
and all of that.

773
00:33:00,389 --> 00:33:03,009
What we said is that we
want all the rows with

774
00:33:03,009 --> 00:33:04,249
the same partition key to

775
00:33:04,249 --> 00:33:05,949
end up on the same same machine.

776
00:33:05,949 --> 00:33:08,330
And so that's going to boil down

777
00:33:08,330 --> 00:33:11,269
to walking the ring, right?

778
00:33:11,269 --> 00:33:13,109
If I was hashing over
this whole thing,

779
00:33:13,109 --> 00:33:16,110
then I might walk starting
from different places.

780
00:33:16,110 --> 00:33:17,090
And I could have two rows

781
00:33:17,090 --> 00:33:18,190
that have the same
partition key,

782
00:33:18,190 --> 00:33:19,689
but they could end up
in different places.

783
00:33:19,689 --> 00:33:23,410
So we will only hash
on the partition key.

784
00:33:23,410 --> 00:33:25,789
Excellent. All right.

785
00:33:25,789 --> 00:33:28,049
So, this next one is about

786
00:33:28,049 --> 00:33:31,180
the incremental the elasticity,

787
00:33:31,180 --> 00:33:32,980
the kind of incremental
scalability.

788
00:33:32,980 --> 00:33:34,619
And so I'm imagining

789
00:33:34,619 --> 00:33:37,599
that node four is
joining the cluster,

790
00:33:37,599 --> 00:33:39,559
and it has two V nodes,

791
00:33:39,559 --> 00:33:41,019
and those v nodes are negative

792
00:33:41,019 --> 00:33:42,219
three and negative one, right?

793
00:33:42,219 --> 00:33:47,419
So it's joining here. And
so this is negative three.

794
00:33:47,419 --> 00:33:50,439
And I'm sorry, what
am I drawing here.

795
00:33:50,439 --> 00:33:53,140
This is n four.

796
00:33:53,420 --> 00:33:56,419
And this is n four
here as well, right?

797
00:33:56,419 --> 00:33:58,139
It's joining with
those two. And so

798
00:33:58,139 --> 00:34:00,240
maybe people can use two hands.

799
00:34:00,240 --> 00:34:02,819
What two existing nodes
are going to have

800
00:34:02,819 --> 00:34:06,139
to send some data to
this new machine?

801
00:34:11,230 --> 00:34:13,810
All right, I'm seeing some ones

802
00:34:13,810 --> 00:34:15,589
and twos, which is
correct, right?

803
00:34:15,589 --> 00:34:17,409
These nodes one and

804
00:34:17,409 --> 00:34:19,389
two here used to own
this whole range.

805
00:34:19,389 --> 00:34:21,569
And so node four is taking away

806
00:34:21,569 --> 00:34:24,069
some of the range from
these two V nodes, right?

807
00:34:24,069 --> 00:34:25,269
So these two are have to send

808
00:34:25,269 --> 00:34:27,209
them some of their data
and hand that off.

809
00:34:27,209 --> 00:34:27,849
Alright.

810
00:34:27,849 --> 00:34:28,609
C, do people have

811
00:34:28,609 --> 00:34:30,390
any any questions about
sander partition?

812
00:34:30,390 --> 00:34:31,589
Right?

813
00:34:35,470 --> 00:34:45,739
One. Partition mention

814
00:34:45,739 --> 00:34:49,779
row. Yeah.

815
00:34:53,140 --> 00:34:58,540
Yeah, each of each
of these nodes

816
00:34:58,540 --> 00:35:01,339
here might have rows

817
00:35:01,339 --> 00:35:03,639
across a bunch of different
partitions, right?

818
00:35:03,639 --> 00:35:07,339
And each of those
partitions belongs to

819
00:35:07,339 --> 00:35:11,079
a unique point on the
token ring, right?

820
00:35:11,079 --> 00:35:13,719
So like node one

821
00:35:13,719 --> 00:35:15,519
is going to look at all the rows

822
00:35:15,519 --> 00:35:16,680
across all these
different partitions,

823
00:35:16,680 --> 00:35:18,440
and it is to say,
well, these partitions

824
00:35:18,440 --> 00:35:21,380
of rows now belong on
a different machine.

825
00:35:27,000 --> 00:35:29,780
Y, we will never
split a partition,

826
00:35:29,780 --> 00:35:31,860
so we can never hand off
part of a partition.

827
00:35:31,860 --> 00:35:34,679
We'll either hand off the
whole partition or none of it.

828
00:35:34,679 --> 00:35:43,099
That makes sense? Yes Yes. Yes.

829
00:35:43,099 --> 00:35:44,119
That's a great great point

830
00:35:44,119 --> 00:35:45,059
that I should have made, right?

831
00:35:45,059 --> 00:35:46,599
So Nodes one and Node two,

832
00:35:46,599 --> 00:35:49,539
are going to be sending
whole partitions to.

833
00:35:49,539 --> 00:35:55,360
Yeah, follow up here. Beat.

834
00:35:55,360 --> 00:35:57,939
Node four will only be
taking partitions that

835
00:35:57,939 --> 00:36:00,779
map to negative one
and negative three.

836
00:36:00,779 --> 00:36:08,469
Yeah. Negative three is why.

837
00:36:08,469 --> 00:36:12,789
That's why Yeah,

838
00:36:12,789 --> 00:36:16,609
because Node one used
to own negative three,

839
00:36:16,609 --> 00:36:19,389
and now node four
owns negative three.

840
00:36:19,389 --> 00:36:21,149
Yeah. Yeah, thanks.

841
00:36:21,149 --> 00:36:23,069
I appreciate all the
great questions today.

842
00:36:23,069 --> 00:36:26,789
Yeah, any other questions
people have? Oh right.

843
00:36:26,789 --> 00:36:28,189
And again, even though we

844
00:36:28,189 --> 00:36:29,790
have all these V
nodes and stuff,

845
00:36:29,790 --> 00:36:31,969
everything we've done so
far is replication one.

846
00:36:31,969 --> 00:36:33,989
When I walk the ring, I

847
00:36:33,989 --> 00:36:36,750
find this is the one
worker that owns the data.

848
00:36:36,750 --> 00:36:38,109
This idea of walking the ring

849
00:36:38,109 --> 00:36:39,189
is something that we're
going to keep doing,

850
00:36:39,189 --> 00:36:40,350
and it's going to
get more complicated

851
00:36:40,350 --> 00:36:41,649
because we're going
to find ways to

852
00:36:41,649 --> 00:36:42,989
walk the ring that will give us

853
00:36:42,989 --> 00:36:45,689
multiple replicas.
Question right here.

854
00:36:55,570 --> 00:36:57,849
Yeah, let me think about that.

855
00:36:57,849 --> 00:37:00,029
So you said that I
have two rows that

856
00:37:00,029 --> 00:37:02,690
have different primary keys.

857
00:37:02,690 --> 00:37:05,370
Okay. So if they have
different primary keys,

858
00:37:05,370 --> 00:37:07,429
they might have the
same partition key,

859
00:37:07,429 --> 00:37:08,049
or they might not.

860
00:37:08,049 --> 00:37:09,789
So, for the example, what
are you interested in?

861
00:37:09,789 --> 00:37:11,189
Are you saying, like,
you have they're

862
00:37:11,189 --> 00:37:12,269
different primary keys,

863
00:37:12,269 --> 00:37:14,169
but the same partition key?

864
00:37:14,169 --> 00:37:19,419
Okay. Oh, oh, yeah.

865
00:37:19,419 --> 00:37:21,439
You're saying that I might

866
00:37:21,439 --> 00:37:24,419
have completely
different partitions,

867
00:37:24,419 --> 00:37:26,740
but they happen to
have the same token.

868
00:37:26,740 --> 00:37:29,140
Yeah. Wherever those go,
they're going to be together,

869
00:37:29,140 --> 00:37:30,379
not because we want them to,

870
00:37:30,379 --> 00:37:31,800
but just because
that's how the system

871
00:37:31,800 --> 00:37:33,300
works. Will that happen?

872
00:37:33,300 --> 00:37:36,240
No often, right? Because we
have every possible N 64.

873
00:37:36,240 --> 00:37:38,019
But if it does, that's fine.

874
00:37:38,019 --> 00:37:39,319
The two partitions will just

875
00:37:39,319 --> 00:37:41,919
row with each other
wherever they go.

876
00:37:41,919 --> 00:37:43,934
Yeah, thanks for
asking. Yeah, right.

877
00:37:43,934 --> 00:37:49,549
This is the primary So

878
00:37:49,549 --> 00:37:52,509
the primary key is uniquely
identifying a row, right?

879
00:37:52,509 --> 00:37:54,049
And so the A,

880
00:37:54,049 --> 00:37:55,389
we're going to look at that to

881
00:37:55,389 --> 00:37:56,769
figure out what machine it's on.

882
00:37:56,769 --> 00:38:00,549
And then then the B is
helping us figure out, Okay,

883
00:38:00,549 --> 00:38:02,470
well, there's a partition
on that machine,

884
00:38:02,470 --> 00:38:05,349
which row from that partition
am I trying to get?

885
00:38:05,460 --> 00:38:08,680
Yeah, lots of great questions
today. Alright, Troll.

886
00:38:08,680 --> 00:38:10,959
So I'm going to head
over here. And we're

887
00:38:10,959 --> 00:38:12,999
going to talk about
the replication.

888
00:38:12,999 --> 00:38:16,079
And so here's some
Cassandra replication.

889
00:38:16,079 --> 00:38:17,339
I have a few things
I want to do.

890
00:38:17,339 --> 00:38:19,859
We're able to keep walking
the ring like we have been.

891
00:38:19,859 --> 00:38:21,699
But we're going to
walk farther now

892
00:38:21,699 --> 00:38:24,019
because we have to find
multiple replicas.

893
00:38:24,019 --> 00:38:27,900
And one of the tricky things
about when we're walking,

894
00:38:27,900 --> 00:38:29,819
sometimes I might have

895
00:38:29,819 --> 00:38:32,319
two machines that
are near each other,

896
00:38:32,319 --> 00:38:33,639
maybe like they're
the same data center,

897
00:38:33,639 --> 00:38:34,819
maybe even the same
rack, and they

898
00:38:34,819 --> 00:38:36,260
might be likely
to fail together.

899
00:38:36,260 --> 00:38:37,839
So when we're walking the ring,

900
00:38:37,839 --> 00:38:40,600
sometimes we're going
to skip over some noes.

901
00:38:40,600 --> 00:38:41,739
That's maybe one of the skills I

902
00:38:41,739 --> 00:38:43,559
want you to walk
away with today.

903
00:38:43,559 --> 00:38:47,319
Second, After you've walked
the ring and you've said,

904
00:38:47,319 --> 00:38:48,699
Okay, this row belongs to

905
00:38:48,699 --> 00:38:50,779
these three machines
or however many.

906
00:38:50,779 --> 00:38:52,299
Well, if we're
reading or writing,

907
00:38:52,299 --> 00:38:53,859
we have to interact
with them, right?

908
00:38:53,859 --> 00:38:55,139
And if let's say I say like, Oh,

909
00:38:55,139 --> 00:38:56,260
it belongs to these
three machines,

910
00:38:56,260 --> 00:38:57,849
one of those machines is down.

911
00:38:57,849 --> 00:38:59,840
Can I still use the system?

912
00:38:59,840 --> 00:39:02,259
Maybe, depending on
how I tune it, right?

913
00:39:02,259 --> 00:39:03,680
I have this notion of quorums,

914
00:39:03,680 --> 00:39:05,879
where even if the three replicas

915
00:39:05,879 --> 00:39:07,960
I identify it for a row are
not in perfect condition.

916
00:39:07,960 --> 00:39:09,880
Maybe I can still
use the system.

917
00:39:09,880 --> 00:39:11,880
And then finally, we introduce

918
00:39:11,880 --> 00:39:14,259
this idea of eventual
consistency,

919
00:39:14,259 --> 00:39:17,599
where maybe if I have different
replicas of the same row,

920
00:39:17,599 --> 00:39:18,959
and maybe they disagree
with each other.

921
00:39:18,959 --> 00:39:20,140
They're ty of
different versions.

922
00:39:20,140 --> 00:39:22,979
And it's almost like get
history where I can say,

923
00:39:22,979 --> 00:39:24,979
Well, I have different
versions of the code,

924
00:39:24,979 --> 00:39:27,200
but neither one is really
strictly the latest.

925
00:39:27,200 --> 00:39:31,060
How can I resolve conflicts
in that situation?

926
00:39:31,060 --> 00:39:33,680
Okay. Let's talk
about replication.

927
00:39:34,530 --> 00:39:38,270
Remember that when we create
a keyspace in Cassandra,

928
00:39:38,270 --> 00:39:41,229
we say what the
replication factor is,

929
00:39:41,229 --> 00:39:43,770
and then we can create
tables inside of a keyspace.

930
00:39:43,770 --> 00:39:46,210
So I can have a bunch of
tables inside the keyspace,

931
00:39:46,210 --> 00:39:48,349
and each of those tables
might have a bunch of rows,

932
00:39:48,349 --> 00:39:49,869
and all those rows
are going to have

933
00:39:49,869 --> 00:39:51,410
that same replication factor.

934
00:39:51,410 --> 00:39:53,549
And I may usually
abbreviate that

935
00:39:53,549 --> 00:39:56,130
as RF RF is replication factor.

936
00:39:56,130 --> 00:39:57,829
And one of the reasons
that we want to

937
00:39:57,829 --> 00:40:00,329
replicate is for durability,

938
00:40:00,329 --> 00:40:02,410
if I have a higher
replication factor,

939
00:40:02,410 --> 00:40:04,410
I have more copies of
my data in the system.

940
00:40:04,410 --> 00:40:07,969
If some machines die, I'm
less likely to lose my data.

941
00:40:07,969 --> 00:40:10,109
So I want one purpose of

942
00:40:10,109 --> 00:40:12,719
replication is to have
greater durability.

943
00:40:12,719 --> 00:40:15,869
All right. So let's
imagine this cluster here.

944
00:40:15,869 --> 00:40:19,330
I have four nodes
and eight V nodes.

945
00:40:19,330 --> 00:40:22,190
And I have these two key spaces.

946
00:40:22,190 --> 00:40:24,289
So one of the things I might
ask you is that, Okay,

947
00:40:24,289 --> 00:40:27,970
I have a row with such
and such a token,

948
00:40:27,970 --> 00:40:29,349
and it's in this key space.

949
00:40:29,349 --> 00:40:31,629
Well, what nodes are
responsible for it.

950
00:40:31,629 --> 00:40:33,409
And so the difference now

951
00:40:33,409 --> 00:40:35,349
is that we're going to walk
to the right like before.

952
00:40:35,349 --> 00:40:36,589
But the difference is
that we're going to

953
00:40:36,589 --> 00:40:38,069
walk until we get two replicas,

954
00:40:38,069 --> 00:40:42,570
because this is a row on table
x and x has two replicas.

955
00:40:42,570 --> 00:40:44,269
So I'll keep walking,
and I'll say, Okay,

956
00:40:44,269 --> 00:40:49,670
nodes four and two are what
we need in this situation.

957
00:40:50,710 --> 00:40:52,470
Right.

958
00:40:52,470 --> 00:40:54,050
This one's kind of tricky,

959
00:40:54,050 --> 00:40:56,609
so this is a row and Table Y.

960
00:40:56,609 --> 00:41:01,369
So any volunteers?
When I walk the ring,

961
00:41:01,369 --> 00:41:03,329
what nodes am I
going to give it to?

962
00:41:03,329 --> 00:41:04,889
Yeah, go ahead.

963
00:41:04,889 --> 00:41:06,989
Three, one and two. So I'm

964
00:41:06,989 --> 00:41:08,709
may to wrap around just
like I did before,

965
00:41:08,709 --> 00:41:11,709
and I'm going to walk until
I find three of them.

966
00:41:11,709 --> 00:41:13,229
Okay, so far so good.

967
00:41:13,229 --> 00:41:15,589
We have a strategy now
for finding these.

968
00:41:15,589 --> 00:41:18,629
All right. Now I have
another one in table,

969
00:41:18,629 --> 00:41:20,210
and this one's very tricky,

970
00:41:20,210 --> 00:41:22,609
rather than answering for
an answer, I want to see,

971
00:41:22,609 --> 00:41:26,349
does anybody see
the problem here?

972
00:41:26,990 --> 00:41:30,509
What is the problem?
Yeah, over here.

973
00:41:31,110 --> 00:41:33,409
We hit node four twice.

974
00:41:33,409 --> 00:41:35,249
And so if I was
naive about this,

975
00:41:35,249 --> 00:41:38,149
I would put two copies
of my data on node four.

976
00:41:38,149 --> 00:41:40,730
Does that actually help
if there's a problem?

977
00:41:40,730 --> 00:41:42,689
There are some
problems. Maybe node

978
00:41:42,689 --> 00:41:43,889
four has a bunch of hard drives,

979
00:41:43,889 --> 00:41:46,310
and maybe one of the hard
drives fails and one doesn't.

980
00:41:46,310 --> 00:41:47,810
But there's lots of problems

981
00:41:47,810 --> 00:41:49,189
that that wouldn't
help me with, right?

982
00:41:49,189 --> 00:41:51,410
If Node four, if the
whole computer dies

983
00:41:51,410 --> 00:41:53,730
or there's like a power
outage or a reboots.

984
00:41:53,730 --> 00:41:54,989
Lots of cases where I wouldn't

985
00:41:54,989 --> 00:41:56,249
want to have multiple copies of

986
00:41:56,249 --> 00:41:58,929
the same data on node four.

987
00:41:58,929 --> 00:42:01,629
And so well first, we're
going to call that,

988
00:42:01,629 --> 00:42:03,310
is we're going to call
that a failure domain,

989
00:42:03,310 --> 00:42:05,510
or sometimes we call
it a fault domain?

990
00:42:05,510 --> 00:42:08,709
The failure fault domain
really consists of

991
00:42:08,709 --> 00:42:12,499
different units that
fail together, right?

992
00:42:12,499 --> 00:42:15,720
L2v nodes are in the
same failure domain.

993
00:42:15,720 --> 00:42:16,939
They're likely to
fail together because

994
00:42:16,939 --> 00:42:18,400
they're on the same
physical machine.

995
00:42:18,400 --> 00:42:19,719
And so as we walk the ring,

996
00:42:19,719 --> 00:42:21,159
sometimes we skip, right?

997
00:42:21,159 --> 00:42:23,879
If we find a V node that's in

998
00:42:23,879 --> 00:42:26,959
the same failure domain as
the ones we already found,

999
00:42:26,959 --> 00:42:28,179
we can just skip over, right?

1000
00:42:28,179 --> 00:42:29,499
So what what'll actually
do in this case

1001
00:42:29,499 --> 00:42:31,219
is we'll get four,

1002
00:42:31,219 --> 00:42:33,319
three, and two, right?

1003
00:42:33,319 --> 00:42:35,420
So walking the ring is
getting more complicated.

1004
00:42:35,420 --> 00:42:38,385
Sometimes you wrap around,
sometimes you skip.

1005
00:42:38,385 --> 00:42:40,470
Okay, so when do
you actually skip?

1006
00:42:40,470 --> 00:42:42,109
Well, it depends. What does

1007
00:42:42,109 --> 00:42:43,429
a failed domain actually mean?

1008
00:42:43,429 --> 00:42:44,990
I mean, does that mean multiple

1009
00:42:44,990 --> 00:42:46,550
V nodes in the same server?

1010
00:42:46,550 --> 00:42:49,129
Does that mean multiple
servers in the same rack?

1011
00:42:49,129 --> 00:42:50,570
Does that mean multiple racks

1012
00:42:50,570 --> 00:42:52,089
in the same same data center?

1013
00:42:52,089 --> 00:42:52,269
Right?

1014
00:42:52,269 --> 00:42:53,109
It's kind of a lot of

1015
00:42:53,109 --> 00:42:54,309
different ways you
could think about.

1016
00:42:54,309 --> 00:42:56,489
All these things might
have reasons that they

1017
00:42:56,489 --> 00:42:59,169
all go down together
at the same same time.

1018
00:42:59,169 --> 00:43:01,270
And so this policy

1019
00:43:01,270 --> 00:43:03,070
about when to skip is
actually pluggable.

1020
00:43:03,070 --> 00:43:04,890
You could write like
a little java class

1021
00:43:04,890 --> 00:43:06,369
and plug it in and would decide,

1022
00:43:06,369 --> 00:43:08,029
when should we skip or or not?

1023
00:43:08,029 --> 00:43:10,740
And so There's
different strategies.

1024
00:43:10,740 --> 00:43:12,079
The simple strategies
is what one that

1025
00:43:12,079 --> 00:43:13,900
we'll actually use
for our projects.

1026
00:43:13,900 --> 00:43:16,239
And what that one
does is it skips over

1027
00:43:16,239 --> 00:43:19,320
V nodes if they're on the
same physical machine.

1028
00:43:19,320 --> 00:43:21,240
Otherwise, if it's two
different machines,

1029
00:43:21,240 --> 00:43:22,780
it says, good enough.

1030
00:43:22,780 --> 00:43:25,939
We'll assume that their
failure is independent, right?

1031
00:43:25,939 --> 00:43:27,659
A more complicated strategy is

1032
00:43:27,659 --> 00:43:29,700
called the network
topology strategy,

1033
00:43:29,700 --> 00:43:31,859
and that one thinks about,

1034
00:43:31,859 --> 00:43:34,140
like, well, where are
the data centers?

1035
00:43:34,140 --> 00:43:36,779
What are the racks on them?
And it might skip over

1036
00:43:36,779 --> 00:43:39,819
some nodes just because
they're on the same rack.

1037
00:43:39,819 --> 00:43:42,239
Yeah, right here. What is

1038
00:43:42,239 --> 00:43:45,660
it What is the most
common strategy?

1039
00:43:45,660 --> 00:43:46,959
I don't know. I mean, I guess

1040
00:43:46,959 --> 00:43:48,559
I don't know if
people survey it.

1041
00:43:48,559 --> 00:43:51,039
And I'm not really sure
because Cassandra, right?

1042
00:43:51,039 --> 00:43:52,159
It's like one of the most of

1043
00:43:52,159 --> 00:43:53,399
the systems like
we've learned about.

1044
00:43:53,399 --> 00:43:54,859
It's like, while it's
in one data center.

1045
00:43:54,859 --> 00:43:56,159
It doesn't work efficiently.

1046
00:43:56,159 --> 00:43:58,340
But Cassandra is
built to work across,

1047
00:43:58,340 --> 00:43:59,940
you know, geographically
distributed

1048
00:43:59,940 --> 00:44:01,019
data centers around the world.

1049
00:44:01,019 --> 00:44:01,679
And so I don't know

1050
00:44:01,679 --> 00:44:04,119
how many companies can
afford that, right?

1051
00:44:04,119 --> 00:44:05,340
How many of them
actually have different

1052
00:44:05,340 --> 00:44:06,499
data centers around the world.

1053
00:44:06,499 --> 00:44:09,200
Like, I'm sure there's
a few big companies

1054
00:44:09,200 --> 00:44:11,179
that definitely do, you know,

1055
00:44:11,179 --> 00:44:13,019
If you have everything
in the same data center,

1056
00:44:13,019 --> 00:44:13,719
maybe you just like,

1057
00:44:13,719 --> 00:44:15,439
Well, hope there's not
a tornado and say,

1058
00:44:15,439 --> 00:44:16,799
different machines
is good enough.

1059
00:44:16,799 --> 00:44:18,979
So, I'm not really sure
what's more common.

1060
00:44:18,979 --> 00:44:21,279
Yeah, it's interesting, though.

1061
00:44:21,279 --> 00:44:23,999
Um Cool.

1062
00:44:23,999 --> 00:44:25,539
Let's head over here
and do at least a

1063
00:44:25,539 --> 00:44:28,220
couple more worksheet problems.

1064
00:44:28,220 --> 00:44:34,199
So I will head to my doc
cam and put this down here.

1065
00:44:34,199 --> 00:44:35,679
And this is exactly the same

1066
00:44:35,679 --> 00:44:37,279
token ring as on
the previous page.

1067
00:44:37,279 --> 00:44:40,360
I just wanted to have it
here for easy reference.

1068
00:44:40,360 --> 00:44:43,639
And so, assuming two
times replication,

1069
00:44:43,639 --> 00:44:45,979
what are the positions
of the V nodes for

1070
00:44:45,979 --> 00:44:50,259
a row with Token negative one.

1071
00:44:50,380 --> 00:44:52,959
All right, so maybe people

1072
00:44:52,959 --> 00:44:55,679
maybe I can did a
volunteer for this one.

1073
00:44:55,679 --> 00:45:03,229
What are the right here.

1074
00:45:03,790 --> 00:45:06,609
It would be two and
three. That's true.

1075
00:45:06,609 --> 00:45:10,509
So I may say node
two and node three.

1076
00:45:10,509 --> 00:45:12,230
And so those are the
physical machines.

1077
00:45:12,230 --> 00:45:13,409
Then in this case,
I'm asking, what

1078
00:45:13,409 --> 00:45:14,529
are the positions
of the V nodes?

1079
00:45:14,529 --> 00:45:16,669
I'm kind of interested
like more specifically,

1080
00:45:16,669 --> 00:45:18,950
like which V notes of
the machine in general.

1081
00:45:18,950 --> 00:45:20,709
So in this case, I
would also want to

1082
00:45:20,709 --> 00:45:23,949
want you to say zero and two.

1083
00:45:23,949 --> 00:45:27,949
Alright, because those
are the positions. Okay.

1084
00:45:27,949 --> 00:45:29,469
Won't we just like

1085
00:45:29,469 --> 00:45:30,909
everybody spend like
a moment doing this.

1086
00:45:30,909 --> 00:45:32,410
I'm assume three
times application,

1087
00:45:32,410 --> 00:45:33,729
and I want to know what
are the positions of

1088
00:45:33,729 --> 00:45:36,329
the V nodes that are responsible

1089
00:45:36,329 --> 00:45:41,309
for a row with Token
one, right here.

1090
00:45:41,309 --> 00:45:42,909
So how about if
everybody just like

1091
00:45:42,909 --> 00:45:44,929
goes and writes it down
on a piece of paper?

1092
00:45:44,929 --> 00:45:47,589
Just take a moment
to think about it.

1093
00:46:17,500 --> 00:46:20,419
All right, let's do
it together, right?

1094
00:46:20,419 --> 00:46:24,379
So we start a token one, and
we just walk to the right.

1095
00:46:24,379 --> 00:46:31,080
I hit. I'm hitting at position.

1096
00:46:31,080 --> 00:46:33,959
A two. All right.

1097
00:46:33,959 --> 00:46:40,919
I keep walking. I hit node one
at position position four.

1098
00:46:40,919 --> 00:46:42,999
Alright, I hit node three again.

1099
00:46:42,999 --> 00:46:44,559
Well, that's in the
same failure domain,

1100
00:46:44,559 --> 00:46:46,439
so I just skip over
it. Keep going.

1101
00:46:46,439 --> 00:46:49,379
Now I also have to
wrap, so I wrap around.

1102
00:46:49,379 --> 00:46:51,939
And then finally,
I find node two.

1103
00:46:51,939 --> 00:46:56,599
Node two at position
negative six, right?

1104
00:46:56,599 --> 00:46:57,859
So it's just like
a scalar one you

1105
00:46:57,859 --> 00:46:59,019
have like walking
the ring, right?

1106
00:46:59,019 --> 00:47:01,079
Like you start on the
thing and you walk

1107
00:47:01,079 --> 00:47:03,439
right until you get as
many replicas as you need.

1108
00:47:03,439 --> 00:47:05,539
You skip if it's in the
same failure domain,

1109
00:47:05,539 --> 00:47:06,859
you wrap if you get to the end.

1110
00:47:06,859 --> 00:47:08,059
And if you do that, then you can

1111
00:47:08,059 --> 00:47:09,859
figure out for any
given piece of data,

1112
00:47:09,859 --> 00:47:11,219
what machines will it be on?

1113
00:47:11,219 --> 00:47:18,119
Yeah, question right here. Two.

1114
00:47:18,640 --> 00:47:22,839
So these labels up here like
N one and two and three,

1115
00:47:22,839 --> 00:47:24,079
there's three machines,
and those are

1116
00:47:24,079 --> 00:47:25,520
the names of my three machines.

1117
00:47:25,520 --> 00:47:27,399
And then the way I
know that there's

1118
00:47:27,399 --> 00:47:30,819
two V nodes is I see that n
one shows up up twice, right?

1119
00:47:30,819 --> 00:47:34,500
So I have the token four V node

1120
00:47:34,500 --> 00:47:36,440
and the token
negative two V node.

1121
00:47:36,440 --> 00:47:37,819
And I see hand up.

1122
00:47:37,819 --> 00:47:43,039
The right here. How good

1123
00:47:43,039 --> 00:47:45,039
is the hash function even
its distributing data?

1124
00:47:45,039 --> 00:47:46,799
Probably pretty good, right?

1125
00:47:46,799 --> 00:47:48,159
If it wasn't, I'm sure

1126
00:47:48,159 --> 00:47:49,559
somebody would try to
find a better one.

1127
00:47:49,559 --> 00:47:52,680
I mean, more so what we're
worried about is if you choose

1128
00:47:52,680 --> 00:47:54,059
a primary key in a way

1129
00:47:54,059 --> 00:47:56,519
that you have one
partition that's like,

1130
00:47:56,519 --> 00:47:59,019
very large and other ones
that are very small, right?

1131
00:47:59,019 --> 00:48:02,239
Because then there's nothing
you can do to split it up.

1132
00:48:02,239 --> 00:48:04,359
So that's usually more of a
concern rather than having,

1133
00:48:04,359 --> 00:48:05,620
like a bad hash function.

1134
00:48:05,620 --> 00:48:08,259
Yeah, yeah, good
question. All right.

1135
00:48:08,259 --> 00:48:10,339
So we have time for
maybe a couple.

1136
00:48:10,339 --> 00:48:12,280
We'll actually come back
here to the slides.

1137
00:48:12,280 --> 00:48:14,854
Any more questions about
the worksheet for now?

1138
00:48:14,854 --> 00:48:17,010
All right, so we keep building

1139
00:48:17,010 --> 00:48:19,449
up these skills for
reasoning about this.

1140
00:48:19,449 --> 00:48:21,209
And there's another piece here,

1141
00:48:21,209 --> 00:48:22,730
which is about quorums.

1142
00:48:22,730 --> 00:48:25,109
Has anybody ever been on,

1143
00:48:25,109 --> 00:48:27,250
like a committee where
you vote on stuff,

1144
00:48:27,250 --> 00:48:30,770
but you have to have a quorum
to make any decisions.

1145
00:48:30,770 --> 00:48:33,289
Hs anybody ever been on
a committee like that?

1146
00:48:33,289 --> 00:48:36,529
Most Somebody must have been.

1147
00:48:36,529 --> 00:48:38,329
Anyway, oftentimes,

1148
00:48:38,329 --> 00:48:40,829
if you have a committee and
you're voting on stuff,

1149
00:48:40,829 --> 00:48:42,329
if one or two people
messages fine,

1150
00:48:42,329 --> 00:48:43,630
you can still make
some decisions.

1151
00:48:43,630 --> 00:48:45,610
But if a majority are drawn,

1152
00:48:45,610 --> 00:48:47,309
then maybe you don't
really feel empowered to

1153
00:48:47,309 --> 00:48:49,170
make decisions with so
many people in absence,

1154
00:48:49,170 --> 00:48:50,030
and they may just cancel

1155
00:48:50,030 --> 00:48:51,470
the meeting because
you can't do anything.

1156
00:48:51,470 --> 00:48:53,789
And that same thing is going
to happen here, right?

1157
00:48:53,789 --> 00:48:55,609
Like, we walk the
ring. We like, Okay,

1158
00:48:55,609 --> 00:48:58,690
these three or four
or however many nodes

1159
00:48:58,690 --> 00:49:01,830
are going to be involved in
reading and writing the data.

1160
00:49:01,830 --> 00:49:05,389
But if some of those
nodes are currently down,

1161
00:49:05,389 --> 00:49:07,669
then maybe there's not
much we can do, right?

1162
00:49:07,669 --> 00:49:09,609
So we are going to be talking
about quorums and how

1163
00:49:09,609 --> 00:49:12,685
we interact with them
for reads and writes.

1164
00:49:12,685 --> 00:49:15,280
Now, when we're reading and
writing with some quorum,

1165
00:49:15,280 --> 00:49:16,739
we have to define a
couple of things,

1166
00:49:16,739 --> 00:49:19,539
and one of them is
acknowledgment, right?

1167
00:49:19,539 --> 00:49:22,900
How many of you are
WhatsApp users?

1168
00:49:22,900 --> 00:49:25,419
So a few of you, I love
WhatsApp because they took

1169
00:49:25,419 --> 00:49:27,879
a deeply technical detail
that's normally heading

1170
00:49:27,879 --> 00:49:29,059
from user and they
just like make

1171
00:49:29,059 --> 00:49:30,539
it visible to everybody, right?

1172
00:49:30,539 --> 00:49:31,859
So they have

1173
00:49:31,859 --> 00:49:34,239
a very sophisticated view
of acknowledgments, right?

1174
00:49:34,239 --> 00:49:36,140
So if I'm trying to send
somebody a message,

1175
00:49:36,140 --> 00:49:37,659
I will see one of three things.

1176
00:49:37,659 --> 00:49:40,440
A single check
means that the data

1177
00:49:40,440 --> 00:49:42,800
got off my phone onto
their data centers,

1178
00:49:42,800 --> 00:49:44,339
double check means
that it got onto

1179
00:49:44,339 --> 00:49:46,300
at least one device
of the receiving,

1180
00:49:46,300 --> 00:49:47,999
and blue double check

1181
00:49:47,999 --> 00:49:49,699
means that they
actually saw it, right?

1182
00:49:49,699 --> 00:49:52,079
And so there's different
levels of acknowledgments.

1183
00:49:52,079 --> 00:49:54,079
And each of those mean that

1184
00:49:54,079 --> 00:49:55,560
my data is somehow

1185
00:49:55,560 --> 00:49:57,359
committed, is the word
I'm going to use.

1186
00:49:57,359 --> 00:49:58,839
Committed me just means that

1187
00:49:58,839 --> 00:50:01,080
my data is safe if
something bad happens.

1188
00:50:01,080 --> 00:50:03,774
So, for example, if I
have one great check,

1189
00:50:03,774 --> 00:50:05,850
And then my phone
runs out of battery

1190
00:50:05,850 --> 00:50:07,889
and dies. I'm not
worried about it.

1191
00:50:07,889 --> 00:50:09,929
I know that eventually
it can make it there.

1192
00:50:09,929 --> 00:50:11,209
So we come back next time,

1193
00:50:11,209 --> 00:50:12,709
we'll talk about different
ideas of how we have

1194
00:50:12,709 --> 00:50:15,089
acknowledgments and what they
mean in Cassandra, right?

1195
00:50:15,089 --> 00:50:16,529
Because if I have
my data on two of

1196
00:50:16,529 --> 00:50:18,169
my three nodes or
three of my three,

1197
00:50:18,169 --> 00:50:20,029
there are different
levels of how good

1198
00:50:20,029 --> 00:50:22,049
I feel about my data
and how safe it is.

1199
00:50:22,049 --> 00:50:23,889
Alright, I hope you
all have a great day,

1200
00:50:23,889 --> 00:50:25,029
and I'll be around if people

1201
00:50:25,029 --> 00:50:27,430
want to come up and
have any questions.
