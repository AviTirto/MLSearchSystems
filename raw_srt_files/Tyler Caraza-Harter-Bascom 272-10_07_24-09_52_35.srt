1
00:00:00,000 --> 00:00:01,960
I hope you all had
a great weekend.

2
00:00:01,960 --> 00:00:04,120
And so we're wrapping
up the content that

3
00:00:04,120 --> 00:00:06,340
will happen before the mid term.

4
00:00:06,340 --> 00:00:07,540
We have a mid term on Wednesday.

5
00:00:07,540 --> 00:00:09,739
Hopefully, that's on
everybody's radar.

6
00:00:09,739 --> 00:00:11,060
I've sent some announcements.

7
00:00:11,060 --> 00:00:12,040
I've been talking
about it for a while,

8
00:00:12,040 --> 00:00:14,119
but does anybody have any
last logistical questions

9
00:00:14,119 --> 00:00:16,640
about the mid term on Wednesday?

10
00:00:19,560 --> 00:00:24,550
What's that? Yeah,
everybody gets

11
00:00:24,550 --> 00:00:27,510
18.5 by 11 edge sheet

12
00:00:27,510 --> 00:00:29,569
of paper that you can
handwrite it on it.

13
00:00:29,569 --> 00:00:31,109
You could print
spping out. Yeah, you

14
00:00:31,109 --> 00:00:32,810
could put whatever
you want on the Pap,

15
00:00:32,810 --> 00:00:34,569
but I saw other
questions over here.

16
00:00:34,569 --> 00:00:36,549
Same thing. Yeah.
So start working on

17
00:00:36,549 --> 00:00:38,470
your note sheet if
you have it already,

18
00:00:38,470 --> 00:00:40,689
A. That's pretty helpful.

19
00:00:40,850 --> 00:00:44,849
Cool. So one other quick
update is that I had had

20
00:00:44,849 --> 00:00:46,569
a quiz on Huda as well it just

21
00:00:46,569 --> 00:00:48,630
doesn't make sense to have a
term a quiz on the same day.

22
00:00:48,630 --> 00:00:51,790
So I just pulled that
off shortly ago.

23
00:00:51,790 --> 00:00:55,389
Cool. So we've been
learning about storage,

24
00:00:55,389 --> 00:00:59,949
and we've seen how we can
store data and files directly.

25
00:00:59,949 --> 00:01:02,130
We might want to put
it at a a format

26
00:01:02,130 --> 00:01:04,789
like Park instead of CSP
depending on what we're doing.

27
00:01:04,789 --> 00:01:06,770
But we aren't always
directly using files.

28
00:01:06,770 --> 00:01:08,770
Sometimes we're putting
our data at a database,

29
00:01:08,770 --> 00:01:11,849
which in turn stores
its data in the files.

30
00:01:11,849 --> 00:01:13,669
There's lots of different
inds of databases,

31
00:01:13,669 --> 00:01:15,230
so we want to talk about
how different ones

32
00:01:15,230 --> 00:01:16,770
might be optimized for
different use cases,

33
00:01:16,770 --> 00:01:19,010
how we might move data
between databases.

34
00:01:19,010 --> 00:01:22,229
And then in the upcoming
lectures after the mid term,

35
00:01:22,229 --> 00:01:24,069
is one where it really
gets interested.

36
00:01:24,069 --> 00:01:27,310
We look at a lot of different
distributed systems

37
00:01:27,310 --> 00:01:29,370
that have some very
clever approaches

38
00:01:29,370 --> 00:01:30,730
to dealing with large data.

39
00:01:30,730 --> 00:01:32,110
And to appreciate that,

40
00:01:32,110 --> 00:01:34,069
I want to look at kind
of a traditional,

41
00:01:34,069 --> 00:01:35,190
normal run of

42
00:01:35,190 --> 00:01:36,829
the mill database and
that will be by squal.

43
00:01:36,829 --> 00:01:38,909
So we spent a little bit
of time looking at by SQL.

44
00:01:38,909 --> 00:01:42,209
Maybe some of you have even
used SQL databases before,

45
00:01:42,209 --> 00:01:44,049
but I want to make sure
everybody has this point of

46
00:01:44,049 --> 00:01:46,249
comparison like this is kind
of a traditional database.

47
00:01:46,249 --> 00:01:47,910
So when we see something
a little bit unusual,

48
00:01:47,910 --> 00:01:50,049
we can appreciate
that this database

49
00:01:50,049 --> 00:01:52,680
is doing something a little
bit out of the Made stream.

50
00:01:52,680 --> 00:01:54,410
Alright, os ever ahead over

51
00:01:54,410 --> 00:01:55,910
here to where we were last time.

52
00:01:55,910 --> 00:01:59,149
So last time we had ended by
doing some demos with Park.

53
00:01:59,149 --> 00:02:01,990
And now we talk about databases.

54
00:02:01,990 --> 00:02:03,810
So what do databases do?

55
00:02:03,810 --> 00:02:06,709
Well, they store a collection
of different tables.

56
00:02:06,709 --> 00:02:08,689
Instead of a park file
that has one table.

57
00:02:08,689 --> 00:02:10,349
A database might have a bunch of

58
00:02:10,349 --> 00:02:12,529
different tables that
I'm showing here.

59
00:02:12,529 --> 00:02:15,129
Itty to fight a schema
for each of these.

60
00:02:15,129 --> 00:02:16,809
Schema is just a fatsy word

61
00:02:16,809 --> 00:02:19,510
for what are my column
names of the types on them?

62
00:02:19,510 --> 00:02:20,950
So, for example, over here,

63
00:02:20,950 --> 00:02:22,249
I might say that, you know,

64
00:02:22,249 --> 00:02:24,990
amount is an rate is afloat,

65
00:02:24,990 --> 00:02:26,689
right where we have
types for all of those.

66
00:02:26,689 --> 00:02:30,609
Databases will often make heavy
use of what we call keys.

67
00:02:30,609 --> 00:02:33,089
Keys could be numbers
or something else.

68
00:02:33,089 --> 00:02:35,870
But these can help us
relate our tables together.

69
00:02:35,870 --> 00:02:39,610
So, for example, when I
look at the first load,

70
00:02:39,610 --> 00:02:41,050
this load table down here,

71
00:02:41,050 --> 00:02:43,389
I see the state ID is two,

72
00:02:43,389 --> 00:02:44,869
and I could look that up in

73
00:02:44,869 --> 00:02:46,189
the upper table up there and

74
00:02:46,189 --> 00:02:47,429
see, Oh, that's Alaska, right?

75
00:02:47,429 --> 00:02:48,990
We can do a special
operation called

76
00:02:48,990 --> 00:02:52,150
the oid to basically

77
00:02:52,150 --> 00:02:54,729
resolve those state IDs
to actual state names.

78
00:02:54,729 --> 00:02:56,189
We're go would be
talking a lot more about

79
00:02:56,189 --> 00:02:58,790
Joys and how to do
them efficiently.

80
00:02:58,790 --> 00:03:00,730
So in addition to storing

81
00:03:00,730 --> 00:03:02,569
all this data for us and
all this information,

82
00:03:02,569 --> 00:03:05,690
databases usually give
us a way to do queries.

83
00:03:05,690 --> 00:03:07,910
Queries could be just
questions about the data.

84
00:03:07,910 --> 00:03:09,649
So I could say, for example,

85
00:03:09,649 --> 00:03:14,089
what is the name of the state
with WI as an abbreviation?

86
00:03:14,089 --> 00:03:15,710
That's a query. It's a question.

87
00:03:15,710 --> 00:03:17,330
Maybe a little bit strangely,

88
00:03:17,330 --> 00:03:19,250
we also use the
word query to refer

89
00:03:19,250 --> 00:03:21,930
to changes to our data.

90
00:03:21,930 --> 00:03:23,029
So, for example, let's

91
00:03:23,029 --> 00:03:24,309
say that Puerto Rico
became a state,

92
00:03:24,309 --> 00:03:25,909
we would have to
modify this table.

93
00:03:25,909 --> 00:03:28,569
We could do a query that
would ask the database to

94
00:03:28,569 --> 00:03:31,269
insert Puerto Rico into
the state's table, right?

95
00:03:31,269 --> 00:03:33,510
So we can make these changes.

96
00:03:33,510 --> 00:03:35,719
Now, These queries I

97
00:03:35,719 --> 00:03:37,780
put here are just in
a natural language,

98
00:03:37,780 --> 00:03:41,240
but they're often in some
kind of query language,

99
00:03:41,240 --> 00:03:42,380
almost in some ways,

100
00:03:42,380 --> 00:03:44,060
similar to a
programming language.

101
00:03:44,060 --> 00:03:46,340
And by far, it's not
the only one out there,

102
00:03:46,340 --> 00:03:49,060
but by far, the most
common one is SQL.

103
00:03:49,060 --> 00:03:50,480
We pronounce that SQL.

104
00:03:50,480 --> 00:03:52,719
And in SQL, can let us ask

105
00:03:52,719 --> 00:03:54,960
questions about the data
using select statement,

106
00:03:54,960 --> 00:03:56,920
so we can select specific data

107
00:03:56,920 --> 00:03:59,015
from our tables to
answer questions.

108
00:03:59,015 --> 00:04:01,989
Or we can also have SQL
queries that modify the data,

109
00:04:01,989 --> 00:04:03,589
they might insert, update,

110
00:04:03,589 --> 00:04:05,370
delete, so on, so
on and so forth.

111
00:04:05,370 --> 00:04:07,690
So we learning a little
bit about SQL today,

112
00:04:07,690 --> 00:04:09,170
and develop a contrast.

113
00:04:09,170 --> 00:04:10,389
Where we learned
about Cassandra.

114
00:04:10,389 --> 00:04:12,570
Casandra has a slightly
different query language

115
00:04:12,570 --> 00:04:14,630
called CQL, instead of SQL.

116
00:04:14,630 --> 00:04:16,490
And so I want to
have this basline of

117
00:04:16,490 --> 00:04:20,150
comparison for where we look
at these different systems.

118
00:04:20,640 --> 00:04:22,940
Now, one of the
things that's really

119
00:04:22,940 --> 00:04:24,580
interesting about SQL is that

120
00:04:24,580 --> 00:04:26,239
it's good for both transaction

121
00:04:26,239 --> 00:04:28,079
processing and
analytics process.

122
00:04:28,079 --> 00:04:30,160
We talked a little bit
about that last time.

123
00:04:30,160 --> 00:04:32,599
When we're doing
transaction processing,

124
00:04:32,599 --> 00:04:34,039
we might be inserting some rows,

125
00:04:34,039 --> 00:04:35,760
looking up rows,
things like that.

126
00:04:35,760 --> 00:04:37,280
When we're doing analytics,

127
00:04:37,280 --> 00:04:38,659
we're trying to answer usually

128
00:04:38,659 --> 00:04:40,959
questions about all
the data in a column.

129
00:04:40,959 --> 00:04:42,240
So we would be
looking at more SQL,

130
00:04:42,240 --> 00:04:44,880
but I just have some example
SQL statements here.

131
00:04:44,880 --> 00:04:47,919
So I can select the average
interest rate from the loans.

132
00:04:47,919 --> 00:04:49,759
That would be an
analytics operation.

133
00:04:49,759 --> 00:04:51,479
I probably look at
that whole column,

134
00:04:51,479 --> 00:04:52,780
or maybe I have

135
00:04:52,780 --> 00:04:54,599
something that it's like
a database backing,

136
00:04:54,599 --> 00:04:56,020
some application that's
actually letting

137
00:04:56,020 --> 00:04:58,260
people apply for loads
and things like that.

138
00:04:58,260 --> 00:05:00,720
In that case, maybe I might
look up a specific load where

139
00:05:00,720 --> 00:05:03,440
an idea is something or I
might insert some rosen.

140
00:05:03,440 --> 00:05:04,780
That'd be transaction
processing.

141
00:05:04,780 --> 00:05:07,800
So it's kind of cool that we
have one language that works

142
00:05:07,800 --> 00:05:09,739
quite well for both
Adalytics processing

143
00:05:09,739 --> 00:05:11,139
and transaction processing.

144
00:05:11,139 --> 00:05:12,439
Now, just because the language

145
00:05:12,439 --> 00:05:13,640
works well for both does not

146
00:05:13,640 --> 00:05:16,600
mean that databases are
going to be good at both.

147
00:05:16,600 --> 00:05:17,819
Any particular database will

148
00:05:17,819 --> 00:05:19,080
probably be good at
one or the other,

149
00:05:19,080 --> 00:05:20,420
but at least the language is

150
00:05:20,420 --> 00:05:24,309
a unified language that
works well in both cases.

151
00:05:24,309 --> 00:05:26,260
Alright, so let's talk a little

152
00:05:26,260 --> 00:05:28,020
about database architecture.

153
00:05:28,020 --> 00:05:30,759
What is architecture in
the context of systems?

154
00:05:30,759 --> 00:05:32,500
When you build systems, usually

155
00:05:32,500 --> 00:05:33,740
there's lots of
different parts to it.

156
00:05:33,740 --> 00:05:36,079
So Architecture is the
big picture of view

157
00:05:36,079 --> 00:05:37,280
where we see how these different

158
00:05:37,280 --> 00:05:38,560
parts that are act
with each other.

159
00:05:38,560 --> 00:05:40,840
Architecture doesn't
really think about

160
00:05:40,840 --> 00:05:44,180
internally in detail how
these different parts work.

161
00:05:44,180 --> 00:05:46,019
And so, you know, I just grabbed

162
00:05:46,019 --> 00:05:47,279
a random database book and

163
00:05:47,279 --> 00:05:49,020
looked at the architecture
picture here,

164
00:05:49,020 --> 00:05:50,960
which I'm showing And

165
00:05:50,960 --> 00:05:53,299
there's different components
that are interacting.

166
00:05:53,299 --> 00:05:54,980
And what's cool about this
is that we've learned

167
00:05:54,980 --> 00:05:56,820
about a bunch of different
resources so far.

168
00:05:56,820 --> 00:05:58,679
Storage memory
network and compute,

169
00:05:58,679 --> 00:06:01,360
and all these things are in
play in databases, right?

170
00:06:01,360 --> 00:06:03,959
Databases have to interact
with all these resources.

171
00:06:03,959 --> 00:06:06,060
So, for example, there might be

172
00:06:06,060 --> 00:06:08,640
an access methods portion
of the database that

173
00:06:08,640 --> 00:06:13,539
actually stores the data in
files or on disk in subway,

174
00:06:13,539 --> 00:06:15,340
and then provides
access to it, right?

175
00:06:15,340 --> 00:06:18,659
So we have to think
about storage there.

176
00:06:18,659 --> 00:06:20,539
They have a buffer manager,

177
00:06:20,539 --> 00:06:23,020
which provides some type of
caching, maybe an LRU ca,

178
00:06:23,020 --> 00:06:25,220
maybe somebody else, but
it's going to be doing

179
00:06:25,220 --> 00:06:26,380
a lot of the memory
stuff that we

180
00:06:26,380 --> 00:06:28,310
talked about in
the caching there.

181
00:06:28,310 --> 00:06:30,620
Oftentimes, we'll
have a database on

182
00:06:30,620 --> 00:06:34,360
one location and a
client somewhere else.

183
00:06:34,360 --> 00:06:35,999
And so they're communicating
over the network.

184
00:06:35,999 --> 00:06:37,259
When you're playing a database,

185
00:06:37,259 --> 00:06:38,340
you're probably thinking
about ports and

186
00:06:38,340 --> 00:06:39,560
all that stuff we've been
thinking about with.

187
00:06:39,560 --> 00:06:42,139
Networking. And then finally,

188
00:06:42,139 --> 00:06:43,439
to answer any
question about data,

189
00:06:43,439 --> 00:06:45,400
you probably have to do some
type of computation over it.

190
00:06:45,400 --> 00:06:47,080
So all these different resources

191
00:06:47,080 --> 00:06:48,920
that we've been talking
about come to play.

192
00:06:48,920 --> 00:06:51,299
Databases and really
any distributed

193
00:06:51,299 --> 00:06:54,925
serious distributed
system we might look at.

194
00:06:54,925 --> 00:06:57,330
Alright, so we have
those databases,

195
00:06:57,330 --> 00:06:58,790
and we could choose to give

196
00:06:58,790 --> 00:07:00,330
our data in one of those
databases and say,

197
00:07:00,330 --> 00:07:02,530
store my data for
me, or we could

198
00:07:02,530 --> 00:07:05,669
choose to directly put
our data in some files.

199
00:07:05,669 --> 00:07:07,610
And one of the things I want
you to walk away with is

200
00:07:07,610 --> 00:07:08,869
a sense of the trade offs

201
00:07:08,869 --> 00:07:10,250
between those so you
can pack, right?

202
00:07:10,250 --> 00:07:11,690
If you have some data,
or you put it in

203
00:07:11,690 --> 00:07:13,749
a database or put in
a file somewhere.

204
00:07:13,749 --> 00:07:15,470
And I think the Spark book here,

205
00:07:15,470 --> 00:07:16,570
loading Spark that
we're going to

206
00:07:16,570 --> 00:07:17,810
be reading more or later,

207
00:07:17,810 --> 00:07:21,010
has a really nice
comparison between these.

208
00:07:21,010 --> 00:07:22,509
When I have a database

209
00:07:22,509 --> 00:07:24,590
that's directly creating
the files for me,

210
00:07:24,590 --> 00:07:26,570
what they can choose to do is co

211
00:07:26,570 --> 00:07:30,580
design the database layout
and the query edge, right?

212
00:07:30,580 --> 00:07:31,800
They can try to make choices.

213
00:07:31,800 --> 00:07:34,140
If my query engine wants to
have some p of optimization,

214
00:07:34,140 --> 00:07:35,580
maybe I can store my data in

215
00:07:35,580 --> 00:07:37,919
a slightly different format
to make that faster.

216
00:07:37,919 --> 00:07:39,879
Right? If you build
two systems together,

217
00:07:39,879 --> 00:07:42,220
they often interact and

218
00:07:42,220 --> 00:07:45,239
behave faster than if they
were designed separately.

219
00:07:45,239 --> 00:07:46,980
So that's one advantage of that.

220
00:07:46,980 --> 00:07:48,520
One of the disadvantages of

221
00:07:48,520 --> 00:07:50,520
store all your data
to database is that

222
00:07:50,520 --> 00:07:52,500
doing queries on our data is not

223
00:07:52,500 --> 00:07:54,720
the only thing we want to do.

224
00:07:54,720 --> 00:07:56,460
Right? There's this
whole ecosystem

225
00:07:56,460 --> 00:07:57,540
of all kinds of different tools,

226
00:07:57,540 --> 00:07:59,400
maybe there's machine
learning tools, whatever,

227
00:07:59,400 --> 00:08:01,619
and we want to use
those tools to take

228
00:08:01,619 --> 00:08:04,210
advantage of this
data as well, right?

229
00:08:04,210 --> 00:08:06,009
So if I put all my
data in the database

230
00:08:06,009 --> 00:08:07,770
and then I want to trade a
machine learning model on it,

231
00:08:07,770 --> 00:08:09,829
I probably have to do
a query that will dump

232
00:08:09,829 --> 00:08:12,090
out all the data somewhere else.

233
00:08:12,090 --> 00:08:13,189
So that would be a lot slower

234
00:08:13,189 --> 00:08:14,469
than directly access the data.

235
00:08:14,469 --> 00:08:16,170
So the other way people
might do things is

236
00:08:16,170 --> 00:08:18,029
you might store your data
directly in park files,

237
00:08:18,029 --> 00:08:19,329
and you could build
some kind of query

238
00:08:19,329 --> 00:08:20,950
engine on top of that.

239
00:08:20,950 --> 00:08:22,269
It wouldn't be as
slightly integrated.

240
00:08:22,269 --> 00:08:23,149
I'd probably be slower.

241
00:08:23,149 --> 00:08:24,450
But then if I do some machine

242
00:08:24,450 --> 00:08:25,690
learning thing or
something like that,

243
00:08:25,690 --> 00:08:29,360
I could directly access
that data there.

244
00:08:29,360 --> 00:08:31,750
Alright, cool. So we see there's

245
00:08:31,750 --> 00:08:33,350
different ways we might
want to start data.

246
00:08:33,350 --> 00:08:35,150
Sometimes you might want to
get the best of both worlds.

247
00:08:35,150 --> 00:08:37,870
So so may be talking
about that as well.

248
00:08:37,870 --> 00:08:39,370
In particular, if
we have some data,

249
00:08:39,370 --> 00:08:42,610
we often will want to do
a mix of both analytics.

250
00:08:42,610 --> 00:08:44,810
Maybe I want to select the
average value on a column,

251
00:08:44,810 --> 00:08:47,890
and transactions kind of
on this row by row basis.

252
00:08:47,890 --> 00:08:52,370
Even though SQL works
both great for both,

253
00:08:52,370 --> 00:08:54,550
any given database
tends to optimize

254
00:08:54,550 --> 00:08:57,070
for either one or the
other of these use cases.

255
00:08:57,070 --> 00:08:59,584
There are special names for
these different categories.

256
00:08:59,584 --> 00:09:01,159
Of databases, right?

257
00:09:01,159 --> 00:09:03,799
Dates are OLTP and OLAP,

258
00:09:03,799 --> 00:09:06,479
and that T and A are the
most interesting letters of

259
00:09:06,479 --> 00:09:09,059
these acronyms because that's
transaction and analytics,

260
00:09:09,059 --> 00:09:12,259
P is processing and
OL BDs online, right?

261
00:09:12,259 --> 00:09:15,679
So people will say, OLTP
database, OLAP database. Right?

262
00:09:15,679 --> 00:09:16,479
You're really looking for

263
00:09:16,479 --> 00:09:17,779
that third letter to
figure out what it's

264
00:09:17,779 --> 00:09:19,999
actually doing in
transaction or analytics.

265
00:09:19,999 --> 00:09:21,140
That's important,
right? Because if

266
00:09:21,140 --> 00:09:22,420
you're doing a lot
of analytics and you

267
00:09:22,420 --> 00:09:25,239
throw all your data at a
transaction processing database.

268
00:09:25,239 --> 00:09:26,259
For example, today, we're

269
00:09:26,259 --> 00:09:27,499
going to be learning
about b equal.

270
00:09:27,499 --> 00:09:29,820
If you throw all your
data on bequal databases,

271
00:09:29,820 --> 00:09:31,079
then you're doing
this analytics,

272
00:09:31,079 --> 00:09:32,259
that's not going to give you

273
00:09:32,259 --> 00:09:33,500
the best possible performance.

274
00:09:33,500 --> 00:09:34,700
You'd want to put it
in something that's

275
00:09:34,700 --> 00:09:38,019
actually good at analytics.

276
00:09:38,610 --> 00:09:41,809
And how will these
databases optimize for it?

277
00:09:41,809 --> 00:09:43,749
Well, we saw last time that

278
00:09:43,749 --> 00:09:45,589
when you have a storage format,

279
00:09:45,589 --> 00:09:47,110
we often have these tables.

280
00:09:47,110 --> 00:09:48,489
Tables are two dimensional,

281
00:09:48,489 --> 00:09:51,329
but when you store your
data on desk, right?

282
00:09:51,329 --> 00:09:53,389
It's all one dimensional, right?

283
00:09:53,389 --> 00:09:54,689
I could start data
at offset one,

284
00:09:54,689 --> 00:09:55,589
two, three, four, right?

285
00:09:55,589 --> 00:09:56,950
It's very one dimensional disk,

286
00:09:56,950 --> 00:09:58,569
even though I have this
two dimensional thing.

287
00:09:58,569 --> 00:10:01,910
And so I have to decide.
What is consecutive disk?

288
00:10:01,910 --> 00:10:03,649
Do I put rows consecutive?

289
00:10:03,649 --> 00:10:06,290
That'd be a row oriented
format or Columns consecutive.

290
00:10:06,290 --> 00:10:08,509
I'd be a colobated
format, right?

291
00:10:08,509 --> 00:10:10,129
So databases, right? They be

292
00:10:10,129 --> 00:10:12,389
deciding down here,
what they do?

293
00:10:12,389 --> 00:10:13,989
If it's an OLTP database,

294
00:10:13,989 --> 00:10:15,890
they probably have some
ro oriented format.

295
00:10:15,890 --> 00:10:17,389
If it's an AP database,

296
00:10:17,389 --> 00:10:20,689
they probably have some kind
of colobiated format, right?

297
00:10:20,689 --> 00:10:22,549
You have to choose the
right database for

298
00:10:22,549 --> 00:10:26,039
the right job. All right.

299
00:10:26,039 --> 00:10:28,780
Now, here's a very
common situation.

300
00:10:28,780 --> 00:10:30,740
Let's say you're some
kind of big company,

301
00:10:30,740 --> 00:10:33,020
and I grabbed this example
straight from this book,

302
00:10:33,020 --> 00:10:34,739
which is excellent, by the way.

303
00:10:34,739 --> 00:10:36,439
You probably actually
have lots of

304
00:10:36,439 --> 00:10:39,380
different databases going on
for different applications.

305
00:10:39,380 --> 00:10:43,580
So for example, maybe I
have an E commerce website,

306
00:10:43,580 --> 00:10:45,879
and that I can take orders on,

307
00:10:45,879 --> 00:10:47,259
and I will have some kind of

308
00:10:47,259 --> 00:10:48,739
OLTP database for that, right?

309
00:10:48,739 --> 00:10:50,060
If somebody places an order,

310
00:10:50,060 --> 00:10:52,460
that's probably inserting
some rows in the database,

311
00:10:52,460 --> 00:10:54,079
representing that order, right?

312
00:10:54,079 --> 00:10:55,719
So I might do that.
You know, I might have

313
00:10:55,719 --> 00:10:58,119
some warehouse to keep
stock of things, right?

314
00:10:58,119 --> 00:10:59,819
So maybe I have a
separate database

315
00:10:59,819 --> 00:11:02,280
related to a separate
app inventory.

316
00:11:02,280 --> 00:11:03,999
Maybe that has different users.

317
00:11:03,999 --> 00:11:05,560
Maybe I have some kind of

318
00:11:05,560 --> 00:11:07,960
special geographic
database that keeps track

319
00:11:07,960 --> 00:11:10,179
of where my vehicles are and

320
00:11:10,179 --> 00:11:11,779
plans routes for them
and things like that,

321
00:11:11,779 --> 00:11:13,080
that would have different users.

322
00:11:13,080 --> 00:11:14,519
Right? If you're a
large corporation

323
00:11:14,519 --> 00:11:15,900
or any kind of large entity,

324
00:11:15,900 --> 00:11:17,599
you have lots of
different databases for

325
00:11:17,599 --> 00:11:20,499
different purposes and for
different applications, right?

326
00:11:20,499 --> 00:11:22,600
And that all works great until

327
00:11:22,600 --> 00:11:24,220
the data analyst comes along.

328
00:11:24,220 --> 00:11:28,039
The data analyst probably
wants to do things, like, see,

329
00:11:28,039 --> 00:11:30,060
I don't know, when people are
ordering things together,

330
00:11:30,060 --> 00:11:31,399
can they be delivered
together or

331
00:11:31,399 --> 00:11:33,399
kind of asked more complicated
questions like that?

332
00:11:33,399 --> 00:11:35,279
A lot of those questions,

333
00:11:35,279 --> 00:11:37,760
one would really spa

334
00:11:37,760 --> 00:11:41,419
the data across different
kinds of databases, right?

335
00:11:41,419 --> 00:11:45,720
And two, It's not great
for them to use those OLTP

336
00:11:45,720 --> 00:11:46,899
databases because they're not

337
00:11:46,899 --> 00:11:47,999
designed for somebody to come

338
00:11:47,999 --> 00:11:50,600
along and do these
queries over every call.

339
00:11:50,600 --> 00:11:52,060
Right? Sobody comes along
who does that query,

340
00:11:52,060 --> 00:11:54,520
and all of a sudden the database
is really slow for doing

341
00:11:54,520 --> 00:11:56,540
the transaction processing
because it's doing

342
00:11:56,540 --> 00:11:58,879
this giant operation
that's not good for that.

343
00:11:58,879 --> 00:12:01,619
And so what we'll typically
do these organizations do is

344
00:12:01,619 --> 00:12:02,979
they'll actually have
multiple copies of

345
00:12:02,979 --> 00:12:04,560
their data in different
places, right?

346
00:12:04,560 --> 00:12:04,859
They'll have

347
00:12:04,859 --> 00:12:07,064
all these different OLTP
databases somewhere.

348
00:12:07,064 --> 00:12:09,289
And then they'll
have what they call

349
00:12:09,289 --> 00:12:11,549
a data warehouse somewhere else.

350
00:12:11,549 --> 00:12:14,310
And the data warehouse
is an OAP database.

351
00:12:14,310 --> 00:12:15,490
And what they're going to do is

352
00:12:15,490 --> 00:12:16,549
they're going to be
constantly pulling

353
00:12:16,549 --> 00:12:18,910
new data from each of
the OLTP databases,

354
00:12:18,910 --> 00:12:20,889
changing the format, and dumping

355
00:12:20,889 --> 00:12:23,030
it into that App database.

356
00:12:23,030 --> 00:12:24,390
And once they have
it there, then

357
00:12:24,390 --> 00:12:25,730
a business analyst can come

358
00:12:25,730 --> 00:12:27,850
along and do queries

359
00:12:27,850 --> 00:12:29,809
efficiently on data
across different places,

360
00:12:29,809 --> 00:12:32,010
and they're going to have
their calibre human format,

361
00:12:32,010 --> 00:12:33,869
but everything will
be fantastic, right?

362
00:12:33,869 --> 00:12:35,749
So there's some
people who are using

363
00:12:35,749 --> 00:12:37,230
these OLAP databases.

364
00:12:37,230 --> 00:12:38,649
There's another kind of job

365
00:12:38,649 --> 00:12:40,769
that I think a lot of
us might don't get,

366
00:12:40,769 --> 00:12:43,050
kind of a data engineering
job where we have to worry

367
00:12:43,050 --> 00:12:45,549
about the data from
point A to point B.

368
00:12:45,549 --> 00:12:47,649
And so what that person
might do is they might

369
00:12:47,649 --> 00:12:49,630
be writing different kinds
of transformation code

370
00:12:49,630 --> 00:12:51,789
that pulled out the
change data from

371
00:12:51,789 --> 00:12:54,009
these different
OLTP databases and

372
00:12:54,009 --> 00:12:56,609
load it into this giant
data warehouse for us.

373
00:12:56,609 --> 00:12:58,289
And of course, there's always
a new data B generated.

374
00:12:58,289 --> 00:13:00,190
So maybe this happens on some
schedule or maybe you have

375
00:13:00,190 --> 00:13:01,470
some more clever thing

376
00:13:01,470 --> 00:13:03,029
that's happening
continuously, right?

377
00:13:03,029 --> 00:13:04,610
But there's all these
data engineering jobs

378
00:13:04,610 --> 00:13:06,210
where people have to
get the data into

379
00:13:06,210 --> 00:13:08,249
this data warehouse so somebody
can actually start doing

380
00:13:08,249 --> 00:13:11,764
analytics and answering
questions about the data, right?

381
00:13:11,764 --> 00:13:14,060
Any questions about this picture

382
00:13:14,060 --> 00:13:15,659
that is so very important to

383
00:13:15,659 --> 00:13:17,640
us and what organizations

384
00:13:17,640 --> 00:13:20,540
do at their data?
Yeah, right here.

385
00:13:22,580 --> 00:13:26,039
Slide. Oh, the photos

386
00:13:26,039 --> 00:13:28,659
out of the slides.
That's kind of strange.

387
00:13:30,380 --> 00:13:33,860
Oh, I export the Rog?

388
00:13:33,860 --> 00:13:37,540
Okay. I'll just
export this quick.

389
00:13:37,780 --> 00:13:41,160
Maybe I exported to
the Rog directory.

390
00:13:41,160 --> 00:13:43,499
Well, it's there.

391
00:14:01,660 --> 00:14:04,499
Yeah. Hopefully at a
few seconds that sake.

392
00:14:04,499 --> 00:14:06,719
Otherwise, I'll just have
to do it after a lecture.

393
00:14:06,719 --> 00:14:09,499
Yeah. All other
questions people have.

394
00:14:11,460 --> 00:14:16,820
All right. Cool. So
that was a big picture.

395
00:14:16,820 --> 00:14:18,260
Let's start looking at

396
00:14:18,260 --> 00:14:21,020
an example of an OLTP
database in more detail.

397
00:14:21,020 --> 00:14:22,420
And see the different
kinds of things

398
00:14:22,420 --> 00:14:24,140
that it does, in particular,

399
00:14:24,140 --> 00:14:26,320
we'll be looking at
the BEQ database,

400
00:14:26,320 --> 00:14:27,540
which is widely used.

401
00:14:27,540 --> 00:14:28,720
I have a few goals today.

402
00:14:28,720 --> 00:14:29,920
I want you to be able
to go and create

403
00:14:29,920 --> 00:14:31,599
a BEQL database and

404
00:14:31,599 --> 00:14:33,639
specify Skibas with
different types and

405
00:14:33,639 --> 00:14:36,139
different keys
relating to the data.

406
00:14:36,139 --> 00:14:38,600
We're going to introduce this
new idea of transaction.

407
00:14:38,600 --> 00:14:40,299
I'm using transaction here.

408
00:14:40,299 --> 00:14:42,160
In a slightly different
way that I've been

409
00:14:42,160 --> 00:14:44,019
using it, you know,

410
00:14:44,019 --> 00:14:46,539
just minutes ago, where
I learned about what

411
00:14:46,539 --> 00:14:48,340
this other media of
transaction is and how

412
00:14:48,340 --> 00:14:50,180
we can use it to group
together updates.

413
00:14:50,180 --> 00:14:52,300
And then finally, I wanted
to be able to go and write

414
00:14:52,300 --> 00:14:54,759
queries that answer
questions about the data.

415
00:14:54,759 --> 00:14:57,620
We do those queries on Mic
eQL for the sake of example.

416
00:14:57,620 --> 00:14:59,279
But a lot of the queries
I'm doing would actually

417
00:14:59,279 --> 00:15:02,629
be faster if they were
on an AP database.

418
00:15:02,629 --> 00:15:04,680
Alright, so first,
let's talk about how

419
00:15:04,680 --> 00:15:06,299
we can create a design tables.

420
00:15:06,299 --> 00:15:07,740
And when you're creating tables,

421
00:15:07,740 --> 00:15:09,759
there's this data
modeling question.

422
00:15:09,759 --> 00:15:12,300
Data modeling says that if
we have some information,

423
00:15:12,300 --> 00:15:16,499
some data, how do we actually
represent it somewhere?

424
00:15:16,499 --> 00:15:17,959
Data modeling is
something that can

425
00:15:17,959 --> 00:15:19,699
happen at a high
level or a low level.

426
00:15:19,699 --> 00:15:22,180
We've actually seen the
low level a little bit.

427
00:15:22,180 --> 00:15:23,420
Right if I have some data,

428
00:15:23,420 --> 00:15:24,699
let's have some numbers, right?

429
00:15:24,699 --> 00:15:26,890
And I want to send
them over. A network.

430
00:15:26,890 --> 00:15:29,110
How would I represent that? I
could use protocol buffers,

431
00:15:29,110 --> 00:15:30,210
which would represent
it one way.

432
00:15:30,210 --> 00:15:31,770
And I do very blith tolling.

433
00:15:31,770 --> 00:15:34,330
You can imagine I could
put my data an arrow,

434
00:15:34,330 --> 00:15:38,130
and I could send that
over the network as well.

435
00:15:38,130 --> 00:15:39,369
There's different
ways I could take

436
00:15:39,369 --> 00:15:40,770
the same data and represented.

437
00:15:40,770 --> 00:15:42,669
They have different
trade offs, right?

438
00:15:42,669 --> 00:15:44,230
I could represent my data as

439
00:15:44,230 --> 00:15:47,239
some text based
JSON file, right?

440
00:15:47,239 --> 00:15:50,500
That's a low level low level
data modeling question.

441
00:15:50,500 --> 00:15:52,459
Usually, when people are
talking about data modeling,

442
00:15:52,459 --> 00:15:54,060
they're more often talk
about the high level,

443
00:15:54,060 --> 00:15:56,239
which is if I have
some kind of database

444
00:15:56,239 --> 00:15:59,140
that has different
information about things,

445
00:15:59,140 --> 00:16:00,520
people or events or whatever,

446
00:16:00,520 --> 00:16:01,839
how can I represent

447
00:16:01,839 --> 00:16:05,779
these different things as
rows at a table, right?

448
00:16:05,779 --> 00:16:07,619
So, for example, one
way I could do it

449
00:16:07,619 --> 00:16:09,559
is if there are people
ordering books, right?

450
00:16:09,559 --> 00:16:11,340
I could have a table orders

451
00:16:11,340 --> 00:16:13,060
and I could put for each order,

452
00:16:13,060 --> 00:16:15,220
I could put the
information about there.

453
00:16:15,220 --> 00:16:17,259
Le who ordered it the
book and stuff like that.

454
00:16:17,259 --> 00:16:19,260
But there's different
ways I could represent

455
00:16:19,260 --> 00:16:20,500
that same information instead

456
00:16:20,500 --> 00:16:22,019
of just having this one table.

457
00:16:22,019 --> 00:16:24,389
So, for example, another option,

458
00:16:24,389 --> 00:16:25,799
Is that I could say,

459
00:16:25,799 --> 00:16:27,619
I want to avoid the
duplication here, right?

460
00:16:27,619 --> 00:16:30,620
I have Dade County in
Wisconsin, a lot of places.

461
00:16:30,620 --> 00:16:31,920
What I could do is I could have

462
00:16:31,920 --> 00:16:33,479
a separate table of
counties, right?

463
00:16:33,479 --> 00:16:34,859
And each county
could have an ID,

464
00:16:34,859 --> 00:16:36,740
and I have the county
name and the state name.

465
00:16:36,740 --> 00:16:38,439
And then what I would
do is my table orders,

466
00:16:38,439 --> 00:16:40,179
instead of having
those two columns,

467
00:16:40,179 --> 00:16:42,159
I would just have a
county ID that refers

468
00:16:42,159 --> 00:16:45,100
from the first table
to the second table.

469
00:16:45,100 --> 00:16:46,939
Right? The vocabulary I
would use for that is

470
00:16:46,939 --> 00:16:48,890
I would say in the
table counties,

471
00:16:48,890 --> 00:16:50,550
I have a primary key called ID

472
00:16:50,550 --> 00:16:52,729
that it uniquely
identifies each county.

473
00:16:52,729 --> 00:16:54,210
And in my table orders,

474
00:16:54,210 --> 00:16:56,109
I have a foreign key that

475
00:16:56,109 --> 00:16:57,669
refers to that primary key

476
00:16:57,669 --> 00:16:59,289
it's like a reference
or a pointer.

477
00:16:59,289 --> 00:16:59,730
There's

478
00:16:59,730 --> 00:17:01,649
whatever programing language
you're familiar with.

479
00:17:01,649 --> 00:17:03,050
There's some analogy there,

480
00:17:03,050 --> 00:17:04,330
right where we have variables

481
00:17:04,330 --> 00:17:06,769
referring to some data, right?

482
00:17:06,769 --> 00:17:10,519
Now, If you go take
a data base course,

483
00:17:10,519 --> 00:17:11,539
there's some theory around this,

484
00:17:11,539 --> 00:17:12,420
and you'll learn that theory.

485
00:17:12,420 --> 00:17:13,959
I'm t you do a lot of detail.

486
00:17:13,959 --> 00:17:15,459
But one of the
words I want you to

487
00:17:15,459 --> 00:17:17,059
walk away with is normalize.

488
00:17:17,059 --> 00:17:18,699
What I'll say is that

489
00:17:18,699 --> 00:17:22,179
the second version is
more normalized, right?

490
00:17:22,179 --> 00:17:24,439
When I squeeze the
duplication out of

491
00:17:24,439 --> 00:17:27,639
my data, it's more normalized.

492
00:17:27,639 --> 00:17:29,219
They have kind of
der definitions

493
00:17:29,219 --> 00:17:30,820
of different levels
of normalization.

494
00:17:30,820 --> 00:17:33,480
We don't need to know that at
this level of this course.

495
00:17:33,480 --> 00:17:34,860
But if I showed
you both of these,

496
00:17:34,860 --> 00:17:36,579
I'd expect you to
identify the second,

497
00:17:36,579 --> 00:17:40,899
what is the database layout
that's more normalized.

498
00:17:41,310 --> 00:17:44,209
So, this idea of
normalization, right?

499
00:17:44,209 --> 00:17:45,629
I have different layouts,
I have to choose.

500
00:17:45,629 --> 00:17:47,209
And you can see I can
even normalize more.

501
00:17:47,209 --> 00:17:48,529
Right? Maybe I have
table counties is

502
00:17:48,529 --> 00:17:50,050
referring to separate
state things.

503
00:17:50,050 --> 00:17:51,509
I have lots of
different choices.

504
00:17:51,509 --> 00:17:54,109
There's some trade offs
here. What is that?

505
00:17:54,109 --> 00:17:56,709
We can avoid
inconsistencies, right?

506
00:17:56,709 --> 00:17:58,429
Like, for whatever
reason, let's say,

507
00:17:58,429 --> 00:18:02,149
the name of county or a
state changed, right?

508
00:18:02,149 --> 00:18:04,010
I just if it's very normalized,

509
00:18:04,010 --> 00:18:05,470
I can change that in one place,

510
00:18:05,470 --> 00:18:08,949
basically, it looks as if it's
changed everywhere, right?

511
00:18:08,949 --> 00:18:09,989
Whereas the kind of

512
00:18:09,989 --> 00:18:11,409
the de normalized case
where I was like,

513
00:18:11,409 --> 00:18:13,210
copying the county
name in every place.

514
00:18:13,210 --> 00:18:15,269
If I change that, then I
all of a sudden have to go

515
00:18:15,269 --> 00:18:17,909
update a lot of
different things, right?

516
00:18:17,909 --> 00:18:20,730
So we can avoid inconsistencies.

517
00:18:20,730 --> 00:18:22,629
Change of the real world might

518
00:18:22,629 --> 00:18:23,930
lead to fewer change
of the database.

519
00:18:23,930 --> 00:18:27,389
That's often faster. I often
save some space, right?

520
00:18:27,389 --> 00:18:29,189
I repeating those
strikes all the time.

521
00:18:29,189 --> 00:18:30,909
So normalization has
a lot of benefits

522
00:18:30,909 --> 00:18:32,929
and most people
encourage norbalization.

523
00:18:32,929 --> 00:18:34,489
But there's cases where you

524
00:18:34,489 --> 00:18:36,389
actually don't want
normalized data, right?

525
00:18:36,389 --> 00:18:39,300
So Oftentimes, queries are slow,

526
00:18:39,300 --> 00:18:41,400
right instead of having
all my data in one place.

527
00:18:41,400 --> 00:18:44,399
Well, I have to
access this table,

528
00:18:44,399 --> 00:18:46,839
then the database agent
also has to go figure

529
00:18:46,839 --> 00:18:49,859
out the corresponding rows
in some other table, right?

530
00:18:49,859 --> 00:18:51,679
It might also not be good from

531
00:18:51,679 --> 00:18:53,640
the perspective of
historical data.

532
00:18:53,640 --> 00:18:55,739
So, for example,
here, you can see,

533
00:18:55,739 --> 00:18:57,079
let's say I bought a couple of

534
00:18:57,079 --> 00:18:58,759
books under the
name Tyler Harder.

535
00:18:58,759 --> 00:19:00,260
Then after I got married,

536
00:19:00,260 --> 00:19:01,979
I changed my name to
Tyler Carraza Harder.

537
00:19:01,979 --> 00:19:03,540
And at some point,
I changed my name,

538
00:19:03,540 --> 00:19:05,100
and When I'm looking

539
00:19:05,100 --> 00:19:06,519
over the old data,
what do I want to see?

540
00:19:06,519 --> 00:19:10,999
Do I want to see my current
name on old orders?

541
00:19:10,999 --> 00:19:14,179
Or do I want to see my name
at the time on those orders?

542
00:19:14,179 --> 00:19:16,559
Right? For a lot of things,
like let's say I want to,

543
00:19:16,559 --> 00:19:18,579
you know, let's have
invoices, right?

544
00:19:18,579 --> 00:19:20,180
I should be able to
produce an invoice

545
00:19:20,180 --> 00:19:21,819
based on a query of my data.

546
00:19:21,819 --> 00:19:23,139
And it would be kind of

547
00:19:23,139 --> 00:19:24,499
strange if I produced
that invoice,

548
00:19:24,499 --> 00:19:26,374
and I brought a query a
in later the invoice.

549
00:19:26,374 --> 00:19:27,929
Hey, so for historical reasons,

550
00:19:27,929 --> 00:19:29,690
you might not want to
normalize your data.

551
00:19:29,690 --> 00:19:31,909
So there's different
trade offs here, right?

552
00:19:31,909 --> 00:19:33,709
Oftentimes, we
were talking about

553
00:19:33,709 --> 00:19:35,629
how we have some OLTP databases.

554
00:19:35,629 --> 00:19:38,829
Often those databases will
be highly normalized, right?

555
00:19:38,829 --> 00:19:41,090
Because you want to keep
your data consistent.

556
00:19:41,090 --> 00:19:42,950
But then in the OApp database,

557
00:19:42,950 --> 00:19:44,330
in your data warehouse,

558
00:19:44,330 --> 00:19:46,549
they might denormalize it

559
00:19:46,549 --> 00:19:48,809
because there you care
more about speed,

560
00:19:48,809 --> 00:19:51,030
and you are so worried
about keeping your data

561
00:19:51,030 --> 00:19:53,709
consistent because that's a
downstream database, right?

562
00:19:53,709 --> 00:19:55,789
If somehow things get messed up,

563
00:19:55,789 --> 00:19:57,609
I could delete that
App database and

564
00:19:57,609 --> 00:20:00,729
regenerate it from the data
by OLTP databases, right?

565
00:20:00,729 --> 00:20:02,910
So how we normalize our things.

566
00:20:02,910 --> 00:20:06,129
Well, it might depend on which
database you're working on

567
00:20:06,129 --> 00:20:09,809
and what your goals
are, right? All right.

568
00:20:09,809 --> 00:20:11,649
Any questions about
normalization or how that

569
00:20:11,649 --> 00:20:14,889
fits in with different
kinds of databases?

570
00:20:18,590 --> 00:20:23,270
All right. Cool. So we're

571
00:20:23,270 --> 00:20:24,589
going to talk about
transactions now.

572
00:20:24,589 --> 00:20:26,330
And transactions has two
different definitions.

573
00:20:26,330 --> 00:20:27,389
I'm just going to recall

574
00:20:27,389 --> 00:20:29,589
the definition I've
been using so far.

575
00:20:29,589 --> 00:20:32,389
That is really in contrast
to analytics, right?

576
00:20:32,389 --> 00:20:34,850
Adalytic is computation
over columns.

577
00:20:34,850 --> 00:20:36,970
Transaction is
really row by row.

578
00:20:36,970 --> 00:20:39,289
That's one met of
transactions, right?

579
00:20:39,289 --> 00:20:41,149
It means access pattern.

580
00:20:41,149 --> 00:20:42,730
There's a second met also

581
00:20:42,730 --> 00:20:44,590
used in the context
of databases,

582
00:20:44,590 --> 00:20:47,690
and it refers to
what guarantees does

583
00:20:47,690 --> 00:20:49,449
the database give me
if I'm trying to make

584
00:20:49,449 --> 00:20:52,324
multiple changes
at the same time.

585
00:20:52,324 --> 00:20:57,239
And excuse me, a
traditional database

586
00:20:57,239 --> 00:20:58,499
will typically give us what we

587
00:20:58,499 --> 00:21:01,800
call acid properties
or acid transactions.

588
00:21:01,800 --> 00:21:04,760
That stands for ACID, atomicity,

589
00:21:04,760 --> 00:21:08,559
consistency, isolation,
and durability, right?

590
00:21:08,559 --> 00:21:10,239
So traditional databases give

591
00:21:10,239 --> 00:21:11,880
us all these strong guarantees.

592
00:21:11,880 --> 00:21:13,519
And it's important to
think about what those are

593
00:21:13,519 --> 00:21:15,820
because when we
see all databases,

594
00:21:15,820 --> 00:21:19,199
they might say, Oh, this
is a no SQL database.

595
00:21:19,199 --> 00:21:21,439
What does that
mean? L O means no,

596
00:21:21,439 --> 00:21:22,879
but also means not only.

597
00:21:22,879 --> 00:21:25,559
So no SQL means
not only SQL now.

598
00:21:25,559 --> 00:21:27,079
Istad of a very broad term.

599
00:21:27,079 --> 00:21:28,360
Usually when people say, Oh,

600
00:21:28,360 --> 00:21:31,180
I made this kind of non
traditional, no SQL database,

601
00:21:31,180 --> 00:21:35,140
usually they're
weakening the gartes

602
00:21:35,140 --> 00:21:36,539
here at some point, right?

603
00:21:36,539 --> 00:21:39,199
So maybe you want them
to tell you, right?

604
00:21:39,199 --> 00:21:40,620
Okay, here's the
database we use.

605
00:21:40,620 --> 00:21:41,999
They might say,
Oh, it's not acid.

606
00:21:41,999 --> 00:21:43,459
It's just ACI.

607
00:21:43,459 --> 00:21:46,059
There's no durability or
something like that, right?

608
00:21:46,059 --> 00:21:48,339
You want to know what
exactly they're diving.

609
00:21:48,339 --> 00:21:49,659
Right? It's very
important to think about

610
00:21:49,659 --> 00:21:51,194
these different terms. So we

611
00:21:51,194 --> 00:21:53,029
Figure out, Okay,
it's not just no SQL,

612
00:21:53,029 --> 00:21:54,770
but what is special
about this database?

613
00:21:54,770 --> 00:21:56,589
They're probably
sacrificing some of

614
00:21:56,589 --> 00:21:59,230
these things in order to
have some other property.

615
00:21:59,230 --> 00:22:01,409
Maybe it's more scalable
or it's faster.

616
00:22:01,409 --> 00:22:02,669
Right? We might give up some of

617
00:22:02,669 --> 00:22:04,270
these guarantees to
get some other things.

618
00:22:04,270 --> 00:22:07,489
Alright, so what exactly are
these guarantees giving us?

619
00:22:07,489 --> 00:22:09,209
These guarantees
are helping us do

620
00:22:09,209 --> 00:22:11,869
multiple updates a lot
like we did with Locking.

621
00:22:11,869 --> 00:22:14,289
When we did locking, we
would have to identify

622
00:22:14,289 --> 00:22:15,649
these prinal sections where

623
00:22:15,649 --> 00:22:17,509
maybe I'm trying to
do a bank transfer,

624
00:22:17,509 --> 00:22:19,269
and I want to make
sure that everything

625
00:22:19,269 --> 00:22:20,629
happens or nothing happens.

626
00:22:20,629 --> 00:22:24,219
And Database people use
these words in similar,

627
00:22:24,219 --> 00:22:26,339
but slightly different
ways than people use

628
00:22:26,339 --> 00:22:28,739
when they're talking
about about locks, right?

629
00:22:28,739 --> 00:22:30,399
So when we were
talking about locks,

630
00:22:30,399 --> 00:22:32,539
we use the term atomicity.

631
00:22:32,539 --> 00:22:33,679
Atomicity, that means that if

632
00:22:33,679 --> 00:22:34,979
I'm making these two changes,

633
00:22:34,979 --> 00:22:38,659
I want both or nothing, right?

634
00:22:38,659 --> 00:22:40,939
I database bs, that idea of

635
00:22:40,939 --> 00:22:42,980
atomicity actually gets
split into two concepts.

636
00:22:42,980 --> 00:22:45,419
What is atomicity, and
what is isolation, right?

637
00:22:45,419 --> 00:22:47,300
So database bs, atomicity means

638
00:22:47,300 --> 00:22:49,640
that if I'm making
a bunch of changes,

639
00:22:49,640 --> 00:22:51,719
and then for some reason,
it fails at the end.

640
00:22:51,719 --> 00:22:54,059
I see I cannot make all
these changes successfully.

641
00:22:54,059 --> 00:22:56,379
It should roll it back, right?

642
00:22:56,379 --> 00:22:59,720
So atomicity database terms
means it's all or nothing,

643
00:22:59,720 --> 00:23:01,699
but it doesn't really
guarantee that

644
00:23:01,699 --> 00:23:04,379
other threads can't see

645
00:23:04,379 --> 00:23:06,559
partial progress of
the middle, right?

646
00:23:06,559 --> 00:23:08,200
So atomicity and database

647
00:23:08,200 --> 00:23:09,999
terms is a little bit
weaker than adamicity,

648
00:23:09,999 --> 00:23:11,439
when we were talking
about locks.

649
00:23:11,439 --> 00:23:16,709
But atomicity and Database terms

650
00:23:16,709 --> 00:23:17,869
is not the only concept we have.

651
00:23:17,869 --> 00:23:19,429
We also have isolation, right?

652
00:23:19,429 --> 00:23:21,989
So if I'm talking about
locks, I say it's atopic,

653
00:23:21,989 --> 00:23:23,989
and then I start talking
about databases,

654
00:23:23,989 --> 00:23:25,869
and I want equivalent
properties,

655
00:23:25,869 --> 00:23:26,970
what that mean is that it's both

656
00:23:26,970 --> 00:23:28,569
atomic and isolated, right?

657
00:23:28,569 --> 00:23:30,290
So sight be all in the end

658
00:23:30,290 --> 00:23:32,489
and isolated to mean that
somebody will not see

659
00:23:32,489 --> 00:23:34,849
my partial progress in

660
00:23:34,849 --> 00:23:37,649
the middle of that,
right? All right.

661
00:23:37,649 --> 00:23:39,410
So we already see Atibcy before.

662
00:23:39,410 --> 00:23:40,750
Now we're kind of
breaking that into

663
00:23:40,750 --> 00:23:41,830
two smaller concepts,

664
00:23:41,830 --> 00:23:44,669
which is database atibity
and database isolation.

665
00:23:44,669 --> 00:23:46,650
We talked about
consistency before.

666
00:23:46,650 --> 00:23:49,169
Which means the same
thing here, right?

667
00:23:49,169 --> 00:23:51,250
Usually, there's some
rules about what type

668
00:23:51,250 --> 00:23:53,469
of data makes sets, right?

669
00:23:53,469 --> 00:23:55,689
And those rules are called
in variates, right?

670
00:23:55,689 --> 00:23:58,370
That really depends on the
context what those bed.

671
00:23:58,370 --> 00:24:00,729
But consistency for a
database means that

672
00:24:00,729 --> 00:24:03,209
those in variates are
not broken, right?

673
00:24:03,209 --> 00:24:06,219
So, for example, let me give
you think about like that.

674
00:24:06,219 --> 00:24:08,009
Those earlier tables,
right when I had

675
00:24:08,009 --> 00:24:10,129
table orders has a county ID,

676
00:24:10,129 --> 00:24:11,949
referring to the county tables,

677
00:24:11,949 --> 00:24:14,289
it would be inconsistent if

678
00:24:14,289 --> 00:24:16,789
there was no such county
with that county ID, right?

679
00:24:16,789 --> 00:24:18,890
If I'm referring to some
county ID and there's

680
00:24:18,890 --> 00:24:21,669
no county with that ID that
doesn't make sense, right?

681
00:24:21,669 --> 00:24:23,549
So that would be an example
of an invariant, right?

682
00:24:23,549 --> 00:24:26,569
Every four and G refers to
a primary KE somewhere.

683
00:24:26,569 --> 00:24:28,809
Databases can help enforce that.

684
00:24:28,809 --> 00:24:33,089
And then finally, databases
guarantee of durability.

685
00:24:33,089 --> 00:24:35,689
And what that means is
that all this stuff that

686
00:24:35,689 --> 00:24:39,249
normally works also works if
my database crashes subtly.

687
00:24:39,249 --> 00:24:42,049
If there's a power loss or
something like that, You know,

688
00:24:42,049 --> 00:24:44,749
if my computer crashes
at a bad time,

689
00:24:44,749 --> 00:24:47,769
I shouldn't see partial
updates, right?

690
00:24:47,769 --> 00:24:49,569
So normal databases have

691
00:24:49,569 --> 00:24:50,650
traditional databases are ready

692
00:24:50,650 --> 00:24:51,750
to guarantee all these things.

693
00:24:51,750 --> 00:24:53,109
No traditional, no SQL

694
00:24:53,109 --> 00:24:56,490
databases may or may not
give us all of these things.

695
00:24:56,490 --> 00:24:58,310
Do you have any questions
about any of these terms?

696
00:24:58,310 --> 00:25:00,050
I realize the concepts

697
00:25:00,050 --> 00:25:01,610
are confusing in
and of themselves,

698
00:25:01,610 --> 00:25:03,309
and that it's even
more confusing

699
00:25:03,309 --> 00:25:04,889
because different communities,

700
00:25:04,889 --> 00:25:06,430
systems people or database

701
00:25:06,430 --> 00:25:07,869
people use these terms slightly

702
00:25:07,869 --> 00:25:09,430
differently even the
database community

703
00:25:09,430 --> 00:25:11,370
transactions can mean
different things.

704
00:25:11,370 --> 00:25:13,049
There's a lot of confusion
here. Does everybody have

705
00:25:13,049 --> 00:25:15,890
any questions to get
all this straight?

706
00:25:18,010 --> 00:25:25,590
A, right. Cool. Let's talk
a little bit about queries.

707
00:25:25,590 --> 00:25:27,490
So when I write a SQL query,

708
00:25:27,490 --> 00:25:28,989
it has this general structure.

709
00:25:28,989 --> 00:25:30,409
I say something I
want to select.

710
00:25:30,409 --> 00:25:31,930
And I'm going to say
up there specifically,

711
00:25:31,930 --> 00:25:33,509
maybe something about columns or

712
00:25:33,509 --> 00:25:35,789
what kind of analysis I want
to do on those columns and

713
00:25:35,789 --> 00:25:37,510
I'll say f to indicate

714
00:25:37,510 --> 00:25:38,930
a specific table or maybe

715
00:25:38,930 --> 00:25:40,509
there's other things that
I can select from as well,

716
00:25:40,509 --> 00:25:42,250
but let's just
imagine it's a table.

717
00:25:42,250 --> 00:25:44,849
And then there's a bunch of
optional stuff after that.

718
00:25:44,849 --> 00:25:48,229
Joy where group by Having
order by and limit.

719
00:25:48,229 --> 00:25:52,229
And these will all transform
the data in some way, right?

720
00:25:52,229 --> 00:25:54,289
So these are kind
of all clauses that

721
00:25:54,289 --> 00:25:56,709
you should just throw
memorize and remember.

722
00:25:56,709 --> 00:26:02,829
And the The structure

723
00:26:02,829 --> 00:26:04,730
here of these queries is
a little bit misleading.

724
00:26:04,730 --> 00:26:06,230
People have actually built

725
00:26:06,230 --> 00:26:08,550
all their query languages
because this is misleading.

726
00:26:08,550 --> 00:26:10,869
It throws off people
who are due to SQL.

727
00:26:10,869 --> 00:26:12,369
Because, for the most
part, you can think of

728
00:26:12,369 --> 00:26:14,069
these things happening
in some order.

729
00:26:14,069 --> 00:26:17,589
But the select statement is
a little bit fuddy, right?

730
00:26:17,589 --> 00:26:18,769
Some of the things
that are happening

731
00:26:18,769 --> 00:26:19,869
with select kind of happened in

732
00:26:19,869 --> 00:26:22,550
the middle of all the
data transformation.

733
00:26:22,550 --> 00:26:24,849
So the picture that I
found is really helpful

734
00:26:24,849 --> 00:26:27,469
to understand SQL
queries is right here.

735
00:26:27,469 --> 00:26:30,584
What I imagine is that I
have some starting data.

736
00:26:30,584 --> 00:26:32,580
And it flows through

737
00:26:32,580 --> 00:26:34,359
all these different
transformations to

738
00:26:34,359 --> 00:26:36,699
get some final result data.

739
00:26:36,699 --> 00:26:38,360
And when you're
writing a SQL query,

740
00:26:38,360 --> 00:26:39,739
any kind of sequL query you

741
00:26:39,739 --> 00:26:41,599
write will correspond to

742
00:26:41,599 --> 00:26:42,899
some variant on this
picture, right?

743
00:26:42,899 --> 00:26:44,479
This one is kind of
like doing everything.

744
00:26:44,479 --> 00:26:46,779
Usually, you might do two
or three different kinds

745
00:26:46,779 --> 00:26:50,039
of transformations to get
your final adds, right?

746
00:26:50,039 --> 00:26:51,400
You might have a
complicated query

747
00:26:51,400 --> 00:26:52,080
that does all the things.

748
00:26:52,080 --> 00:26:53,815
So let's just go through.

749
00:26:53,815 --> 00:26:56,449
Oftentimes, I start
with multiple tables,

750
00:26:56,449 --> 00:26:58,430
and so one of the things I
could do is I could join.

751
00:26:58,430 --> 00:26:59,929
If I joined together, then

752
00:26:59,929 --> 00:27:01,710
I'm ready get
basically something

753
00:27:01,710 --> 00:27:03,169
that looks like a new table with

754
00:27:03,169 --> 00:27:05,269
some columns from A and
some columns from B,

755
00:27:05,269 --> 00:27:07,689
I might be doing that based
on this four and G to

756
00:27:07,689 --> 00:27:10,530
primary K relationship
or something else.

757
00:27:10,530 --> 00:27:14,029
A wear statement filters out
which rows I have, right?

758
00:27:14,029 --> 00:27:15,810
So maybe two of these rows after

759
00:27:15,810 --> 00:27:18,689
the wear are no longer there.

760
00:27:19,860 --> 00:27:24,839
Excuse me. A group Pi pulls
together related data, right?

761
00:27:24,839 --> 00:27:27,580
In this case, I see I have
four different groups of data.

762
00:27:27,580 --> 00:27:32,040
A aggregate often works in
traduction with a group pi.

763
00:27:32,040 --> 00:27:34,760
For each group, which
might have a few rows,

764
00:27:34,760 --> 00:27:36,639
I might want to
just have one row

765
00:27:36,639 --> 00:27:38,060
that summarizes
them in some way.

766
00:27:38,060 --> 00:27:41,959
May be like average or sub or
cow or something like that.

767
00:27:41,959 --> 00:27:43,539
That would be an
aggregate. I often do

768
00:27:43,539 --> 00:27:45,380
these aggregates after
I do a group pi.

769
00:27:45,380 --> 00:27:47,669
So I have all these
things out here.

770
00:27:47,669 --> 00:27:52,199
After I have basically one
row summarizing each group,

771
00:27:52,199 --> 00:27:54,439
I may not be interested
in all the groups.

772
00:27:54,439 --> 00:27:56,999
And so I can have a
having statement that

773
00:27:56,999 --> 00:28:00,539
eliminates some of
these summaries, right?

774
00:28:00,539 --> 00:28:03,139
So having and we are actually
very similar, right?

775
00:28:03,139 --> 00:28:04,640
Both of them are filtered down,

776
00:28:04,640 --> 00:28:07,500
but the where would happen
before group by aggregate.

777
00:28:07,500 --> 00:28:09,680
Having would happen after.

778
00:28:09,840 --> 00:28:12,519
After I do that, I might want to

779
00:28:12,519 --> 00:28:13,639
figure out these
different groups

780
00:28:13,639 --> 00:28:14,779
I have what order I want them.

781
00:28:14,779 --> 00:28:16,299
I could do it order
by statement.

782
00:28:16,299 --> 00:28:18,600
And then finally, I might
want to say that I only

783
00:28:18,600 --> 00:28:19,919
want to have the first two

784
00:28:19,919 --> 00:28:21,279
results or something like that,

785
00:28:21,279 --> 00:28:22,599
that would be a limit, right?

786
00:28:22,599 --> 00:28:23,780
So when you write a query,

787
00:28:23,780 --> 00:28:26,559
I want you to try to imagine
a picture like this,

788
00:28:26,559 --> 00:28:28,920
maybe a sipiler picture if
you have a simpler query,

789
00:28:28,920 --> 00:28:30,960
kind of imagine step by step,

790
00:28:30,960 --> 00:28:32,259
all these
transformations that are

791
00:28:32,259 --> 00:28:33,819
happening to your data.

792
00:28:33,819 --> 00:28:37,179
That's make you better at
writing these sequel queries.

793
00:28:37,179 --> 00:28:39,479
You have any questions
about this picture?

794
00:28:39,479 --> 00:28:41,079
Yeah, right here.

795
00:28:42,860 --> 00:28:44,760
That's an excellent question.

796
00:28:44,760 --> 00:28:45,900
Tables have to be the same size

797
00:28:45,900 --> 00:28:48,499
when you join them. They
don't have to, right?

798
00:28:48,499 --> 00:28:51,519
So, for example, earlier,

799
00:28:51,519 --> 00:28:55,219
I showed that I had a table
of all the counties, right?

800
00:28:55,219 --> 00:28:57,380
And let's say I have
a successful business

801
00:28:57,380 --> 00:28:59,319
that I might have like,

802
00:28:59,319 --> 00:29:01,319
millions of orders, right,
and more and more orders.

803
00:29:01,319 --> 00:29:03,459
Even though I've gave more
and more orders over time,

804
00:29:03,459 --> 00:29:05,459
there are not new
counties being created,

805
00:29:05,459 --> 00:29:07,879
right? That's relatively fixed.

806
00:29:07,879 --> 00:29:09,660
Right? So it might be
that for each county,

807
00:29:09,660 --> 00:29:10,979
there might be
something like hundreds

808
00:29:10,979 --> 00:29:12,339
of different orders, right?

809
00:29:12,339 --> 00:29:13,860
So in this case, I
might want to join

810
00:29:13,860 --> 00:29:17,299
this giant table with a
smaller table of counties.

811
00:29:17,299 --> 00:29:20,880
Does that make sense?
Yeah. Excellent question.

812
00:29:20,880 --> 00:29:25,539
Yeah, all the questions
people have. All right.

813
00:29:25,539 --> 00:29:29,420
Cool. Some to head over here.
I'm going to do some depos.

814
00:29:29,420 --> 00:29:35,599
And you know, under resources
and lecture sipets,

815
00:29:35,599 --> 00:29:38,799
we're very heavy
lecture sippe saves.

816
00:29:38,799 --> 00:29:40,659
There's lot of
stuff I want to do.

817
00:29:40,659 --> 00:29:42,419
Different questions, Suff I

818
00:29:42,419 --> 00:29:43,500
don't want to do
is so much typing,

819
00:29:43,500 --> 00:29:44,960
right as we won't
ever hit through

820
00:29:44,960 --> 00:29:46,740
this. So there's a few things.

821
00:29:46,740 --> 00:29:48,539
There's an environment
here that you have to

822
00:29:48,539 --> 00:29:50,940
set up with some
Python packages.

823
00:29:50,940 --> 00:29:54,539
And so on my computer, I'm
just going to do that.

824
00:29:54,539 --> 00:29:55,960
Now, I already installed
all this stuff.

825
00:29:55,960 --> 00:29:59,500
So I'm going to activate
my virtual environment.

826
00:29:59,500 --> 00:30:01,979
And then after I have that,

827
00:30:01,979 --> 00:30:03,939
then you would
install these things.

828
00:30:03,939 --> 00:30:06,179
And then I have a Docker
run statement here,

829
00:30:06,179 --> 00:30:07,759
which will be a copy and paste,

830
00:30:07,759 --> 00:30:09,239
and we're going to
take a look at this.

831
00:30:09,239 --> 00:30:10,920
So there's a lot of things here.

832
00:30:10,920 --> 00:30:12,799
So the most supportt thing

833
00:30:12,799 --> 00:30:14,779
is at the end, I
have the image dame.

834
00:30:14,779 --> 00:30:16,720
So there's a Docker Hub,

835
00:30:16,720 --> 00:30:18,100
there's an image called M SQL,

836
00:30:18,100 --> 00:30:19,219
and if I run it for
the first time,

837
00:30:19,219 --> 00:30:20,279
it would pull it for me,

838
00:30:20,279 --> 00:30:23,079
I already have it pulled
so it'll be faster.

839
00:30:23,079 --> 00:30:25,239
I may run in the background.

840
00:30:25,239 --> 00:30:27,359
That's the detached mode.

841
00:30:27,359 --> 00:30:29,519
I may say I can only
have 1 gigabyte of

842
00:30:29,519 --> 00:30:32,180
memory used for this conator.

843
00:30:32,180 --> 00:30:34,560
Inside of the Cttor,

844
00:30:34,560 --> 00:30:36,860
the bic equal database
is at to be a server,

845
00:30:36,860 --> 00:30:39,460
and it'll be listed
on port 3306.

846
00:30:39,460 --> 00:30:43,820
And I may say that Port
33 o6b virtual machine

847
00:30:43,820 --> 00:30:46,759
should forward to
3306 inside of there.

848
00:30:46,759 --> 00:30:48,159
And that way, I could basically

849
00:30:48,159 --> 00:30:49,359
run quote out of the side of

850
00:30:49,359 --> 00:30:50,799
the Cttor and access

851
00:30:50,799 --> 00:30:53,319
this the database.
What else do I have?

852
00:30:53,319 --> 00:30:55,739
E stands for
environment variable,

853
00:30:55,739 --> 00:30:58,999
and I'm telling the
database that M equal,

854
00:30:58,999 --> 00:31:02,545
I wanted to create a
database called CS 544.

855
00:31:02,545 --> 00:31:04,469
It's totally possible to have

856
00:31:04,469 --> 00:31:05,629
one database server that has

857
00:31:05,629 --> 00:31:08,389
different databases
edit that it adages.

858
00:31:08,389 --> 00:31:10,230
This one is just to
have this server.

859
00:31:10,230 --> 00:31:12,090
Database server, we'll
have one database,

860
00:31:12,090 --> 00:31:13,770
which is CS 544.

861
00:31:13,770 --> 00:31:15,389
And then I'm to put
a password on it,

862
00:31:15,389 --> 00:31:17,509
which is ABC, terrible
password, I know,

863
00:31:17,509 --> 00:31:19,709
but you can't access

864
00:31:19,709 --> 00:31:22,330
my database because it's
list of the odd local host,

865
00:31:22,330 --> 00:31:23,529
plus I have a firewall, right?

866
00:31:23,529 --> 00:31:25,130
So even though it's
terrible password,

867
00:31:25,130 --> 00:31:26,589
nobody will be able
to get access to

868
00:31:26,589 --> 00:31:28,370
this database unless they're
already on my machine,

869
00:31:28,370 --> 00:31:29,489
and at that point,
I'm kind of out

870
00:31:29,489 --> 00:31:30,850
of bluck anyway. Right?

871
00:31:30,850 --> 00:31:34,169
I'm to go and I run that
database. It start up.

872
00:31:34,169 --> 00:31:36,490
And that's all fighted well.

873
00:31:36,490 --> 00:31:38,629
And then what I might
want to do is I might

874
00:31:38,629 --> 00:31:40,929
want to jump inside of it
so I can run some queries.

875
00:31:40,929 --> 00:31:42,810
I may say Doc Exact IT.

876
00:31:42,810 --> 00:31:46,779
T let me do Doctor PS
and find the name of it.

877
00:31:46,779 --> 00:31:49,819
And say a copy of
my container name,

878
00:31:49,819 --> 00:31:51,779
and I want to get a
bash session inside.

879
00:31:51,779 --> 00:31:53,139
I'm inside of the
container where

880
00:31:53,139 --> 00:31:55,300
my MicQal database is running.

881
00:31:55,300 --> 00:31:57,279
I could run the bicquL command

882
00:31:57,279 --> 00:31:59,159
here to be able to
interact with it.

883
00:31:59,159 --> 00:32:01,259
And when I do that,

884
00:32:01,259 --> 00:32:03,839
I want to say what database
I'm connecting to.

885
00:32:03,839 --> 00:32:05,819
So CS 544, and

886
00:32:05,819 --> 00:32:08,140
I want to tell it to
ask me for a password,

887
00:32:08,140 --> 00:32:10,840
which is ABC, and great.

888
00:32:10,840 --> 00:32:12,559
So I have a client now inside of

889
00:32:12,559 --> 00:32:15,260
the container where my
database server is running,

890
00:32:15,260 --> 00:32:17,159
and I could do things like say,

891
00:32:17,159 --> 00:32:19,539
like, show tables, which
they may be done, right?

892
00:32:19,539 --> 00:32:21,019
I don't have any
tables traded yet,

893
00:32:21,019 --> 00:32:22,259
but I have an
environment where I can

894
00:32:22,259 --> 00:32:24,820
jump in and start
running queries.

895
00:32:24,820 --> 00:32:27,119
Alright, so what
I'm gonna do now is

896
00:32:27,119 --> 00:32:29,680
I'm going to head
back over here.

897
00:32:29,680 --> 00:32:33,239
SSH Do Window.

898
00:32:33,239 --> 00:32:40,789
Alright. And let me just
clean that up a little bit.

899
00:32:40,789 --> 00:32:46,210
I'm go into F 24
Lecture 15. Here I am.

900
00:32:46,210 --> 00:32:50,130
And I'm going to activate
that environment again.

901
00:32:50,130 --> 00:32:52,229
And what I'm go to do now
is I may start Jupiter.

902
00:32:52,229 --> 00:32:53,970
So Jupiter lab is
going to be running

903
00:32:53,970 --> 00:32:56,549
outside of my container, right?

904
00:32:56,549 --> 00:33:00,030
I'm to say Python
three, Jupiter lab.

905
00:33:00,030 --> 00:33:02,609
And I don't want it to
start a browser for me.

906
00:33:02,609 --> 00:33:04,190
Somebody say no browser

907
00:33:04,190 --> 00:33:05,889
because it doesn't make

908
00:33:05,889 --> 00:33:07,410
sense to have a browser
by virtual machine.

909
00:33:07,410 --> 00:33:09,069
I want to be able
to see it anyway.

910
00:33:09,069 --> 00:33:11,569
So I'd be to run that thing.

911
00:33:11,570 --> 00:33:13,850
And then the idea
is, I made sure

912
00:33:13,850 --> 00:33:15,409
we can write SQL code inside of

913
00:33:15,409 --> 00:33:16,969
Jupiter lab that's to

914
00:33:16,969 --> 00:33:19,229
access data inside
of that database.

915
00:33:19,229 --> 00:33:22,210
And so I see here
that I have a URL.

916
00:33:22,210 --> 00:33:25,749
I can copy, right to open
this up. May come over here.

917
00:33:25,749 --> 00:33:27,529
And this will not
work for BB this

918
00:33:27,529 --> 00:33:29,550
is local host on my laptop.

919
00:33:29,550 --> 00:33:31,669
And so what I have
to do now is I

920
00:33:31,669 --> 00:33:34,969
have to set up an SSH tunnel.

921
00:33:35,690 --> 00:33:39,289
And I may do local host 8888,

922
00:33:39,289 --> 00:33:43,190
my laptop going to the
same the virtual machine,

923
00:33:43,190 --> 00:33:46,069
right? So I may do that.

924
00:33:46,069 --> 00:33:47,769
Great. So I have a lot of

925
00:33:47,769 --> 00:33:49,289
things set up. I'm
ready to roll.

926
00:33:49,289 --> 00:33:50,929
I have a database there.

927
00:33:50,929 --> 00:33:53,210
I have all my prep
work from last slight.

928
00:33:53,210 --> 00:33:56,210
I'm a to make a
new notebook now.

929
00:33:56,760 --> 00:33:59,379
I'm ready to roll write
my databases there,

930
00:33:59,379 --> 00:34:01,839
I should be able to start query

931
00:34:01,839 --> 00:34:05,000
it from PADs, right?
That's my goal.

932
00:34:05,000 --> 00:34:06,979
All right. And so what I will

933
00:34:06,979 --> 00:34:09,680
do is I will come back to
these lecture snippets.

934
00:34:09,680 --> 00:34:13,100
And there's this tool
called SQL Alchemy,

935
00:34:13,100 --> 00:34:14,979
and where use SQL Alka to

936
00:34:14,979 --> 00:34:16,999
connect to the b squal database.

937
00:34:16,999 --> 00:34:19,020
And SQL Alchemy is
pretty flexible.

938
00:34:19,020 --> 00:34:21,040
It lets us have different
connection strings

939
00:34:21,040 --> 00:34:23,240
that will specify what
type of database.

940
00:34:23,240 --> 00:34:24,359
This is actually great because I

941
00:34:24,359 --> 00:34:25,580
can write a bunch of code,

942
00:34:25,580 --> 00:34:27,619
and assume doing any kind

943
00:34:27,619 --> 00:34:30,499
of unusual kind of
quarter case equal stuff.

944
00:34:30,499 --> 00:34:31,920
Maybe if I switch database,

945
00:34:31,920 --> 00:34:34,019
I can just switch this
string here, right?

946
00:34:34,019 --> 00:34:36,640
So from SQL Alchemy, I'm
creating this database engine.

947
00:34:36,640 --> 00:34:42,300
It's my SQL. The
password is ABC.

948
00:34:42,300 --> 00:34:45,020
It's my database servers
on this support,

949
00:34:45,020 --> 00:34:46,499
and this is my database, right?

950
00:34:46,499 --> 00:34:47,879
I can get a connection to

951
00:34:47,879 --> 00:34:51,719
that database that's inside
of the container. Okay, cool.

952
00:34:51,760 --> 00:34:54,479
How would I use that?

953
00:34:54,479 --> 00:34:56,400
Well, I can say connection,

954
00:34:56,400 --> 00:35:00,849
execute. Execute like that.

955
00:35:00,849 --> 00:35:02,909
Then I can try to put
some straight here.

956
00:35:02,909 --> 00:35:05,270
I let's say I want to see
somebody show tables.

957
00:35:05,270 --> 00:35:07,589
I could do that. And I run in

958
00:35:07,589 --> 00:35:08,809
trouble because they

959
00:35:08,809 --> 00:35:10,129
might want to put
different things here.

960
00:35:10,129 --> 00:35:12,430
I could have some kind
of more structured

961
00:35:12,430 --> 00:35:14,230
description of a query.

962
00:35:14,230 --> 00:35:15,569
In this case, I
want to just give

963
00:35:15,569 --> 00:35:16,909
it some texts, so
I could do that.

964
00:35:16,909 --> 00:35:18,849
I try to give me
some results back.

965
00:35:18,849 --> 00:35:21,709
In this case, it's something
I could loop over.

966
00:35:21,709 --> 00:35:23,069
I might just convert to a list,

967
00:35:23,069 --> 00:35:24,430
and there's no tables.

968
00:35:24,430 --> 00:35:26,449
No surprise. I haven't
created any tables yet.

969
00:35:26,449 --> 00:35:28,189
But this is how I could write

970
00:35:28,189 --> 00:35:30,810
some Python code that runs SQL

971
00:35:30,810 --> 00:35:35,370
queries on my my SQL
database inside of a contor.

972
00:35:35,370 --> 00:35:36,809
I can get all these
pieces working

973
00:35:36,809 --> 00:35:40,289
together. Alright, cool.

974
00:35:40,289 --> 00:35:42,069
So what I'm go to do now is

975
00:35:42,069 --> 00:35:43,989
I'm going to look at
this description of

976
00:35:43,989 --> 00:35:46,749
a table and see if I can write

977
00:35:46,749 --> 00:35:50,209
a SQL query to create
that table for me.

978
00:35:50,209 --> 00:35:52,429
Right? So I have a multi
lie straight here.

979
00:35:52,429 --> 00:35:54,310
I often do that, so
the SQL statement

980
00:35:54,310 --> 00:35:56,390
is just out of line by itself.

981
00:35:56,390 --> 00:35:58,429
And I have the general
structure to create

982
00:35:58,429 --> 00:36:01,329
table something and then
something in parentheses,

983
00:36:01,329 --> 00:36:02,809
and then I have a
description up here

984
00:36:02,809 --> 00:36:04,369
of the table I want
to create, right?

985
00:36:04,369 --> 00:36:06,470
So I want the table
name to be users.

986
00:36:06,470 --> 00:36:08,729
I'm put users as a
table name here.

987
00:36:08,729 --> 00:36:12,490
And then the columns I want
to have are ID name and FOD.

988
00:36:12,490 --> 00:36:13,829
So I'm put that here, right?

989
00:36:13,829 --> 00:36:15,809
So I'm set up now
where I can have

990
00:36:15,809 --> 00:36:19,029
a three column table
in my database.

991
00:36:19,029 --> 00:36:21,170
And when I do that, I
actually have to put types.

992
00:36:21,170 --> 00:36:23,070
Remember that types are
part of the Schema.

993
00:36:23,070 --> 00:36:24,889
And so I have to
put the type name

994
00:36:24,889 --> 00:36:26,329
after each field, right?

995
00:36:26,329 --> 00:36:29,370
Somebody say that
ID is an integer,

996
00:36:29,430 --> 00:36:32,710
Nab will be a string,

997
00:36:32,710 --> 00:36:35,609
and pod will also be
a string. Okay, cool.

998
00:36:35,609 --> 00:36:38,569
So far so good. I have some
other requirements here.

999
00:36:38,569 --> 00:36:40,490
Dab is required.

1000
00:36:40,490 --> 00:36:44,429
And so the way I will
do that is I will say,

1001
00:36:46,110 --> 00:36:52,239
I will say, No
null on it, right?

1002
00:36:52,239 --> 00:36:53,499
So I could say, after this,

1003
00:36:53,499 --> 00:36:55,539
I could say dull.

1004
00:36:55,539 --> 00:36:58,760
All right. Cool. I
get ahead of myself.

1005
00:36:58,760 --> 00:37:00,439
I think I kind of did right?

1006
00:37:00,439 --> 00:37:02,079
I think that Oh, well,

1007
00:37:02,079 --> 00:37:04,219
it's not important. We
do it in either order.

1008
00:37:04,219 --> 00:37:06,179
And the thing it
says that is that

1009
00:37:06,179 --> 00:37:08,999
ID should uniquely
identify the row.

1010
00:37:08,999 --> 00:37:13,559
The way I'll do that is
I will say primary key,

1011
00:37:14,360 --> 00:37:16,499
Oh, there are my notes.

1012
00:37:16,499 --> 00:37:18,399
Sorry. I just trying to get
a little lost of my notes.

1013
00:37:18,399 --> 00:37:19,919
I can say primary
key over here that

1014
00:37:19,919 --> 00:37:21,739
I say what column that is.

1015
00:37:21,739 --> 00:37:23,999
And so I just don't want to
throw people off, right?

1016
00:37:23,999 --> 00:37:26,839
There's still three
columns here.

1017
00:37:26,839 --> 00:37:29,120
And this is just adding
of extra information.

1018
00:37:29,120 --> 00:37:33,099
I'm saying that that ID
should be by primary key.

1019
00:37:33,099 --> 00:37:36,159
So I read that. And I read
a little bit of trouble.

1020
00:37:36,159 --> 00:37:39,280
I have an error.
Check the syntax

1021
00:37:42,200 --> 00:37:47,479
So I have issue here. All right.

1022
00:37:47,479 --> 00:37:51,199
Where did I go wrong?
Let's take a look at this.

1023
00:37:52,160 --> 00:37:55,799
You still need to use
like a single syntax side

1024
00:37:55,799 --> 00:37:59,309
listening es and
all when you're Oh,

1025
00:37:59,309 --> 00:38:01,889
no, you need to use the
semicol I actually don't,

1026
00:38:01,889 --> 00:38:03,409
so it won't hurt.

1027
00:38:03,409 --> 00:38:04,549
But let me just try to check.

1028
00:38:04,549 --> 00:38:05,949
Yeah. If other people
have other ideas,

1029
00:38:05,949 --> 00:38:09,509
feel free to shout it out,
right? So let me just check.

1030
00:38:09,509 --> 00:38:13,069
I I create table users ID.

1031
00:38:13,390 --> 00:38:15,870
Name. Oh, I'm sorry.

1032
00:38:15,870 --> 00:38:18,629
I think that instead of
straight the use tax,

1033
00:38:18,629 --> 00:38:21,029
s right? Okay, cool.

1034
00:38:21,029 --> 00:38:22,629
So I was able to
create that table.

1035
00:38:22,629 --> 00:38:24,710
Now, if I came back and
I said show tables,

1036
00:38:24,710 --> 00:38:27,429
I can actually see there's
a user's table there.

1037
00:38:27,429 --> 00:38:27,929
All right.

1038
00:38:27,929 --> 00:38:32,749
Cool. Any questions so far?
I've done a lot of stuff.

1039
00:38:32,749 --> 00:38:34,889
I've created this database
create a table there.

1040
00:38:34,889 --> 00:38:36,590
I want to make sure
about lose anybody.

1041
00:38:36,590 --> 00:38:41,389
Any questions so far. All right.

1042
00:38:41,389 --> 00:38:43,469
Cool. So that was
our first table.

1043
00:38:43,469 --> 00:38:44,789
What we want to do
now is I want to

1044
00:38:44,789 --> 00:38:45,869
have another table
that relates to it.

1045
00:38:45,869 --> 00:38:47,309
Somebody imagine
that were a bake.

1046
00:38:47,309 --> 00:38:51,230
And each of these users has
some number of bank accounts.

1047
00:38:51,230 --> 00:38:53,210
You might have like a
checking savings account.

1048
00:38:53,210 --> 00:38:55,429
It's not unusual to have
multiple accounts, right?

1049
00:38:55,429 --> 00:38:57,489
And somebody copy this out here,

1050
00:38:57,489 --> 00:38:59,769
and I want to have
another case now

1051
00:38:59,769 --> 00:39:02,890
where I am going to
have an account,

1052
00:39:02,890 --> 00:39:05,430
right each user can have
some bank accounts.

1053
00:39:05,430 --> 00:39:07,550
I'll call this accounts.

1054
00:39:07,550 --> 00:39:09,209
And what will we have here?

1055
00:39:09,209 --> 00:39:13,070
We have to say what user
ID is. We'll be a Editor.

1056
00:39:13,070 --> 00:39:14,329
That's going to refer
to this up here,

1057
00:39:14,329 --> 00:39:16,130
because I want to know the name

1058
00:39:16,130 --> 00:39:18,289
out of the account.
What else will I have?

1059
00:39:18,289 --> 00:39:21,680
I'm going to have a name
for the bank account.

1060
00:39:21,680 --> 00:39:24,250
And I say that can not be all.

1061
00:39:24,250 --> 00:39:27,529
I have a phone. Let me see.

1062
00:39:27,529 --> 00:39:29,589
I make my examples again.

1063
00:39:29,589 --> 00:39:32,689
I have an amount in the
bank account, right?

1064
00:39:32,689 --> 00:39:33,969
That will be an it,
and that will not

1065
00:39:33,969 --> 00:39:35,969
be ll, as well, right?

1066
00:39:35,969 --> 00:39:38,389
Okay, so the user has a name,

1067
00:39:38,389 --> 00:39:39,689
bank accounts have a name.

1068
00:39:39,689 --> 00:39:41,830
Bank accounts are
associated with users.

1069
00:39:41,830 --> 00:39:43,669
Bank accounts have
some number of

1070
00:39:43,669 --> 00:39:45,829
dollars in them. So I have that.

1071
00:39:45,829 --> 00:39:47,829
And then the other
part that I need to

1072
00:39:47,829 --> 00:39:50,150
add is I need to indicate

1073
00:39:50,150 --> 00:39:52,569
that this user ID down

1074
00:39:52,569 --> 00:39:55,669
here is actually referring
to this up here.

1075
00:39:55,669 --> 00:39:56,869
And then the
database is going to

1076
00:39:56,869 --> 00:39:58,369
help me to make
sure that I don't,

1077
00:39:58,369 --> 00:39:59,629
for example, have accounts that

1078
00:39:59,629 --> 00:40:01,409
nobody owes. Yeah,
question right here.

1079
00:40:01,409 --> 00:40:04,269
Whatever you're saying that
with the prior table is,

1080
00:40:04,269 --> 00:40:08,089
does it have to go an like right

1081
00:40:08,089 --> 00:40:14,689
after like the Yeah,

1082
00:40:14,689 --> 00:40:16,329
I'm not sure, actually, if it

1083
00:40:16,329 --> 00:40:18,669
cares about the orders.
Maybe I'll just try it.

1084
00:40:18,669 --> 00:40:20,869
Maybe I'll call this
like my test table.

1085
00:40:20,869 --> 00:40:23,469
You're saying, like, let me

1086
00:40:23,469 --> 00:40:26,689
do something like this,
just for convenience?

1087
00:40:26,689 --> 00:40:29,229
Yeah, looks like
that's allowed, too.

1088
00:40:29,229 --> 00:40:31,049
I was I normally
see it at the end.

1089
00:40:31,049 --> 00:40:33,290
Apparently, that's just
must just be convention.

1090
00:40:33,290 --> 00:40:35,289
They must allow you to
do other ways as well.

1091
00:40:35,289 --> 00:40:38,349
Yeah, great question. Yeah
the questions people have.

1092
00:40:38,349 --> 00:40:41,569
All right, C. So what I
want to do out here is I

1093
00:40:41,569 --> 00:40:44,129
want this user ID to
refer to the ID up here.

1094
00:40:44,129 --> 00:40:46,329
And so I could do that
using something called a

1095
00:40:46,329 --> 00:40:48,989
four and T. And so I'm going to

1096
00:40:48,989 --> 00:40:52,569
say four and G. And

1097
00:40:52,569 --> 00:40:54,149
then I have to say
what the key data is.

1098
00:40:54,149 --> 00:40:56,969
So it's user ID down here.

1099
00:40:56,969 --> 00:40:59,589
And then I have to say
what it references, right?

1100
00:40:59,589 --> 00:41:01,029
So straight a references.

1101
00:41:01,029 --> 00:41:03,530
And I cant ID because I
might have other tables.

1102
00:41:03,530 --> 00:41:05,969
I have to say users ID.

1103
00:41:05,969 --> 00:41:07,669
The ers users table,

1104
00:41:07,669 --> 00:41:09,189
there's this ID Club, and I

1105
00:41:09,189 --> 00:41:11,349
want to reference that.
I'll create that.

1106
00:41:11,349 --> 00:41:12,910
Now I should have two tables

1107
00:41:12,910 --> 00:41:14,369
up here. So that's looking good.

1108
00:41:14,369 --> 00:41:15,769
I guess I have that
test table, too,

1109
00:41:15,769 --> 00:41:17,709
which is all flighted well.

1110
00:41:17,709 --> 00:41:20,649
Okay. Let's insert
some data in here,

1111
00:41:20,649 --> 00:41:21,889
and I show you how

1112
00:41:21,889 --> 00:41:23,989
these primary and
four keys come into

1113
00:41:23,989 --> 00:41:26,169
play by having some
examples that will break.

1114
00:41:26,169 --> 00:41:29,649
And we'll think about why each
of them break in d, right?

1115
00:41:29,649 --> 00:41:34,169
So to come out here.
And I'm going to say,

1116
00:41:34,169 --> 00:41:36,529
first, I'm going
to insert in two.

1117
00:41:36,529 --> 00:41:38,169
And what we can say is table,

1118
00:41:38,169 --> 00:41:40,530
and what we do it here
is we say the columns,

1119
00:41:40,530 --> 00:41:42,090
and then we say values,

1120
00:41:42,090 --> 00:41:44,689
and then over here, we
have the values, right?

1121
00:41:44,689 --> 00:41:46,949
So I'm going to say,
I want to insert into

1122
00:41:46,949 --> 00:41:50,890
the ID column and the
name column up above.

1123
00:41:50,890 --> 00:41:53,090
What will I do? I want
to insert the values.

1124
00:41:53,090 --> 00:41:59,149
I'll say one and
Tyler. All right.

1125
00:41:59,149 --> 00:42:01,769
Cool. So I'm ready to do that.

1126
00:42:01,769 --> 00:42:05,069
And I run into some
sort of issue here.

1127
00:42:05,069 --> 00:42:07,649
These exceptions are
always pretty bad, right?

1128
00:42:07,649 --> 00:42:09,909
That at the very it it will
actually say something.

1129
00:42:09,909 --> 00:42:13,290
So you have an error
in your syntax.

1130
00:42:13,970 --> 00:42:19,209
Inserted into I ever say
by table day Baby Dot.

1131
00:42:19,209 --> 00:42:20,749
All right. Inserted into table

1132
00:42:20,749 --> 00:42:22,289
that I have to say
the table day, right?

1133
00:42:22,289 --> 00:42:24,649
So I'm a user.

1134
00:42:24,770 --> 00:42:28,029
That I have another issue.
If somebody just sees it,

1135
00:42:28,029 --> 00:42:30,389
feel free to shout out,
otherwise, we'll get there.

1136
00:42:30,389 --> 00:42:34,770
Inserted the table users
ID da, but the values.

1137
00:42:37,010 --> 00:42:44,139
But Oh, it's just Oh, I see.

1138
00:42:44,139 --> 00:42:45,519
You're saying I don't
say table. I just

1139
00:42:45,519 --> 00:42:47,420
say it start two users.

1140
00:42:47,420 --> 00:42:49,739
Alright. Oh, cool. Thank
you. Alright, great.

1141
00:42:49,739 --> 00:42:51,359
So we have a user there.

1142
00:42:51,359 --> 00:42:54,339
Excellent. Thank you
for catching that.

1143
00:42:54,339 --> 00:42:56,559
Let's say I try to
do it again, right?

1144
00:42:56,559 --> 00:42:58,159
If I run the same thing again,

1145
00:42:58,159 --> 00:42:59,479
I'll going an error because I

1146
00:42:59,479 --> 00:43:00,839
have a duplicate entry
for that, right?

1147
00:43:00,839 --> 00:43:04,080
So my primary key is
helping me vd issues.

1148
00:43:04,080 --> 00:43:05,859
I I had another user
with the same ID,

1149
00:43:05,859 --> 00:43:07,359
maybe somehow I might
think that they have

1150
00:43:07,359 --> 00:43:10,259
my bank account or have
access to it, right?

1151
00:43:10,259 --> 00:43:13,199
So maybe I'll just make
a note here, right?

1152
00:43:13,199 --> 00:43:19,079
Primary key Privet
duplicates. Okay?

1153
00:43:19,079 --> 00:43:22,559
That's cool. Let's see
what else we can do.

1154
00:43:22,559 --> 00:43:24,020
Let's create some bak accounts.

1155
00:43:24,020 --> 00:43:26,379
So those are users. Let's create

1156
00:43:26,379 --> 00:43:28,119
some bank accounts out here.

1157
00:43:28,119 --> 00:43:30,139
So insert into accounts.

1158
00:43:30,139 --> 00:43:32,179
These have to have some user ID

1159
00:43:32,179 --> 00:43:34,120
associated with them
and then some name.

1160
00:43:34,120 --> 00:43:36,859
As I'm say this
is bak account A.

1161
00:43:36,859 --> 00:43:39,479
And then what I can do
is I can actually put

1162
00:43:39,479 --> 00:43:40,639
multiple values
in here if I want

1163
00:43:40,639 --> 00:43:42,559
if I want to insert
multiple rows.

1164
00:43:42,559 --> 00:43:44,619
So I'm going to say B,

1165
00:43:44,619 --> 00:43:46,879
and I'll say two here.

1166
00:43:46,879 --> 00:43:49,339
So User one has bak account A.

1167
00:43:49,339 --> 00:43:50,800
User two has bak account

1168
00:43:50,800 --> 00:43:53,939
B. I try to prevent
that as well.

1169
00:43:53,939 --> 00:43:56,399
Let's see what it
says down here.

1170
00:43:56,490 --> 00:44:00,490
Oh, amount doesn't
have a default value.

1171
00:44:00,490 --> 00:44:03,089
Okay, so I have to have
it amount as well.

1172
00:44:03,089 --> 00:44:06,409
So let me see. So let me
put some values in here.

1173
00:44:06,409 --> 00:44:08,350
I'll say the first
account has $10.

1174
00:44:08,350 --> 00:44:10,629
Second account has $100.

1175
00:44:10,629 --> 00:44:14,129
Okay, so more errors.
To does not match.

1176
00:44:14,129 --> 00:44:14,469
Okay.

1177
00:44:14,469 --> 00:44:15,389
I'm trying to get show

1178
00:44:15,389 --> 00:44:16,509
like the error that I
actually care about.

1179
00:44:16,509 --> 00:44:18,649
I'm show you like every
other possible error.

1180
00:44:18,649 --> 00:44:21,369
Alright. Let's hopefully,
this is the error I wanted to

1181
00:44:21,369 --> 00:44:24,209
actually talk about. All right.

1182
00:44:24,209 --> 00:44:26,590
I cannot do it because
there's this contrait.

1183
00:44:26,590 --> 00:44:28,889
I have this four
and F K is a four,

1184
00:44:28,889 --> 00:44:30,590
it is reference to users.

1185
00:44:30,590 --> 00:44:33,149
I do not have a user two.

1186
00:44:33,149 --> 00:44:35,009
So try to help make sure

1187
00:44:35,009 --> 00:44:38,030
our database is consistent.
There's these variates.

1188
00:44:38,030 --> 00:44:40,010
If I have a four and
referencing something,

1189
00:44:40,010 --> 00:44:43,209
it's actually a reference
something. Yeah, right here.

1190
00:44:47,650 --> 00:44:54,509
What's that? Right. Yeah,

1191
00:44:54,509 --> 00:44:55,789
this could be in a
different order,

1192
00:44:55,789 --> 00:44:57,269
that it could match
it over here.

1193
00:44:57,269 --> 00:44:58,669
Which raises the
question, why do I

1194
00:44:58,669 --> 00:44:59,949
even have to specify these?

1195
00:44:59,949 --> 00:45:02,709
Well, I could have some values
that are optional, right?

1196
00:45:02,709 --> 00:45:04,649
Then I could say, I want to

1197
00:45:04,649 --> 00:45:06,909
specify it or I don't
want to specify it.

1198
00:45:06,909 --> 00:45:08,889
All right, I actually
want to insert this.

1199
00:45:08,889 --> 00:45:10,309
I'm going to do what, right?

1200
00:45:10,309 --> 00:45:11,749
And then I could insert that.

1201
00:45:11,749 --> 00:45:13,829
I should have some
good things there.

1202
00:45:13,829 --> 00:45:15,749
Now, let's say I want to
come along and I want

1203
00:45:15,749 --> 00:45:18,089
to delete my user.

1204
00:45:18,089 --> 00:45:28,249
I'm going to say delete from
users where ID equals one.

1205
00:45:28,249 --> 00:45:33,969
Let's try that. Get
another error down here,

1206
00:45:33,969 --> 00:45:36,270
which is, again, it's enforcing
that same constraint.

1207
00:45:36,270 --> 00:45:36,429
Right?

1208
00:45:36,429 --> 00:45:38,549
If I have bake accounts
referring to this user,

1209
00:45:38,549 --> 00:45:40,669
I better not delete that user,

1210
00:45:40,669 --> 00:45:42,430
I would have these
orphan bake accounts

1211
00:45:42,430 --> 00:45:45,329
that are not associated
with anything, right?

1212
00:45:45,329 --> 00:45:49,509
So this would break
consistency as well.

1213
00:45:49,509 --> 00:45:50,990
So these primary for Kezer

1214
00:45:50,990 --> 00:45:52,529
prevent us from making
a lot of kind of

1215
00:45:52,529 --> 00:45:54,189
common mistakes or kind of

1216
00:45:54,189 --> 00:45:56,489
ending up with bad
data in a lot of ways.

1217
00:45:56,489 --> 00:45:58,189
Alright, so this is
all fighted well.

1218
00:45:58,189 --> 00:45:59,409
So I could do things like now,

1219
00:45:59,409 --> 00:46:01,150
I could say, for example,

1220
00:46:01,150 --> 00:46:04,109
let's say I want to do I

1221
00:46:04,109 --> 00:46:05,689
may be looking at
more queries soon,

1222
00:46:05,689 --> 00:46:07,549
but one of the basic
queries you could do is

1223
00:46:07,549 --> 00:46:10,450
you could say select everything.

1224
00:46:11,000 --> 00:46:14,200
From some table, right? I
can say, from accounts,

1225
00:46:14,200 --> 00:46:16,139
for example, that maybe

1226
00:46:16,139 --> 00:46:18,259
I want to convert that
to a less, right?

1227
00:46:18,259 --> 00:46:22,879
More problems, e.
There we go. Alright.

1228
00:46:22,879 --> 00:46:24,659
Great. So I can go
and select that.

1229
00:46:24,659 --> 00:46:26,239
That's all fight,
well, let me show you

1230
00:46:26,239 --> 00:46:28,080
something that is a
little bit confusing.

1231
00:46:28,080 --> 00:46:29,399
I'm gonna come back over here,

1232
00:46:29,399 --> 00:46:32,459
and I'm gonna run that
where was I? Here I was.

1233
00:46:32,459 --> 00:46:33,620
I'm inside of my container.

1234
00:46:33,620 --> 00:46:34,859
I have the same
session over here.

1235
00:46:34,859 --> 00:46:36,359
I'm gonna run that
exact same query

1236
00:46:36,359 --> 00:46:37,840
that just gave me some results.

1237
00:46:37,840 --> 00:46:40,639
I'm run it, and I have to
put us in my call here.

1238
00:46:40,639 --> 00:46:44,399
And somehow I'm not seeing
any results there, right?

1239
00:46:44,399 --> 00:46:47,059
Why is that? Well, databases

1240
00:46:47,059 --> 00:46:49,899
give us these transactional
guarantees, right?

1241
00:46:49,899 --> 00:46:53,279
Like, the one that's in play
here is in isolation, right?

1242
00:46:53,279 --> 00:46:56,795
Isolation means that if I'm
making a bunch of changes,

1243
00:46:56,795 --> 00:46:59,529
Other transactions
or other users

1244
00:46:59,529 --> 00:47:01,489
shouldn't see those changes
until I'm all done.

1245
00:47:01,489 --> 00:47:02,969
They should either
see all or nothing.

1246
00:47:02,969 --> 00:47:06,669
That's the eye or
isolation and acid, right?

1247
00:47:06,669 --> 00:47:07,729
I can see it over here

1248
00:47:07,729 --> 00:47:09,250
because I'm the one
making the changes.

1249
00:47:09,250 --> 00:47:10,209
What I really have to do at

1250
00:47:10,209 --> 00:47:11,769
the very end here
is I have to say,

1251
00:47:11,769 --> 00:47:14,450
I want to commit
all these changes.

1252
00:47:14,450 --> 00:47:16,190
And that means I'm done
with all my changes,

1253
00:47:16,190 --> 00:47:17,840
and they're all going
to become visible.

1254
00:47:17,840 --> 00:47:21,450
At the same time to other users,

1255
00:47:21,450 --> 00:47:22,769
right now, they
can actually go in

1256
00:47:22,769 --> 00:47:24,409
and see all these things, right?

1257
00:47:24,409 --> 00:47:26,470
Sometimes when you're
interacting with the database,

1258
00:47:26,470 --> 00:47:28,210
it'll basically
say, each statement

1259
00:47:28,210 --> 00:47:29,409
is its own transactional.

1260
00:47:29,409 --> 00:47:30,829
It'll automatically
do it for you.

1261
00:47:30,829 --> 00:47:32,649
But if you're trying to do
more complicated things

1262
00:47:32,649 --> 00:47:34,749
where you want to
enforce things like say,

1263
00:47:34,749 --> 00:47:36,069
like, I'm doing a baking rat,

1264
00:47:36,069 --> 00:47:37,710
where I don't want any
account to go negative.

1265
00:47:37,710 --> 00:47:38,969
If you're doing stuff like that,

1266
00:47:38,969 --> 00:47:41,389
then you're a be writing
transactions and thinking about

1267
00:47:41,389 --> 00:47:45,429
transactions all the
time. All right.

1268
00:47:45,429 --> 00:47:49,949
Cool. Any questions so far?

1269
00:47:51,300 --> 00:47:53,439
L et's talk about
how we could get

1270
00:47:53,439 --> 00:47:54,840
a bunch of data
into our database.

1271
00:47:54,840 --> 00:47:55,979
So I mean, one way
is we going to

1272
00:47:55,979 --> 00:47:57,500
do a bunch of insert sits.

1273
00:47:57,500 --> 00:47:59,439
There are some
other ways as well.

1274
00:47:59,439 --> 00:48:01,299
So I'm just ready to
come back here and show

1275
00:48:01,299 --> 00:48:03,839
you this picture
of demos, right?

1276
00:48:03,839 --> 00:48:05,419
So in buy had,

1277
00:48:05,419 --> 00:48:08,139
I created a users and
a bank accounts table,

1278
00:48:08,139 --> 00:48:09,440
I use that for some examples.

1279
00:48:09,440 --> 00:48:11,920
I'm also going to have some
tables related to loads,

1280
00:48:11,920 --> 00:48:13,979
which will actually have
some serious data in them,

1281
00:48:13,979 --> 00:48:17,039
and I'm show how we can
upload all of that.

1282
00:48:17,039 --> 00:48:19,239
So come over here, and I have

1283
00:48:19,239 --> 00:48:23,039
some starter code
again for this.

1284
00:48:23,039 --> 00:48:25,200
And this is show you
how we can insert

1285
00:48:25,200 --> 00:48:29,539
a small table into
the database, right?

1286
00:48:29,539 --> 00:48:35,579
So let me just, Let me
grab this here first.

1287
00:48:36,100 --> 00:48:38,419
Alright. So I'm importing Pad.

1288
00:48:38,419 --> 00:48:40,919
Pads is reading
these CSV files from

1289
00:48:40,919 --> 00:48:43,899
the Internet that are
related to different loads.

1290
00:48:43,899 --> 00:48:45,739
So, for example,
I could have load

1291
00:48:45,739 --> 00:48:47,980
ID one means that the load
was actually created,

1292
00:48:47,980 --> 00:48:50,939
or there's different
ys of rejected.

1293
00:48:50,939 --> 00:48:54,299
And so what I could
do if I paste this d,

1294
00:48:54,299 --> 00:48:57,680
I'm using a pad statement
called two SQL.

1295
00:48:57,680 --> 00:48:59,059
When I do that, I can
say, well, what is

1296
00:48:59,059 --> 00:49:00,560
the table name I want to create?

1297
00:49:00,560 --> 00:49:02,539
What is the database
connection I can use?

1298
00:49:02,539 --> 00:49:04,699
I've been using a database
connection the whole time.

1299
00:49:04,699 --> 00:49:06,719
If there's already a table
there with that name,

1300
00:49:06,719 --> 00:49:08,639
do I want to replace
it? Yes, I do.

1301
00:49:08,639 --> 00:49:11,219
And Index means,
do I want to have

1302
00:49:11,219 --> 00:49:13,899
a column corresponding to
this? And I do not, right?

1303
00:49:13,899 --> 00:49:16,499
ID is really what is doing that?

1304
00:49:16,499 --> 00:49:18,480
I'm ready to do that,
and that actually

1305
00:49:18,480 --> 00:49:20,964
taken in pairs, right?

1306
00:49:20,964 --> 00:49:23,109
I guess in triples, right?

1307
00:49:23,109 --> 00:49:25,270
I read a table and
convert it to SQL.

1308
00:49:25,270 --> 00:49:27,549
I can have pads to
all these Cs forbi

1309
00:49:27,549 --> 00:49:30,109
then commit at the very
end. I'm ready to do that.

1310
00:49:30,109 --> 00:49:32,309
Let's tb over here.

1311
00:49:32,309 --> 00:49:34,350
I'm say show tables.

1312
00:49:34,350 --> 00:49:36,930
And I see it created
all these forbs.

1313
00:49:36,930 --> 00:49:39,650
So I can say select
star from actions,

1314
00:49:39,650 --> 00:49:40,749
and I can see that I was able to

1315
00:49:40,749 --> 00:49:42,329
automatically do this, right?

1316
00:49:42,329 --> 00:49:43,349
So you might be doing stuff like

1317
00:49:43,349 --> 00:49:44,649
this where you write
a little bit of code,

1318
00:49:44,649 --> 00:49:46,109
pulls data from one source,

1319
00:49:46,109 --> 00:49:47,589
dubs it into another
place, so you do

1320
00:49:47,589 --> 00:49:50,069
analysis it. Yeah,
question right here.

1321
00:49:50,150 --> 00:49:52,549
How do decide what
the. So in this case,

1322
00:49:52,549 --> 00:49:54,049
there's no primary key.

1323
00:49:54,049 --> 00:49:55,949
Right. There's no primary key.

1324
00:49:55,949 --> 00:49:59,309
Yep. I could, figure
out and pad this like,

1325
00:49:59,309 --> 00:50:00,489
how do I specify it, right?

1326
00:50:00,489 --> 00:50:02,529
Or there's ways to update
a table and add it later.

1327
00:50:02,529 --> 00:50:04,029
But at least for now,

1328
00:50:04,029 --> 00:50:05,769
there's no primary key.

1329
00:50:05,769 --> 00:50:07,669
Alright, well, so
we'll break there.

1330
00:50:07,669 --> 00:50:09,389
Drick on the mid term,

1331
00:50:09,389 --> 00:50:11,589
and we'll do more by
SQL after the mid term.

1332
00:50:11,589 --> 00:50:13,349
Have a great day.
