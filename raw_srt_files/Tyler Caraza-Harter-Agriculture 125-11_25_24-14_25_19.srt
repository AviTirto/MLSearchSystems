1
00:00:00,000 --> 00:00:02,780
Day. So we're going to continue
talking about the Cloud,

2
00:00:02,780 --> 00:00:04,500
and we'll probably
wrap that up and start

3
00:00:04,500 --> 00:00:06,920
talking a little bit about
big query today as well.

4
00:00:06,920 --> 00:00:08,560
Looking ahead at the schedule,

5
00:00:08,560 --> 00:00:09,799
I'm sure you're all
aware that we have

6
00:00:09,799 --> 00:00:13,140
a Thanksgiving break
coming up as well.

7
00:00:13,140 --> 00:00:14,980
I am, at least for
now planning to still

8
00:00:14,980 --> 00:00:16,880
do a lecture on Wednesday.

9
00:00:16,880 --> 00:00:19,059
But I know a lot of
people will be traveling.

10
00:00:19,059 --> 00:00:20,959
So if I do do a top hat
or anything like that,

11
00:00:20,959 --> 00:00:22,400
I'll just leave it
up for a while,

12
00:00:22,400 --> 00:00:24,099
or maybe I'll just
skip a top hat.

13
00:00:24,099 --> 00:00:27,715
So I won't be offended if
people are traveling that day.

14
00:00:27,715 --> 00:00:30,470
The other thing is
that a lot of TAs,

15
00:00:30,470 --> 00:00:32,249
matters are also traveling,

16
00:00:32,249 --> 00:00:33,829
and so rather than trying to

17
00:00:33,829 --> 00:00:35,449
mess up our whole schedule
and revert it back,

18
00:00:35,449 --> 00:00:37,149
we just have a
separate schedule,

19
00:00:37,149 --> 00:00:39,829
really, actually starting
today for Thanksgiving week.

20
00:00:39,829 --> 00:00:41,089
So make sure you're
looking at the right

21
00:00:41,089 --> 00:00:43,610
schedule during this week.

22
00:00:43,610 --> 00:00:45,929
I think that we you know,

23
00:00:45,929 --> 00:00:47,689
a lot of these people
are traveling as well,

24
00:00:47,689 --> 00:00:48,929
so they change,
like, whether it's

25
00:00:48,929 --> 00:00:50,589
on Zoom or in person as well.

26
00:00:50,589 --> 00:00:51,949
There's probably more zoom, so

27
00:00:51,949 --> 00:00:53,849
hopefully that will
help all of you,

28
00:00:53,849 --> 00:00:57,830
you know, if you're needing
some help from home.

29
00:00:57,830 --> 00:01:01,009
And and then like Wednesday
through or I'm sorry,

30
00:01:01,009 --> 00:01:04,450
Thursday through Sunday,
there are no office hours.

31
00:01:04,450 --> 00:01:09,170
Cool. So You know,
that's time me up.

32
00:01:09,170 --> 00:01:11,030
Hopefully everybody
has a good break.

33
00:01:11,030 --> 00:01:13,909
I want to do some
quick top hats before

34
00:01:13,909 --> 00:01:18,529
we just to review where what
we've been lucky at so far.

35
00:01:18,529 --> 00:01:20,410
This one has asked you about

36
00:01:20,410 --> 00:01:21,609
what kind of hosts we deployed

37
00:01:21,609 --> 00:01:25,070
our virtual machines
this semester.

38
00:02:42,260 --> 00:02:44,519
Alright, so most
people are saying

39
00:02:44,519 --> 00:02:46,200
multi tenet, which is tractory,

40
00:02:46,200 --> 00:02:47,859
remember that multi tenant
means that you have

41
00:02:47,859 --> 00:02:49,519
one physical machine that's

42
00:02:49,519 --> 00:02:51,280
shared across
different customers.

43
00:02:51,280 --> 00:02:53,159
Those customers
are called tenets.

44
00:02:53,159 --> 00:02:55,340
And that's the usual case.

45
00:02:55,340 --> 00:02:56,820
If you're willing to pay a lot,

46
00:02:56,820 --> 00:02:58,380
and you're very
concerned about privacy,

47
00:02:58,380 --> 00:03:00,199
that maybe you could pay
like thousands of dollar

48
00:03:00,199 --> 00:03:02,600
a month to have a
sole tenet host.

49
00:03:02,600 --> 00:03:08,019
Cool. Let me bring
up the next one.

50
00:03:08,140 --> 00:03:14,460
This next one is
about the Spark stuff

51
00:03:14,460 --> 00:03:15,140
that we're looking at

52
00:03:15,140 --> 00:03:16,899
the spark streaming stuff
with the water mark.

53
00:03:16,899 --> 00:03:19,099
Let me pop this one up.

54
00:03:21,060 --> 00:03:23,300
Alright.

55
00:04:25,050 --> 00:04:27,930
Alright, so most people
are saying 5:00 P.M.

56
00:04:27,930 --> 00:04:30,250
Which is correct. So the
time window starts at 2:00

57
00:04:30,250 --> 00:04:33,509
P.M. We're grouping
by two hour windows.

58
00:04:33,509 --> 00:04:37,170
So the end of this
time window is at 4:00

59
00:04:37,170 --> 00:04:38,950
P.M. And so I'm

60
00:04:38,950 --> 00:04:41,289
here to imagine at the
very end of this, right?

61
00:04:41,289 --> 00:04:45,130
We have a row for
3:59 P.M. And so

62
00:04:45,130 --> 00:04:46,630
what is the latest
possible that at

63
00:04:46,630 --> 00:04:49,230
3:59 row could come in?

64
00:04:49,230 --> 00:04:51,770
Well, based on the
water mark we have,

65
00:04:51,770 --> 00:04:54,070
we're assuming it can be
delayed by most 1 hour.

66
00:04:54,070 --> 00:04:56,450
So instead of 359, be 459.

67
00:04:56,450 --> 00:04:57,849
That's the most
going to be delayed.

68
00:04:57,849 --> 00:04:59,689
At 5:00, well,
there's going to be

69
00:04:59,689 --> 00:05:01,969
no more data coming
in for this window.

70
00:05:01,969 --> 00:05:04,609
Do people have any questions
about the water marks?

71
00:05:04,930 --> 00:05:07,510
This is a strategy that
was very useful for

72
00:05:07,510 --> 00:05:09,009
grouped aggregates
with streaming

73
00:05:09,009 --> 00:05:11,109
and also the stream
stream joint.

74
00:05:11,109 --> 00:05:14,090
Alright, cool. So we're
going to head back here.

75
00:05:16,850 --> 00:05:20,110
And we were talking about
different resources

76
00:05:20,110 --> 00:05:22,150
last time that you can
read of the Cloud.

77
00:05:22,150 --> 00:05:24,849
We already talked about
compute memory and storage.

78
00:05:24,849 --> 00:05:26,329
Now we're talking
about networking.

79
00:05:26,329 --> 00:05:27,589
So what we're really interested

80
00:05:27,589 --> 00:05:29,370
in with thinking about
what you can pay

81
00:05:29,370 --> 00:05:32,650
for networking is is the
topology of the Cloud.

82
00:05:32,650 --> 00:05:34,450
So most cloud providers
will generally

83
00:05:34,450 --> 00:05:36,930
break up the world into Cdiates,

84
00:05:36,930 --> 00:05:38,909
those cadates t to roughly

85
00:05:38,909 --> 00:05:41,670
resemble the geographic
candidates we're familiar with.

86
00:05:41,670 --> 00:05:43,699
But of course, from the network,

87
00:05:43,699 --> 00:05:46,119
you're really interested in
is network connectivity.

88
00:05:46,119 --> 00:05:48,700
So sometimes they fudge it a
little bit, but that's fine.

89
00:05:48,700 --> 00:05:51,059
They have kind of
big regions, penits.

90
00:05:51,059 --> 00:05:54,140
They'll have more localized
areas called regions.

91
00:05:54,140 --> 00:05:56,320
The region might be
a single building or

92
00:05:56,320 --> 00:05:59,380
maybe like a few buildings
of data centers, right?

93
00:05:59,380 --> 00:06:02,259
Within one of these regions,

94
00:06:02,259 --> 00:06:05,379
they'll have what they
call availability zones.

95
00:06:05,379 --> 00:06:08,440
I actually went on a tour
of a data center once.

96
00:06:08,440 --> 00:06:10,019
So I got to see some
availability zones.

97
00:06:10,019 --> 00:06:11,600
We were kind of,
like in the big,

98
00:06:11,600 --> 00:06:12,740
like warehouse room, and

99
00:06:12,740 --> 00:06:14,220
they had different
shipping containors,

100
00:06:14,220 --> 00:06:17,180
each of which had quite
a few servers of them,

101
00:06:17,180 --> 00:06:18,260
but each shipping container had

102
00:06:18,260 --> 00:06:20,139
its own power
supply and network.

103
00:06:20,139 --> 00:06:21,600
And so it's like you
could look at it, Oh,

104
00:06:21,600 --> 00:06:23,280
that shipping container,
is this availability

105
00:06:23,280 --> 00:06:24,540
zone if that one.

106
00:06:24,540 --> 00:06:27,000
So you can already imagine,
like if there was a tornado,

107
00:06:27,000 --> 00:06:28,720
like, probably all those
availability zones

108
00:06:28,720 --> 00:06:30,359
will get destroyed together.

109
00:06:30,359 --> 00:06:34,560
But things like localized power
outage or network issues,

110
00:06:34,560 --> 00:06:36,719
odds are that only
one availability zone

111
00:06:36,719 --> 00:06:39,020
will go down at a time.

112
00:06:39,980 --> 00:06:42,359
If you're to play
the stuff we learned

113
00:06:42,359 --> 00:06:43,880
about this semester,
this is very relevant.

114
00:06:43,880 --> 00:06:46,879
So, for example, when we
learned about Sandra,

115
00:06:46,879 --> 00:06:49,280
we talked about how
there's a token rig.

116
00:06:49,280 --> 00:06:51,000
And you walk the token
rig to figure out

117
00:06:51,000 --> 00:06:54,660
which vetoes you want to assign
to a given piece of data.

118
00:06:54,660 --> 00:06:56,419
We talked about how
sometimes you skep, right?

119
00:06:56,419 --> 00:06:57,719
If you have two
vetoes on the same

120
00:06:57,719 --> 00:06:59,880
physical machine,
you skip, right?

121
00:06:59,880 --> 00:07:01,080
Be that machine dies,

122
00:07:01,080 --> 00:07:02,639
you lose both your Vendes.

123
00:07:02,639 --> 00:07:04,200
And so you could configure it,

124
00:07:04,200 --> 00:07:06,660
so it will skip in more
complicated situations.

125
00:07:06,660 --> 00:07:08,739
Maybe you want to skip
so that you don't

126
00:07:08,739 --> 00:07:11,139
have two Vendes in the
same availability zone,

127
00:07:11,139 --> 00:07:12,559
or maybe you want to
make skipping rules,

128
00:07:12,559 --> 00:07:14,620
so such that you
get your data at

129
00:07:14,620 --> 00:07:17,160
at least two different
AWS regions, right?

130
00:07:17,160 --> 00:07:18,620
So you want to kind
of think about

131
00:07:18,620 --> 00:07:20,160
the plow topology when you're

132
00:07:20,160 --> 00:07:21,480
deploying these all your systems

133
00:07:21,480 --> 00:07:23,999
and try to make
them fall tolerant.

134
00:07:24,240 --> 00:07:26,899
So when we're talking
about network,

135
00:07:26,899 --> 00:07:28,180
we can talk about either data

136
00:07:28,180 --> 00:07:30,060
coming to a node or coming out.

137
00:07:30,060 --> 00:07:31,620
And the words for
those are going to be

138
00:07:31,620 --> 00:07:34,120
dress and grass respectively.

139
00:07:34,120 --> 00:07:36,399
And Cloud providers
will generally

140
00:07:36,399 --> 00:07:39,120
bill you for how many
bytes you're moving,

141
00:07:39,120 --> 00:07:40,319
and they'll bill it differently

142
00:07:40,319 --> 00:07:42,640
depending on which
direction it's going in.

143
00:07:42,640 --> 00:07:44,959
For res, again,

144
00:07:44,959 --> 00:07:46,640
different cloud providers
do whatever they want.

145
00:07:46,640 --> 00:07:48,080
But for NDS, what
I've seen is that

146
00:07:48,080 --> 00:07:49,580
they often will
do that for free.

147
00:07:49,580 --> 00:07:50,480
And that makes sense because

148
00:07:50,480 --> 00:07:51,680
they want you to
loan your data in

149
00:07:51,680 --> 00:07:53,919
the system because once
your data is in the system,

150
00:07:53,919 --> 00:07:56,240
then you start paying them
for different services.

151
00:07:56,240 --> 00:07:57,540
They'll usually make that free.

152
00:07:57,540 --> 00:07:59,520
And then Egress is
more complicated.

153
00:07:59,520 --> 00:08:00,640
They'll usually
charge you for that.

154
00:08:00,640 --> 00:08:03,599
They don't want you to
leave. And in general,

155
00:08:03,599 --> 00:08:05,020
they don't want to
subsidize it, right?

156
00:08:05,020 --> 00:08:05,960
There's a cost to them,

157
00:08:05,960 --> 00:08:07,460
and they're passing
that on to you.

158
00:08:07,460 --> 00:08:10,259
And so the rate is actually
quite complicated, right?

159
00:08:10,259 --> 00:08:11,640
If you like go look
it up, you know,

160
00:08:11,640 --> 00:08:13,800
there's like tables and
tables of information.

161
00:08:13,800 --> 00:08:15,800
And I'm just trying
to give you some,

162
00:08:15,800 --> 00:08:20,700
very coarse overview of what
Egress fees might look like.

163
00:08:20,700 --> 00:08:23,020
They'll often break it down
into a few different levels.

164
00:08:23,020 --> 00:08:25,040
They might, for example, say,

165
00:08:25,040 --> 00:08:26,600
what does it cost if it's in

166
00:08:26,600 --> 00:08:28,500
the same availability
zone, right?

167
00:08:28,500 --> 00:08:30,679
That whole availability zone
shares some networking,

168
00:08:30,679 --> 00:08:32,379
so it's usually pretty
cheap for them.

169
00:08:32,379 --> 00:08:34,539
And so, I looked up some prices

170
00:08:34,539 --> 00:08:38,489
for the Google Cloud last year,

171
00:08:38,489 --> 00:08:41,530
this was the Asian continent,

172
00:08:41,530 --> 00:08:44,489
the same availability zone
there was free, right?

173
00:08:44,489 --> 00:08:46,749
So that's cool. The
same region, right?

174
00:08:46,749 --> 00:08:48,589
So again, this might
be the same building,

175
00:08:48,589 --> 00:08:50,649
but different areas
of the building,

176
00:08:50,649 --> 00:08:54,069
in this case, was one
sets per gigabyte.

177
00:08:54,069 --> 00:08:57,089
The same continent, so anywhere
in Asia was five sets.

178
00:08:57,089 --> 00:08:59,649
And then finally, if
you're exiting the Cloud,

179
00:08:59,649 --> 00:09:02,210
that could either be
to other data centers

180
00:09:02,210 --> 00:09:03,709
in Asia or it could just be,

181
00:09:03,709 --> 00:09:07,739
you know, to different
candidates, right?

182
00:09:07,739 --> 00:09:10,020
That was 8.5 gigabytes.

183
00:09:10,020 --> 00:09:11,559
You kind of get a
sense like, Well,

184
00:09:11,559 --> 00:09:13,080
how far are you
moving your data?

185
00:09:13,080 --> 00:09:14,799
What does it cost?
And of course,

186
00:09:14,799 --> 00:09:16,639
we're looking at something
like Casandra, right?

187
00:09:16,639 --> 00:09:18,200
We're trying to
spread out our data

188
00:09:18,200 --> 00:09:20,059
because we don't want to,

189
00:09:20,059 --> 00:09:23,000
you know, fail if
availability zone

190
00:09:23,000 --> 00:09:24,279
grows out or
something like that.

191
00:09:24,279 --> 00:09:26,439
On the other hand, that's
really costs so more when

192
00:09:26,439 --> 00:09:26,939
we're talking about

193
00:09:26,939 --> 00:09:28,619
the network communication
between our nodes.

194
00:09:28,619 --> 00:09:30,139
So you can imagine if I had like

195
00:09:30,139 --> 00:09:33,040
different data nodes for
HDFS in different places,

196
00:09:33,040 --> 00:09:34,500
right out it was
pipelining by data,

197
00:09:34,500 --> 00:09:36,160
well, I would have
an egress fee there.

198
00:09:36,160 --> 00:09:37,440
Was if it was localized,

199
00:09:37,440 --> 00:09:40,069
I might not All right.

200
00:09:40,069 --> 00:09:42,569
We'll just strip that for now.

201
00:09:43,090 --> 00:09:45,569
Great. Any questions about

202
00:09:45,569 --> 00:09:48,310
the main resources you
can rent in the Cloud?

203
00:09:48,310 --> 00:09:51,450
Alright, let's talk
about billing models.

204
00:09:51,450 --> 00:09:54,710
Again, like the billing
models are very complicated.

205
00:09:54,710 --> 00:09:55,289
There's lots of

206
00:09:55,289 --> 00:09:57,289
different services they
build differently.

207
00:09:57,289 --> 00:09:59,630
But I see some common
patterns of them,

208
00:09:59,630 --> 00:10:00,829
and I'm going to
show you a pattern

209
00:10:00,829 --> 00:10:04,050
that applies for one of my
favorite Cloud services,

210
00:10:04,050 --> 00:10:05,570
which is AW SaMD.

211
00:10:05,570 --> 00:10:07,890
In this case, what
they're doing is they're

212
00:10:07,890 --> 00:10:10,150
charging you for when
your functions run.

213
00:10:10,150 --> 00:10:12,130
And they're basing it on
how long your functions

214
00:10:12,130 --> 00:10:14,365
are running and how much
memory you allocate for them.

215
00:10:14,365 --> 00:10:15,680
And the first thing they're

216
00:10:15,680 --> 00:10:17,139
going to talk about
is a free air.

217
00:10:17,139 --> 00:10:18,459
So this case, the
free tear, you get

218
00:10:18,459 --> 00:10:21,720
1 million free function
invocations per month,

219
00:10:21,720 --> 00:10:24,899
and then you get 400,000
gigabytes seconds, right?

220
00:10:24,899 --> 00:10:26,559
There usually sub
kind of free tear.

221
00:10:26,559 --> 00:10:27,879
And then after that,

222
00:10:27,879 --> 00:10:29,739
the pricing depends
on your volume.

223
00:10:29,739 --> 00:10:31,240
Lots of things in
life, if you buy

224
00:10:31,240 --> 00:10:32,500
more, you get a cheaper rate.

225
00:10:32,500 --> 00:10:34,359
And so the plot looks
something like this, right?

226
00:10:34,359 --> 00:10:37,260
If I have x axis, a total usage,

227
00:10:37,260 --> 00:10:39,835
the Y axis would
be a unit price.

228
00:10:39,835 --> 00:10:41,509
It's what it starts at zero,

229
00:10:41,509 --> 00:10:42,610
and then it drops
up to the peak,

230
00:10:42,610 --> 00:10:44,849
and then it kind of
drops down as you go.

231
00:10:44,849 --> 00:10:46,509
And my recommendation is

232
00:10:46,509 --> 00:10:48,489
that whenever you're doing
something new, like,

233
00:10:48,489 --> 00:10:50,470
do a back envelope
calculation, say, Well,

234
00:10:50,470 --> 00:10:52,489
if we have so many users
and we're kind of, like,

235
00:10:52,489 --> 00:10:54,869
just beyond the free
tier, what will we pay?

236
00:10:54,869 --> 00:10:55,909
Sometimes I just people

237
00:10:55,909 --> 00:10:57,049
be a little bit
careless about that.

238
00:10:57,049 --> 00:10:58,190
They'll just try build

239
00:10:58,190 --> 00:10:59,709
their application and
run it a bit and like,

240
00:10:59,709 --> 00:11:01,150
Hey, our cloud bills are cheap,

241
00:11:01,150 --> 00:11:02,949
and we have 500 users.

242
00:11:02,949 --> 00:11:04,550
We have 5,000 users,

243
00:11:04,550 --> 00:11:06,609
it'll still be cheap. That
might not be true, right?

244
00:11:06,609 --> 00:11:09,550
You might be mostly
in that free tier.

245
00:11:10,720 --> 00:11:13,079
Now, if you think
about all of this

246
00:11:13,079 --> 00:11:14,800
from the cloud
provider's perspective,

247
00:11:14,800 --> 00:11:16,899
they bought a bunch
of machines, right?

248
00:11:16,899 --> 00:11:18,300
There these data seers, and they

249
00:11:18,300 --> 00:11:20,100
can't quickly add
add more machines.

250
00:11:20,100 --> 00:11:20,939
They can't do it like within

251
00:11:20,939 --> 00:11:22,280
the next hour if they wanted to.

252
00:11:22,280 --> 00:11:24,079
So they have at any
given point in time,

253
00:11:24,079 --> 00:11:26,119
this fixed physical capacity,

254
00:11:26,119 --> 00:11:29,319
and they're trying to sell
as much of that as they can.

255
00:11:29,319 --> 00:11:31,199
Now, from the customer side,

256
00:11:31,199 --> 00:11:33,079
it's kind of natural that
there might be times of

257
00:11:33,079 --> 00:11:35,659
day when there's more
demand than others, right?

258
00:11:35,659 --> 00:11:38,170
I if you're running
some kind of website,

259
00:11:38,170 --> 00:11:40,219
Maybe it's busier during

260
00:11:40,219 --> 00:11:42,979
times when people are
awake locally, right?

261
00:11:42,979 --> 00:11:45,179
And so I don't know, I'm
pre this a simplification,

262
00:11:45,179 --> 00:11:46,299
but maybe by the time of day,

263
00:11:46,299 --> 00:11:47,540
there's some kind of day's peak,

264
00:11:47,540 --> 00:11:49,579
and maybe at night and evening,

265
00:11:49,579 --> 00:11:52,139
people are running as many
virtual machines, right?

266
00:11:52,139 --> 00:11:53,360
And so any kind of gap

267
00:11:53,360 --> 00:11:54,999
between that physical
capacity they have

268
00:11:54,999 --> 00:11:56,479
and what they're
actually able to

269
00:11:56,479 --> 00:11:58,180
sell people is
waste and capacity.

270
00:11:58,180 --> 00:12:01,640
That represents lost
potential revenue, right?

271
00:12:01,640 --> 00:12:03,079
So cloud providers
want to create

272
00:12:03,079 --> 00:12:05,200
incentives for A for you to

273
00:12:05,200 --> 00:12:06,659
run less at the peak times and

274
00:12:06,659 --> 00:12:09,160
then B to actually run some
stuff at the low times.

275
00:12:09,160 --> 00:12:11,839
And so sometimes
what they'll do for

276
00:12:11,839 --> 00:12:13,219
virtual machines is they'll have

277
00:12:13,219 --> 00:12:15,540
different kind of
complimentary billing models.

278
00:12:15,540 --> 00:12:17,580
They have the odd demand model,

279
00:12:17,580 --> 00:12:19,279
which basically,
if you say, Hey,

280
00:12:19,279 --> 00:12:21,019
I want to start a VM, they
just start it for you,

281
00:12:21,019 --> 00:12:22,700
and they keep it
running indefinitely,

282
00:12:22,700 --> 00:12:24,679
assuming they have capacity.

283
00:12:24,679 --> 00:12:26,599
And usually there will
be a higher price for

284
00:12:26,599 --> 00:12:28,799
that because you just say
you get it when you want it.

285
00:12:28,799 --> 00:12:30,659
In contrast, you can also rent

286
00:12:30,659 --> 00:12:33,400
the same VMs as what
are called spot cans.

287
00:12:33,400 --> 00:12:34,699
And with spot sizes,

288
00:12:34,699 --> 00:12:36,859
you can specify well, what
you're willing to pay for it.

289
00:12:36,859 --> 00:12:38,360
And it's almost like a market

290
00:12:38,360 --> 00:12:39,599
price it'll vary
throughout the day.

291
00:12:39,599 --> 00:12:42,599
If there's a bad, it's a
higher price, load of bad,

292
00:12:42,599 --> 00:12:44,659
it'll be a lower
price, and then that

293
00:12:44,659 --> 00:12:45,819
will kind of incentivize

294
00:12:45,819 --> 00:12:47,099
you to run when
you don't have to.

295
00:12:47,099 --> 00:12:48,000
For a lot of stuff,

296
00:12:48,000 --> 00:12:49,080
we have these batch

297
00:12:49,080 --> 00:12:50,660
computing jobs that
run in the background,

298
00:12:50,660 --> 00:12:52,299
maybe it is like some
kind of big computation

299
00:12:52,299 --> 00:12:54,139
that runs what's the day
to generate some report,

300
00:12:54,139 --> 00:12:56,239
and maybe you're not
picky about when it runs,

301
00:12:56,239 --> 00:12:58,259
there's an opportunity
there for you to pay pay

302
00:12:58,259 --> 00:13:00,640
less if you're a
little bit flexible.

303
00:13:00,640 --> 00:13:02,820
Now, it's possible they could
also start running you,

304
00:13:02,820 --> 00:13:04,199
and then all of a sudden
there's more to bad,

305
00:13:04,199 --> 00:13:05,819
and so they could do what I'm

306
00:13:05,819 --> 00:13:07,320
call prep Preet means

307
00:13:07,320 --> 00:13:08,820
that they take away
those resources.

308
00:13:08,820 --> 00:13:11,320
So maybe they kill your VM
in the middle of its job,

309
00:13:11,320 --> 00:13:12,560
and then you have to
start again later

310
00:13:12,560 --> 00:13:14,179
and try to pick up
where you left off.

311
00:13:14,179 --> 00:13:16,659
So if you're re to be
a little flexible,

312
00:13:16,659 --> 00:13:20,139
you're willing to
be interrupted,

313
00:13:20,139 --> 00:13:23,639
then you could potentially
save somebody there.

314
00:13:23,890 --> 00:13:26,489
I kind of want to talk a
little bit more broadly

315
00:13:26,489 --> 00:13:28,970
about different ways in
which they'll charge you,

316
00:13:28,970 --> 00:13:30,130
right if they're
charging you for

317
00:13:30,130 --> 00:13:33,190
reserved resources or
what you actually use.

318
00:13:33,190 --> 00:13:34,929
The VMs that we rented

319
00:13:34,929 --> 00:13:36,329
the semester was
really a fixed rate.

320
00:13:36,329 --> 00:13:37,790
Like when you created,
it'll tell you, well,

321
00:13:37,790 --> 00:13:40,370
you're going to pay
$25 a month flat.

322
00:13:40,370 --> 00:13:41,710
And it doesn't matter
whether you're

323
00:13:41,710 --> 00:13:43,330
using it or not, right?
I control my VM.

324
00:13:43,330 --> 00:13:45,289
And if I say H top, you know,

325
00:13:45,289 --> 00:13:46,909
I'm not quite using
all my memory,

326
00:13:46,909 --> 00:13:48,870
and here I'm using
almost no CPU.

327
00:13:48,870 --> 00:13:50,650
And that's probably
most of the case.

328
00:13:50,650 --> 00:13:52,210
I'm just trying to
paying this flat rate

329
00:13:52,210 --> 00:13:54,430
for something I'm
not using that much.

330
00:13:54,430 --> 00:13:57,229
So that's not it's a little
wasteful. The flip side.

331
00:13:57,229 --> 00:13:58,609
I'm making very predictable

332
00:13:58,609 --> 00:13:59,989
bills if I just
have some kind of

333
00:13:59,989 --> 00:14:01,870
flax flat billing system

334
00:14:01,870 --> 00:14:04,330
like I get for virtual
machine instances.

335
00:14:04,330 --> 00:14:06,089
There's also different
cloud services out

336
00:14:06,089 --> 00:14:08,010
there that are what
we call auto scaling.

337
00:14:08,010 --> 00:14:09,969
In that case, they will
try to look and see,

338
00:14:09,969 --> 00:14:11,330
like, Well, how busy
is your service,

339
00:14:11,330 --> 00:14:13,909
and maybe if you
have, for example,

340
00:14:13,909 --> 00:14:15,370
think about elastic beads stock.

341
00:14:15,370 --> 00:14:16,790
They have these little
containers running.

342
00:14:16,790 --> 00:14:18,689
If I have, three running,
and it's under heavy load,

343
00:14:18,689 --> 00:14:19,729
maybe they'll
automatically start

344
00:14:19,729 --> 00:14:21,149
up a fourth one for you.

345
00:14:21,149 --> 00:14:23,949
If load drops, they won't shut
it down right away because

346
00:14:23,949 --> 00:14:26,710
there's kind of a fixed
cost to start it again.

347
00:14:26,710 --> 00:14:28,950
But over time if load
is light load is light,

348
00:14:28,950 --> 00:14:30,330
they might shut some down again.

349
00:14:30,330 --> 00:14:31,810
That would be an
auto scaled service.

350
00:14:31,810 --> 00:14:34,145
There's a bunch of auto
scaled services out there.

351
00:14:34,145 --> 00:14:36,300
It doesn't perfectly
match your usage,

352
00:14:36,300 --> 00:14:37,619
but it's a little
bit better than,

353
00:14:37,619 --> 00:14:39,960
you know, some kind of
fixed billing approach.

354
00:14:39,960 --> 00:14:42,339
A lot of these things
cannot scale down to

355
00:14:42,339 --> 00:14:44,660
zero because it takes some
time to start up again,

356
00:14:44,660 --> 00:14:46,340
and they don't want to
be kind of caught flat

357
00:14:46,340 --> 00:14:48,539
footed when it's time
to I don't know,

358
00:14:48,539 --> 00:14:50,160
serve some web
requests or whatever.

359
00:14:50,160 --> 00:14:53,199
So there's usually kind of
a low fixed rate you pay,

360
00:14:53,199 --> 00:14:55,420
and then you pay more when
load is higher, right?

361
00:14:55,420 --> 00:14:56,779
Lots of services like that.

362
00:14:56,779 --> 00:14:58,219
And then finally, of

363
00:14:58,219 --> 00:14:59,659
the state of the art
is that they have

364
00:14:59,659 --> 00:15:03,159
different pay as you
go, billing models now.

365
00:15:03,159 --> 00:15:04,399
In that case, you're
just paying for

366
00:15:04,399 --> 00:15:05,749
what you're actually using.

367
00:15:05,749 --> 00:15:07,789
So, for example, with AWS abd,

368
00:15:07,789 --> 00:15:09,190
when you call a function,

369
00:15:09,190 --> 00:15:11,010
you start paying with
the function returns,

370
00:15:11,010 --> 00:15:12,549
then you stop paying, right?

371
00:15:12,549 --> 00:15:14,850
And I try to be the
trend overtime, right.

372
00:15:14,850 --> 00:15:17,189
Bill models tend to be
fighter grade and kind of

373
00:15:17,189 --> 00:15:19,989
more closely tailored to
what you're actually using.

374
00:15:19,989 --> 00:15:22,269
And in big query, try to
have an option like that,

375
00:15:22,269 --> 00:15:23,849
where it's just like paying
for what we're actually

376
00:15:23,849 --> 00:15:26,890
using instead of just
some kind of fixed rate.

377
00:15:26,890 --> 00:15:28,929
Alright, people have
any questions about

378
00:15:28,929 --> 00:15:33,039
Bill models? All right.

379
00:15:33,039 --> 00:15:37,079
C. Let's talk about platforms.

380
00:15:37,079 --> 00:15:38,059
What I want to do is I want to

381
00:15:38,059 --> 00:15:39,280
look at the different
things we've learned

382
00:15:39,280 --> 00:15:40,959
this semester and then see what

383
00:15:40,959 --> 00:15:42,519
is the state of the
art in the cloud.

384
00:15:42,519 --> 00:15:43,400
So let's just review

385
00:15:43,400 --> 00:15:45,439
this history and that
we've seen before.

386
00:15:45,439 --> 00:15:47,799
Google wrote these
three famous papers

387
00:15:47,799 --> 00:15:49,079
that have inspired
a lot of work,

388
00:15:49,079 --> 00:15:52,379
actually, they were
Google File System Map

389
00:15:52,379 --> 00:15:54,319
reduce and Big Table, right?

390
00:15:54,319 --> 00:15:56,369
And core idea of these is

391
00:15:56,369 --> 00:15:58,690
that you could just run on
cheap commodity hardware

392
00:15:58,690 --> 00:16:00,529
that's not very reliable because

393
00:16:00,529 --> 00:16:02,070
reliability should be built

394
00:16:02,070 --> 00:16:03,570
into the software
out of the hardware.

395
00:16:03,570 --> 00:16:04,990
If you have thousands
of machines,

396
00:16:04,990 --> 00:16:06,550
even the most reliable hardware,

397
00:16:06,550 --> 00:16:08,369
was going to have
some failures, right?

398
00:16:08,369 --> 00:16:10,950
So they built a distributed
file system GFS.

399
00:16:10,950 --> 00:16:13,530
Google File system
across lots of machines.

400
00:16:13,530 --> 00:16:15,949
They had Map reduced for doing
analytics on top of that.

401
00:16:15,949 --> 00:16:18,010
And then they had
this database called

402
00:16:18,010 --> 00:16:20,469
Big Table built on
top of GFS as well.

403
00:16:20,469 --> 00:16:21,769
And we've talked about

404
00:16:21,769 --> 00:16:23,609
the open source of
equivalents, right?

405
00:16:23,609 --> 00:16:26,830
Instead of the Google File
system, we have HDFS.

406
00:16:26,830 --> 00:16:29,589
We have an implementation
of Map reduce.

407
00:16:29,589 --> 00:16:31,935
And then instead of Big
Table, we have H base.

408
00:16:31,935 --> 00:16:33,800
And so we've seen
that there's already

409
00:16:33,800 --> 00:16:35,919
some different systems on
the open source side, like,

410
00:16:35,919 --> 00:16:37,940
you know, after this, like,
Spark came on the sed,

411
00:16:37,940 --> 00:16:40,220
for example, these systems
have been evolving.

412
00:16:40,220 --> 00:16:41,420
And things have actually been

413
00:16:41,420 --> 00:16:43,499
evolving like on the
commercial side too.

414
00:16:43,499 --> 00:16:45,060
So we're going to go back
and kind of look at,

415
00:16:45,060 --> 00:16:46,679
well, what is Google
doing now, right?

416
00:16:46,679 --> 00:16:47,940
They don't publish
everything that

417
00:16:47,940 --> 00:16:49,459
they're doing, but they
have published sub.

418
00:16:49,459 --> 00:16:50,680
And so we can see, well,

419
00:16:50,680 --> 00:16:52,100
how are things
evolving and what are

420
00:16:52,100 --> 00:16:53,560
the current cloud services,

421
00:16:53,560 --> 00:16:55,139
and how do they kind of fit

422
00:16:55,139 --> 00:16:58,919
into these three systems
that we've seen earlier on.

423
00:16:59,090 --> 00:17:01,689
So the way I do this outline

424
00:17:01,689 --> 00:17:02,929
is maybe a little bit different.

425
00:17:02,929 --> 00:17:04,310
But what I'm to
do is I'm to show

426
00:17:04,310 --> 00:17:06,390
the four major systems we
learned this semester,

427
00:17:06,390 --> 00:17:08,289
show you one
possible way you can

428
00:17:08,289 --> 00:17:10,369
imagine using them
together at the same time.

429
00:17:10,369 --> 00:17:12,029
And I'll go through
and see, like, Well,

430
00:17:12,029 --> 00:17:14,969
how might we use a
Cloud service to

431
00:17:14,969 --> 00:17:16,289
fit in this picture instead of

432
00:17:16,289 --> 00:17:18,270
having these particular systems.

433
00:17:18,270 --> 00:17:19,750
So here I have a
Hadoop file system,

434
00:17:19,750 --> 00:17:21,169
running out a bunch
of data nodes.

435
00:17:21,169 --> 00:17:23,049
I imagine have some
park files in it,

436
00:17:23,049 --> 00:17:25,149
and so Spark is running
on top of that.

437
00:17:25,149 --> 00:17:28,889
Where do those Spark files or
those park files come from?

438
00:17:28,889 --> 00:17:31,430
Maybe there's a consumer
reading from Akoka Stream,

439
00:17:31,430 --> 00:17:32,989
and it's taking
those messages and

440
00:17:32,989 --> 00:17:35,479
putting them in Park files.

441
00:17:35,479 --> 00:17:38,990
Where are those messages
coming from to Kafka?

442
00:17:38,990 --> 00:17:40,129
Well, maybe we have some type of

443
00:17:40,129 --> 00:17:41,469
Cassandra cluster
that we actually

444
00:17:41,469 --> 00:17:42,750
use for transaction processing

445
00:17:42,750 --> 00:17:44,050
for our front end application,

446
00:17:44,050 --> 00:17:46,030
and maybe as there are
changes open there,

447
00:17:46,030 --> 00:17:48,510
maybe it gets
published to Kafka,

448
00:17:48,510 --> 00:17:51,389
so we eventually get it
downstream for analytics, right?

449
00:17:51,389 --> 00:17:53,729
So all these systems we've
learned kind of fit together,

450
00:17:53,729 --> 00:17:57,130
any of these things you could
swap out for Cloud systems.

451
00:17:57,130 --> 00:17:58,289
So I'm just trying to treat this

452
00:17:58,289 --> 00:17:59,530
as an outline at the top.

453
00:17:59,530 --> 00:18:01,790
Instead of HDFS, we're
going to look at something

454
00:18:01,790 --> 00:18:04,529
called the Closss file system.

455
00:18:04,529 --> 00:18:06,729
And so let's look at this
history again, right?

456
00:18:06,729 --> 00:18:09,309
So Google created the
Google file system,

457
00:18:09,309 --> 00:18:13,619
and that inspired HDFS And
the Google File system,

458
00:18:13,619 --> 00:18:16,199
unfortunately had a
bottle deck, right?

459
00:18:16,199 --> 00:18:17,360
That was the name node,

460
00:18:17,360 --> 00:18:19,100
I think they call it
something different in GFS.

461
00:18:19,100 --> 00:18:20,480
But it had that kind
of single point

462
00:18:20,480 --> 00:18:21,859
of failure, and
even if you have,

463
00:18:21,859 --> 00:18:23,300
one secondary node to fail

464
00:18:23,300 --> 00:18:24,879
over to, I wasn't great, right?

465
00:18:24,879 --> 00:18:27,340
There was a performance
issue there.

466
00:18:27,340 --> 00:18:29,239
And so they built
a new file system

467
00:18:29,239 --> 00:18:30,940
that avoids a central
point of bottle deck

468
00:18:30,940 --> 00:18:34,730
called the Colossus
file system or CFS,

469
00:18:34,730 --> 00:18:36,629
they use that widely
within Google.

470
00:18:36,629 --> 00:18:38,229
And you cannot directly,

471
00:18:38,229 --> 00:18:40,449
if somebody outside of
Google just start using it,

472
00:18:40,449 --> 00:18:43,309
but it underlies different
services that they have.

473
00:18:43,309 --> 00:18:45,930
And so one of the
big ones is GCS.

474
00:18:45,930 --> 00:18:47,389
Google Cloud Storage.

475
00:18:47,389 --> 00:18:49,590
If anybody is
familiar with Amazon,

476
00:18:49,590 --> 00:18:51,449
it would be similar to S three.

477
00:18:51,449 --> 00:18:53,089
And in this system,

478
00:18:53,089 --> 00:18:55,030
in some ways, it
resembles a file system,

479
00:18:55,030 --> 00:18:57,749
they call it a bucket,
and it has files in it,

480
00:18:57,749 --> 00:19:00,074
but we call them objects
because I don't know.

481
00:19:00,074 --> 00:19:01,440
There's some minor differences

482
00:19:01,440 --> 00:19:02,520
that are not too important.

483
00:19:02,520 --> 00:19:04,320
But anyway, we could create

484
00:19:04,320 --> 00:19:06,359
a bucket and put
some files at it,

485
00:19:06,359 --> 00:19:08,139
and underneath it,
we would basically

486
00:19:08,139 --> 00:19:09,999
be using the colossus
file system, right?

487
00:19:09,999 --> 00:19:11,420
So it's something
that you could use

488
00:19:11,420 --> 00:19:12,779
if you're willing to pay, right?

489
00:19:12,779 --> 00:19:13,960
If you have one
of these buckets,

490
00:19:13,960 --> 00:19:15,540
you could make it private,

491
00:19:15,540 --> 00:19:17,100
maybe for your analytics data,

492
00:19:17,100 --> 00:19:19,379
or you can make it public and
use it to back a website.

493
00:19:19,379 --> 00:19:22,319
I would be a very cheap
way to generally back,

494
00:19:22,319 --> 00:19:24,960
a public facing website.

495
00:19:26,030 --> 00:19:28,469
Now, what's kind
of interesting is

496
00:19:28,469 --> 00:19:30,629
that all this open source
stuff has happened,

497
00:19:30,629 --> 00:19:32,429
and CT providers are
always trying to

498
00:19:32,429 --> 00:19:34,710
bring people back in and
make them customers again.

499
00:19:34,710 --> 00:19:36,609
And that's often
possible, right?

500
00:19:36,609 --> 00:19:37,690
Because you find out that, okay,

501
00:19:37,690 --> 00:19:39,550
you to play HTFS, and
it's a giant paid,

502
00:19:39,550 --> 00:19:42,509
and you end up paying a
person to maintain it,

503
00:19:42,509 --> 00:19:44,010
maybe more than you would pay

504
00:19:44,010 --> 00:19:45,849
Drool to run something for you.

505
00:19:45,849 --> 00:19:47,489
And so what they've
actually done is they

506
00:19:47,489 --> 00:19:49,250
have taken the HDF interface,

507
00:19:49,250 --> 00:19:51,310
and they've layered
that on top of GCS,

508
00:19:51,310 --> 00:19:54,179
and that any kind of
application using HDFS,

509
00:19:54,179 --> 00:19:56,940
can work in this
environment as well.

510
00:19:56,940 --> 00:19:58,120
So, for example, maybe

511
00:19:58,120 --> 00:20:00,360
SMART normally runs
on stuff at HDS,

512
00:20:00,360 --> 00:20:02,599
but you could start
using Spark on top of

513
00:20:02,599 --> 00:20:04,940
the Closss file system if
you have these buckets,

514
00:20:04,940 --> 00:20:06,500
and you could set up
some kind of data

515
00:20:06,500 --> 00:20:09,479
la where they're going
to manage that for you.

516
00:20:10,170 --> 00:20:13,049
Alright, let's look at Spark.

517
00:20:13,049 --> 00:20:15,790
Spark might be doing
analytics on HHS data,

518
00:20:15,790 --> 00:20:17,829
and the equivalent here
would be big query.

519
00:20:17,829 --> 00:20:19,229
And big query is a system where

520
00:20:19,229 --> 00:20:21,310
they spend the most
time on this semester.

521
00:20:21,310 --> 00:20:24,710
And so Big Query has a
little bit of history.

522
00:20:24,710 --> 00:20:27,729
So, originally,
there was a team at

523
00:20:27,729 --> 00:20:29,389
Google that was supposed to

524
00:20:29,389 --> 00:20:31,469
go build something
called the Marketplace.

525
00:20:31,469 --> 00:20:33,170
So the marketplace was a place

526
00:20:33,170 --> 00:20:35,269
to sell software and data sets.

527
00:20:35,269 --> 00:20:36,850
And for the data set stuff,

528
00:20:36,850 --> 00:20:38,090
they didn't want to
just make some kind

529
00:20:38,090 --> 00:20:39,349
of stupid website where people

530
00:20:39,349 --> 00:20:42,190
download these big data sets
because they might be huge.

531
00:20:42,190 --> 00:20:44,119
What they realized is
that if they are kind of

532
00:20:44,119 --> 00:20:46,169
Hosting these datasets,
they need a way to

533
00:20:46,169 --> 00:20:47,249
like query the data where it

534
00:20:47,249 --> 00:20:48,629
is instead of pulling it out.

535
00:20:48,629 --> 00:20:51,769
And so the people building
marketplace are like, Oh,

536
00:20:51,769 --> 00:20:53,609
we should build some
query engine for it,

537
00:20:53,609 --> 00:20:56,089
and that thing was
called Big query.

538
00:20:56,089 --> 00:20:57,529
And they didn't have to build it

539
00:20:57,529 --> 00:20:59,110
all from stretch
because within Google,

540
00:20:59,110 --> 00:21:01,529
it turns out if you're a
giant company like that,

541
00:21:01,529 --> 00:21:03,869
a big tech company, they
actually had lots of

542
00:21:03,869 --> 00:21:04,989
different implementations of

543
00:21:04,989 --> 00:21:07,249
the SQL engine internal
to the company?

544
00:21:07,249 --> 00:21:08,530
I just something that
people keep building

545
00:21:08,530 --> 00:21:10,390
different SQL engines
for different purposes.

546
00:21:10,390 --> 00:21:12,009
And there was one that
was really gaining

547
00:21:12,009 --> 00:21:13,829
traction called a
Dribble, right?

548
00:21:13,829 --> 00:21:15,309
We talked about Map reduce and

549
00:21:15,309 --> 00:21:17,129
kind of analytic
stuff that would do.

550
00:21:17,129 --> 00:21:18,249
But it turns out that

551
00:21:18,249 --> 00:21:19,609
Dribble was really
eating into that.

552
00:21:19,609 --> 00:21:21,289
A lot of people are
switching from Map reduce to

553
00:21:21,289 --> 00:21:23,169
dribble and kind of doing that.

554
00:21:23,169 --> 00:21:24,709
So they kind of took Dribble,

555
00:21:24,709 --> 00:21:26,989
and they wrapped it up
and they sell it as

556
00:21:26,989 --> 00:21:30,029
a public facing service
called Big Query, right?

557
00:21:30,029 --> 00:21:31,249
So we can actually go
and we can read like

558
00:21:31,249 --> 00:21:32,289
the dribble paper if we want to

559
00:21:32,289 --> 00:21:33,549
kind of understand a little bit

560
00:21:33,549 --> 00:21:37,669
about how Big query probably
works internally, right?

561
00:21:37,669 --> 00:21:39,130
They have this dribble engine.

562
00:21:39,130 --> 00:21:41,729
And they did a couple of
different things with it.

563
00:21:41,729 --> 00:21:44,209
What is they built it as
an ad hoc system like

564
00:21:44,209 --> 00:21:45,680
Spark that could query

565
00:21:45,680 --> 00:21:46,859
for data in different
places, right?

566
00:21:46,859 --> 00:21:49,400
The big query engine
or rebel internally,

567
00:21:49,400 --> 00:21:51,279
could query from HDFS files,

568
00:21:51,279 --> 00:21:53,639
or it could query
from GCS buckets,

569
00:21:53,639 --> 00:21:55,139
which are in Closss, or it

570
00:21:55,139 --> 00:21:57,679
could query from various
integrations, right?

571
00:21:57,679 --> 00:21:59,159
They could have a Google Street,

572
00:21:59,159 --> 00:22:01,539
and they could allow big
query to query from it.

573
00:22:01,539 --> 00:22:04,940
The other thing they
did is that they built

574
00:22:04,940 --> 00:22:06,679
a special storage
engine that's very

575
00:22:06,679 --> 00:22:08,780
tightly integrated
with big query.

576
00:22:08,780 --> 00:22:11,419
Whatever you co design query
engine a storage engine,

577
00:22:11,419 --> 00:22:12,940
there are ways that
you can optimize

578
00:22:12,940 --> 00:22:14,399
them to get better performance.

579
00:22:14,399 --> 00:22:15,819
So the big query storage engine

580
00:22:15,819 --> 00:22:16,940
is also based on colossus,

581
00:22:16,940 --> 00:22:18,859
but it'll be more opinionated
about what format

582
00:22:18,859 --> 00:22:20,519
the data is a and then

583
00:22:20,519 --> 00:22:23,339
Big Query can take
advantage of that.

584
00:22:23,710 --> 00:22:26,170
We've talked about
different architectures,

585
00:22:26,170 --> 00:22:28,070
how you could have like
this data warehouse

586
00:22:28,070 --> 00:22:29,609
where the engine

587
00:22:29,609 --> 00:22:31,409
and the storage is tightly

588
00:22:31,409 --> 00:22:34,190
integrated in one system,
that's a data warehouse.

589
00:22:34,190 --> 00:22:35,309
We've talked about
Data lake where

590
00:22:35,309 --> 00:22:36,769
it's a little bit
more decoupled.

591
00:22:36,769 --> 00:22:38,850
And Big Query doesn't
really nicely

592
00:22:38,850 --> 00:22:41,109
fit into one category
or the other.

593
00:22:41,109 --> 00:22:42,309
There's different
ways you could use

594
00:22:42,309 --> 00:22:43,829
different components of it to

595
00:22:43,829 --> 00:22:45,249
either have it kind of resemble

596
00:22:45,249 --> 00:22:46,890
a data warehouse or a data lake.

597
00:22:46,890 --> 00:22:48,509
So, for example, on
the left here, right,

598
00:22:48,509 --> 00:22:50,330
I can imagine using
the query engine

599
00:22:50,330 --> 00:22:52,089
just with some data
and GCS bucket.

600
00:22:52,089 --> 00:22:54,129
That would be kind of like
a data lake architecture.

601
00:22:54,129 --> 00:22:55,509
Other systems could use

602
00:22:55,509 --> 00:22:56,949
the data of those
buckets as well.

603
00:22:56,949 --> 00:22:59,069
If I'm using the Big
Query query engine

604
00:22:59,069 --> 00:23:00,929
with the storage
engine they have,

605
00:23:00,929 --> 00:23:04,490
then it would more
resemble a data warehouse.

606
00:23:04,490 --> 00:23:07,249
I could use a query engine
with somebody else.

607
00:23:07,249 --> 00:23:09,410
Yes. That would look like
a data lake as well,

608
00:23:09,410 --> 00:23:11,350
or I could even do
something very weird.

609
00:23:11,350 --> 00:23:13,289
I could use Spark on top of

610
00:23:13,289 --> 00:23:14,509
Big query storage because they

611
00:23:14,509 --> 00:23:16,369
expose that to external systems.

612
00:23:16,369 --> 00:23:18,470
That would be another
example of a data lake.

613
00:23:18,470 --> 00:23:20,909
So kind of a very
flexible system.

614
00:23:20,909 --> 00:23:22,430
You'd have to pick,
well, what makes

615
00:23:22,430 --> 00:23:24,450
the most sense for
your organization?

616
00:23:24,450 --> 00:23:27,089
Probably based on what other
tools you're trying to use.

617
00:23:27,089 --> 00:23:28,389
Right? If you're using
Spark for lots of

618
00:23:28,389 --> 00:23:29,770
different things,
and you spot data,

619
00:23:29,770 --> 00:23:31,209
big query storage,

620
00:23:31,209 --> 00:23:33,909
maybe it makes sense
to use it like this.

621
00:23:34,200 --> 00:23:36,920
Now, given the Colossus is doing

622
00:23:36,920 --> 00:23:39,819
the actual work of saving
these files for us,

623
00:23:39,819 --> 00:23:41,419
the big query storage ig,

624
00:23:41,419 --> 00:23:43,359
what it's really thinking
about most is, well,

625
00:23:43,359 --> 00:23:46,200
what is the format
for these files?

626
00:23:46,200 --> 00:23:47,979
It's for analytics.
Of course it's to

627
00:23:47,979 --> 00:23:50,039
be a column oriented format.

628
00:23:50,039 --> 00:23:52,020
I want to talk about
three formats here.

629
00:23:52,020 --> 00:23:55,560
Park, which we know extensively
from this semester,

630
00:23:55,560 --> 00:23:57,859
Columbo and capacitor,

631
00:23:57,859 --> 00:23:59,875
all three of which are
our column oriented.

632
00:23:59,875 --> 00:24:01,669
So, again, there's a little
bit of history there,

633
00:24:01,669 --> 00:24:04,730
which they talk about in
this book by some roglers.

634
00:24:04,730 --> 00:24:06,709
And they talk about how people

635
00:24:06,709 --> 00:24:09,109
used to use protocol
buffers for everything.

636
00:24:09,109 --> 00:24:10,549
You all know protocol buffers.

637
00:24:10,549 --> 00:24:11,749
We use that for GRPC.

638
00:24:11,749 --> 00:24:13,490
We use it for Kafka messages.

639
00:24:13,490 --> 00:24:15,149
And it's kind of crazy.

640
00:24:15,149 --> 00:24:17,870
I'm not even sure how this
would happen, but apparently,

641
00:24:17,870 --> 00:24:18,990
what they say is
that some of these

642
00:24:18,990 --> 00:24:20,229
protocol buffers they'd have

643
00:24:20,229 --> 00:24:21,969
would have like
hundreds of thousands

644
00:24:21,969 --> 00:24:23,069
of fields of them, right?

645
00:24:23,069 --> 00:24:24,410
They just grow enormous.

646
00:24:24,410 --> 00:24:26,369
And Soe people would use
that for logging, right?

647
00:24:26,369 --> 00:24:27,690
Some kind of event
happens, and they'd

648
00:24:27,690 --> 00:24:29,600
write a protocol
buffer to a file.

649
00:24:29,600 --> 00:24:31,009
And you can imagine,

650
00:24:31,009 --> 00:24:32,449
if you want to do some
analysis on that,

651
00:24:32,449 --> 00:24:34,990
you could read over all the
protocol buffers in a file,

652
00:24:34,990 --> 00:24:37,429
and then maybe sub over a
column or something like that.

653
00:24:37,429 --> 00:24:39,889
And that's terrible, right?
That's a row oriented format.

654
00:24:39,889 --> 00:24:41,369
You'd read a little
bit of data here.

655
00:24:41,369 --> 00:24:42,529
Instead of reading kind of like,

656
00:24:42,529 --> 00:24:43,769
big blocks of data at the time.

657
00:24:43,769 --> 00:24:45,109
It's bad for Discio,

658
00:24:45,109 --> 00:24:46,750
it's bad for the CPU catch.

659
00:24:46,750 --> 00:24:48,249
Anyway, that was terrible.

660
00:24:48,249 --> 00:24:49,709
And so they ended up building

661
00:24:49,709 --> 00:24:51,929
this thing called
the Columbo format,

662
00:24:51,929 --> 00:24:55,249
which was a column
oriented oriented format.

663
00:24:55,249 --> 00:24:56,769
And when people built dribble,

664
00:24:56,769 --> 00:24:58,869
those are also the people
building Columbo, right?

665
00:24:58,869 --> 00:25:01,029
So they built dribble
which underlies

666
00:25:01,029 --> 00:25:04,089
big query to use this
Colby O format, right?

667
00:25:04,089 --> 00:25:05,670
Okay, that's a history there.

668
00:25:05,670 --> 00:25:07,349
And it turns out
that's relevant to us,

669
00:25:07,349 --> 00:25:08,850
is that Colbo
format was actually

670
00:25:08,850 --> 00:25:10,869
inspiration for
Park files, right?

671
00:25:10,869 --> 00:25:12,489
They published a
paper about Dribble.

672
00:25:12,489 --> 00:25:14,389
And you know, other
people have read that.

673
00:25:14,389 --> 00:25:15,769
And then Park files.

674
00:25:15,769 --> 00:25:18,330
A lot of that was spearheaded
by Twitter and Cloud era,

675
00:25:18,330 --> 00:25:20,389
and they cited that
tended the script of

676
00:25:20,389 --> 00:25:23,170
Columbo format as
inspiration for, Hey,

677
00:25:23,170 --> 00:25:25,469
let's build an open
source format Parke that

678
00:25:25,469 --> 00:25:29,129
has a lot of the save
strategies that Colby O has.

679
00:25:29,680 --> 00:25:32,820
Now, even though they
start with Cal bio,

680
00:25:32,820 --> 00:25:34,559
eventually, they have
a successor to that,

681
00:25:34,559 --> 00:25:35,899
and that's called capacitor.

682
00:25:35,899 --> 00:25:38,019
So a big query, at least
last we've heard, right?

683
00:25:38,019 --> 00:25:39,999
Who knows what's happening
internally at ogle?

684
00:25:39,999 --> 00:25:41,619
Last we heard, they're
using capacitor

685
00:25:41,619 --> 00:25:43,259
underneath big
query and dribble.

686
00:25:43,259 --> 00:25:45,119
And they have a couple of

687
00:25:45,119 --> 00:25:48,520
key optimizations there for
different kinds of data.

688
00:25:48,520 --> 00:25:50,260
These refer to toting.

689
00:25:50,260 --> 00:25:51,720
And totings say, well,

690
00:25:51,720 --> 00:25:52,799
we have this data, but how do I

691
00:25:52,799 --> 00:25:54,000
actually represent a disk?

692
00:25:54,000 --> 00:25:55,180
There's a couple of scenarios

693
00:25:55,180 --> 00:25:56,859
they wanted to optimize for.

694
00:25:56,859 --> 00:25:58,440
One is that they said,

695
00:25:58,440 --> 00:26:00,499
Let's use run leg toting, right?

696
00:26:00,499 --> 00:26:03,350
So here I have Apple Apple
apple, banana, banana.

697
00:26:03,350 --> 00:26:06,619
Why not just say three
apple, tata, four apple?

698
00:26:06,619 --> 00:26:09,199
And that's what they do. This
is a run length encoding.

699
00:26:09,199 --> 00:26:10,560
That's a general strategy.

700
00:26:10,560 --> 00:26:13,000
You're find other formats that
have run lengthen coding.

701
00:26:13,000 --> 00:26:13,919
If somebody says, Hey,

702
00:26:13,919 --> 00:26:15,479
this format uses run
length and coding,

703
00:26:15,479 --> 00:26:18,219
you should know what they're
talking about, right?

704
00:26:18,219 --> 00:26:20,219
And why do you
need to know that?

705
00:26:20,219 --> 00:26:22,279
Well, depending on how
your data is ordered,

706
00:26:22,279 --> 00:26:23,699
run length and coding might be

707
00:26:23,699 --> 00:26:25,399
great or it might
be useless, right?

708
00:26:25,399 --> 00:26:26,839
If all my data is shuffled up,

709
00:26:26,839 --> 00:26:28,679
run length coding won't
work well, right?

710
00:26:28,679 --> 00:26:30,099
So if you're using
some new format,

711
00:26:30,099 --> 00:26:31,379
you should understand what

712
00:26:31,379 --> 00:26:33,279
these terms read for the
format and then figure out,

713
00:26:33,279 --> 00:26:35,185
well, is this going to
help me with my data?

714
00:26:35,185 --> 00:26:36,849
Or not, right? Okay, so they

715
00:26:36,849 --> 00:26:38,649
get some rid of some
redundancy that way.

716
00:26:38,649 --> 00:26:39,930
We see there's sill redundancy

717
00:26:39,930 --> 00:26:41,250
because there's
apple there twice.

718
00:26:41,250 --> 00:26:43,710
Not a big deal, but if
there's a longer word,

719
00:26:43,710 --> 00:26:47,629
kind of duplicated log strings
are a source of waste.

720
00:26:47,629 --> 00:26:49,629
And so the second thing
they would do is what is

721
00:26:49,629 --> 00:26:51,829
called dictionary toting, right?

722
00:26:51,829 --> 00:26:53,349
Each unique big value

723
00:26:53,349 --> 00:26:55,169
like that would row it
in a dictionary, right?

724
00:26:55,169 --> 00:26:57,309
So we have apples
wood, banana is two.

725
00:26:57,309 --> 00:27:00,049
And then up above, we
could say three wds,

726
00:27:00,049 --> 00:27:02,129
so that would be three
apples, two twos,

727
00:27:02,129 --> 00:27:04,749
so two bananas, four
wads, four apples.

728
00:27:04,749 --> 00:27:06,209
That's called
dictionary tooting.

729
00:27:06,209 --> 00:27:07,429
There are lots of formats out

730
00:27:07,429 --> 00:27:08,929
there that use
dictionary toting.

731
00:27:08,929 --> 00:27:10,449
You should know what
that means as well.

732
00:27:10,449 --> 00:27:12,129
If I have some data, I'm
trying to figure out,

733
00:27:12,129 --> 00:27:14,059
is dictionary coding
going to help me?

734
00:27:14,059 --> 00:27:16,009
Well, it depends, right?

735
00:27:16,009 --> 00:27:17,730
If I have big strings
of their duplicates.

736
00:27:17,730 --> 00:27:19,669
Yes, if all the strings are
different from each other,

737
00:27:19,669 --> 00:27:22,469
then no, that would actually
make it worse, right?

738
00:27:22,469 --> 00:27:24,809
Things like pier, you
can actually choose.

739
00:27:24,809 --> 00:27:27,649
You could say, I want dictionary
encoding or not, right?

740
00:27:27,649 --> 00:27:28,869
You need to know what
these things mean.

741
00:27:28,869 --> 00:27:29,469
You need to know

742
00:27:29,469 --> 00:27:30,970
kind of the characteristics
of your data.

743
00:27:30,970 --> 00:27:32,149
You go to figure out if you want

744
00:27:32,149 --> 00:27:34,069
these entrodings or or not.

745
00:27:34,069 --> 00:27:38,830
Alright. Cool. So I do a
tophat about the entrodings.

746
00:27:38,830 --> 00:27:41,890
Alright. Let me head over here.

747
00:28:36,150 --> 00:28:39,270
15 seconds left.

748
00:28:58,590 --> 00:29:01,249
Alright, people are saying
only run length and

749
00:29:01,249 --> 00:29:03,149
toting of which is
tracked, right?

750
00:29:03,149 --> 00:29:05,189
So how would I read
this down here?

751
00:29:05,189 --> 00:29:08,470
There are sevens, I'm sorry,

752
00:29:08,470 --> 00:29:13,489
17, three eights, two
sevens and 19, right?

753
00:29:13,489 --> 00:29:17,449
So we can definitely see
that there is lingere.

754
00:29:17,449 --> 00:29:20,129
What about dictionary
and? There's not.

755
00:29:20,129 --> 00:29:21,429
And the reason why is that

756
00:29:21,429 --> 00:29:24,610
the original values like
seven appear down here.

757
00:29:24,610 --> 00:29:26,129
AD appears down here?

758
00:29:26,129 --> 00:29:28,729
The original values
appear out there.

759
00:29:28,729 --> 00:29:30,989
Would I want to use
dictionary Trode

760
00:29:30,989 --> 00:29:32,569
here? Not really, right?

761
00:29:32,569 --> 00:29:33,609
Because the whole idea of

762
00:29:33,609 --> 00:29:34,890
dictionary Trode is that we take

763
00:29:34,890 --> 00:29:36,489
these log strings and we

764
00:29:36,489 --> 00:29:39,150
replace them with these
short editor values.

765
00:29:39,150 --> 00:29:41,369
My original data is short
editor values, right?

766
00:29:41,369 --> 00:29:42,870
So if I replace that editor,

767
00:29:42,870 --> 00:29:45,190
the different editor, that
doesn't really by me anything.

768
00:29:45,190 --> 00:29:45,929
In fact, would make it

769
00:29:45,929 --> 00:29:47,069
worse because I'd
have to do a look

770
00:29:47,069 --> 00:29:50,149
up each time to actually
figure out what that data is.

771
00:29:50,149 --> 00:29:56,989
Do you have any questions
about the trots? Oh, right.

772
00:30:00,630 --> 00:30:03,349
Let's talk about Cassandra

773
00:30:03,349 --> 00:30:04,809
and some related systems, right?

774
00:30:04,809 --> 00:30:09,350
And so we learned that
Cassandra and H base,

775
00:30:09,350 --> 00:30:10,869
were both inspired by Big Table.

776
00:30:10,869 --> 00:30:12,430
In terms of that Big
Table is still used.

777
00:30:12,430 --> 00:30:14,229
That's a Google Cloud service.

778
00:30:14,229 --> 00:30:16,089
You can use if you
want to, right?

779
00:30:16,089 --> 00:30:18,109
So I want to sort look at the
inspirations here, right?

780
00:30:18,109 --> 00:30:21,890
So Cassandra, one
inspiration was Damo.

781
00:30:21,890 --> 00:30:23,949
Damo inspired it in

782
00:30:23,949 --> 00:30:25,829
terms of the partitioning
and replication.

783
00:30:25,829 --> 00:30:28,850
Dabo also now backs Dao DB,

784
00:30:28,850 --> 00:30:31,189
which is current AWS
Cloud service, right?

785
00:30:31,189 --> 00:30:32,684
So the stuff is still relevant.

786
00:30:32,684 --> 00:30:34,599
Casado was also inspired by

787
00:30:34,599 --> 00:30:37,399
Big Table for the data
model and storage layout.

788
00:30:37,399 --> 00:30:40,639
Big Table also more directly
inspired H base, right?

789
00:30:40,639 --> 00:30:43,219
And so even though Big Table
and HBase are ire similar,

790
00:30:43,219 --> 00:30:45,900
some people would be running
HBase apps on top of H base.

791
00:30:45,900 --> 00:30:47,519
Others would be
running Big Table apps

792
00:30:47,519 --> 00:30:48,940
on top of Big Table.

793
00:30:48,940 --> 00:30:50,559
One of the things
that's changed is that

794
00:30:50,559 --> 00:30:53,000
Big Table now runs
on top of Closs,

795
00:30:53,000 --> 00:30:54,939
instead of the
Google File system.

796
00:30:54,939 --> 00:30:56,779
And they're not quite
sure, like the details

797
00:30:56,779 --> 00:30:57,539
about how they pulled off

798
00:30:57,539 --> 00:30:58,519
this circular dependency, right?

799
00:30:58,519 --> 00:31:01,954
Be there's t limits how much
has been published. But

800
00:31:01,954 --> 00:31:03,929
It's kind of cool.
Colossus, instead

801
00:31:03,929 --> 00:31:05,649
of having that
centralized name node,

802
00:31:05,649 --> 00:31:07,929
it stores its data

803
00:31:07,929 --> 00:31:10,389
about block locations
in Big Table, right?

804
00:31:10,389 --> 00:31:11,529
So somehow they figure
out how to have

805
00:31:11,529 --> 00:31:13,869
a circular dependency
where, you know,

806
00:31:13,869 --> 00:31:16,409
all these big table
regions, right,

807
00:31:16,409 --> 00:31:18,829
are stored colossus, but

808
00:31:18,829 --> 00:31:20,190
then Coss sores data

809
00:31:20,190 --> 00:31:21,970
about the locations of
those in Big Table.

810
00:31:21,970 --> 00:31:23,709
And the consequence
of that is they

811
00:31:23,709 --> 00:31:25,870
got rid of that bottleneck,
which was the name node,

812
00:31:25,870 --> 00:31:27,949
and they were able
to scale it up to,

813
00:31:27,949 --> 00:31:30,329
clusters that are 100 times
bigger any used to be.

814
00:31:30,329 --> 00:31:33,609
Right. That was a real
pain point they solved it.

815
00:31:34,200 --> 00:31:37,599
Now, again, right, and
all these things, right?

816
00:31:37,599 --> 00:31:39,659
People went off and are using
these open source systems,

817
00:31:39,659 --> 00:31:41,199
which can be kind
of hard to use.

818
00:31:41,199 --> 00:31:43,359
And these cloud providers
are always trying to

819
00:31:43,359 --> 00:31:45,459
pull them back and
make them customers.

820
00:31:45,459 --> 00:31:47,139
So HBase has its own API.

821
00:31:47,139 --> 00:31:48,420
And so what they've
done is they've layered

822
00:31:48,420 --> 00:31:50,420
the Has API on top of Big Table.

823
00:31:50,420 --> 00:31:53,120
And now if you have
HBase application,

824
00:31:53,120 --> 00:31:56,160
you can actually run it
on top of Big Taylor,

825
00:31:56,160 --> 00:31:57,479
try to make it as
easy as possible

826
00:31:57,479 --> 00:31:58,540
for people to move back into

827
00:31:58,540 --> 00:32:01,479
the cloud and become customers.

828
00:32:01,479 --> 00:32:05,339
All right. Any questions about
Cassandra or Big Table or

829
00:32:05,339 --> 00:32:09,749
how that all fits in. All right.

830
00:32:09,749 --> 00:32:12,289
Let's talk about Kaka.

831
00:32:12,289 --> 00:32:13,969
FA is kind of interesting

832
00:32:13,969 --> 00:32:15,569
because for all these
other things, right?

833
00:32:15,569 --> 00:32:17,749
We see that they're
different cloud equivalents.

834
00:32:17,749 --> 00:32:20,009
But Kaka is built

835
00:32:20,009 --> 00:32:22,089
and maintained by this
company Ced and Fluid,

836
00:32:22,089 --> 00:32:23,409
and they've managed to actually

837
00:32:23,409 --> 00:32:24,689
partner with all the
cloud providers.

838
00:32:24,689 --> 00:32:26,829
In a lot of cases, if
you're y a smaller company,

839
00:32:26,829 --> 00:32:28,150
the cloud providers will build

840
00:32:28,150 --> 00:32:29,269
their own thing to compete with

841
00:32:29,269 --> 00:32:30,449
you, but somehow, I don't know.

842
00:32:30,449 --> 00:32:31,889
They must have had
some business savvy,

843
00:32:31,889 --> 00:32:33,310
or I don't know how
they pulled it off.

844
00:32:33,310 --> 00:32:35,390
Be curious. And they
partnered with each of these.

845
00:32:35,390 --> 00:32:36,829
So if you're on AWS, you can,

846
00:32:36,829 --> 00:32:39,799
you know, Kafka from Tfluid,

847
00:32:39,799 --> 00:32:41,399
and then tfluit will
get a cut of that.

848
00:32:41,399 --> 00:32:43,939
Same thing at Doogle
or Azure, right?

849
00:32:43,939 --> 00:32:45,300
So what that does
mean is that there's

850
00:32:45,300 --> 00:32:47,020
two different kafkas out there.

851
00:32:47,020 --> 00:32:48,719
There's the open source Kafka,

852
00:32:48,719 --> 00:32:50,339
which is under the
apache license.

853
00:32:50,339 --> 00:32:52,619
And then there's the tlit Kafka,

854
00:32:52,619 --> 00:32:55,039
which is the closed source
one that, you know,

855
00:32:55,039 --> 00:32:57,699
you could either pay
confluit for through one of

856
00:32:57,699 --> 00:32:59,319
these cloud providers
or pay them directly

857
00:32:59,319 --> 00:33:01,655
if you're deploying it yourself.

858
00:33:01,655 --> 00:33:03,410
I think it's interesting
that there's

859
00:33:03,410 --> 00:33:04,629
all these open source
companies that can

860
00:33:04,629 --> 00:33:06,289
manage to have the paid service,

861
00:33:06,289 --> 00:33:07,190
and then they're giving

862
00:33:07,190 --> 00:33:08,409
away for something
for free as well.

863
00:33:08,409 --> 00:33:10,769
I just want to talk
briefly about that of

864
00:33:10,769 --> 00:33:13,089
open source licenses
and maybe how

865
00:33:13,089 --> 00:33:16,089
they can build businesses
around some of these, right?

866
00:33:16,089 --> 00:33:18,189
And you know, of
course, this has

867
00:33:18,189 --> 00:33:20,770
very much a legal aspect to
it, and I'm not a lawyer.

868
00:33:20,770 --> 00:33:23,069
But, I've read these licenses
and have read about them.

869
00:33:23,069 --> 00:33:24,530
And so I'll just try to share

870
00:33:24,530 --> 00:33:26,149
the limited what I know about

871
00:33:26,149 --> 00:33:27,689
these different licenses that

872
00:33:27,689 --> 00:33:28,909
you're likely to see out there.

873
00:33:28,909 --> 00:33:29,829
Maybe that'll help you, right?

874
00:33:29,829 --> 00:33:31,389
If you're doing some
open source thing,

875
00:33:31,389 --> 00:33:34,009
maybe choose a license
and that'll be especially

876
00:33:34,009 --> 00:33:35,590
important if you're
looking to open source

877
00:33:35,590 --> 00:33:37,569
something and also build
a company around it.

878
00:33:37,569 --> 00:33:39,329
It'll be cool if
some of you do that.

879
00:33:39,329 --> 00:33:41,530
So one license out there
is called the GPL.

880
00:33:41,530 --> 00:33:42,829
And the idea there is that

881
00:33:42,829 --> 00:33:44,269
if I build this
open source thing,

882
00:33:44,269 --> 00:33:45,650
and that other people are using

883
00:33:45,650 --> 00:33:47,189
my source code, and
they're changing it,

884
00:33:47,189 --> 00:33:48,889
and then they're selling

885
00:33:48,889 --> 00:33:50,650
that software e ploy
it in some way,

886
00:33:50,650 --> 00:33:54,869
they have to share the changes
they made as well, right?

887
00:33:54,869 --> 00:33:56,289
So often, if you have that, it's

888
00:33:56,289 --> 00:33:57,609
hard to build a
company around it

889
00:33:57,609 --> 00:34:00,510
because you have to give away
all your stuff that's free,

890
00:34:00,510 --> 00:34:04,309
well, then what are you really
selling in the d, right?

891
00:34:04,309 --> 00:34:05,849
A lot of companies will use

892
00:34:05,849 --> 00:34:08,249
either the MIT or BSD license.

893
00:34:08,249 --> 00:34:09,549
Those are very short.

894
00:34:09,549 --> 00:34:11,650
Delightfully. So there
will be a few paragraphs.

895
00:34:11,650 --> 00:34:14,030
You can t to read it and
understand it as a non lawyer.

896
00:34:14,030 --> 00:34:16,349
In the most part,
the requirements are

897
00:34:16,349 --> 00:34:18,749
usually things related
to attributing like,

898
00:34:18,749 --> 00:34:22,249
Oh, I got this code from so
and so, or liability, right?

899
00:34:22,249 --> 00:34:24,450
I the code creates
some big problem,

900
00:34:24,450 --> 00:34:27,289
it's my problem, not the
person who wrote the code.

901
00:34:27,289 --> 00:34:29,569
And so those are out there.

902
00:34:29,569 --> 00:34:31,649
One of the things that
these do not make you

903
00:34:31,649 --> 00:34:34,049
do is open source
changes, right?

904
00:34:34,049 --> 00:34:36,879
So you can d find
MIT or BST project.

905
00:34:36,879 --> 00:34:38,629
You could make
improvements to it,

906
00:34:38,629 --> 00:34:40,470
and then you would have
a closed source product

907
00:34:40,470 --> 00:34:42,149
that you could sell, right?

908
00:34:42,149 --> 00:34:43,829
So you can kind of
imagine having 1 ft on

909
00:34:43,829 --> 00:34:45,989
the open source side
and 1 ft in the, Hey,

910
00:34:45,989 --> 00:34:47,890
I have this proprietary product

911
00:34:47,890 --> 00:34:50,914
based on the open source
thing. That's better, right?

912
00:34:50,914 --> 00:34:53,499
The apache license is
kind of similar to

913
00:34:53,499 --> 00:34:55,860
the MIT and BSD license

914
00:34:55,860 --> 00:34:59,060
that you can still take
an Apache project,

915
00:34:59,060 --> 00:35:00,739
like, make it better,
then it's like, Well,

916
00:35:00,739 --> 00:35:02,919
this is my proprietary
thing, that has,

917
00:35:02,919 --> 00:35:04,080
like, secret improvements,

918
00:35:04,080 --> 00:35:05,999
then you could like
sell it, right?

919
00:35:05,999 --> 00:35:09,079
But it's much longer, much
more difficult to read.

920
00:35:09,079 --> 00:35:11,380
And that's because
it relates to Patts,

921
00:35:11,380 --> 00:35:13,059
not just a copy right, right?

922
00:35:13,059 --> 00:35:15,759
The MTSD, they just talk about
copy right, but of course,

923
00:35:15,759 --> 00:35:19,560
pats are another big area
of intellectual property.

924
00:35:19,560 --> 00:35:22,820
And so it's actually interesting
with the MIT and BSD,

925
00:35:22,820 --> 00:35:25,279
if you have some new
idea, you could pat it.

926
00:35:25,279 --> 00:35:26,699
You could write
some code for it,

927
00:35:26,699 --> 00:35:28,184
and you can open source it.

928
00:35:28,184 --> 00:35:30,710
And then people could use
that open source license.

929
00:35:30,710 --> 00:35:32,629
They would have a right
to your copy, right?

930
00:35:32,629 --> 00:35:34,669
They could use that.
But then you could sue

931
00:35:34,669 --> 00:35:36,129
somebody using your
open source thing

932
00:35:36,129 --> 00:35:37,629
based on the paddets you have.

933
00:35:37,629 --> 00:35:40,129
And so Apache license
has a bunch of

934
00:35:40,129 --> 00:35:41,910
kind of complicated clauses

935
00:35:41,910 --> 00:35:43,109
in there that try
to deal with that,

936
00:35:43,109 --> 00:35:45,189
and it says things like just

937
00:35:45,189 --> 00:35:47,729
kind of this is my Layman's
understanding of it.

938
00:35:47,729 --> 00:35:49,249
Like, Hey, if I'm a
company and I have

939
00:35:49,249 --> 00:35:51,930
some patts and I contribute
open source to the stuff,

940
00:35:51,930 --> 00:35:54,630
I won't sue people
with my paddets,

941
00:35:54,630 --> 00:35:55,770
if they're using the software,

942
00:35:55,770 --> 00:35:57,899
I contributed to
the project, right?

943
00:35:57,899 --> 00:36:00,630
Anyway, so apache
license is very popular,

944
00:36:00,630 --> 00:36:02,389
right because it lets people
build business around it,

945
00:36:02,389 --> 00:36:06,050
and it considers intellectual
property more broadly.

946
00:36:06,050 --> 00:36:07,589
And so what you'll often see is

947
00:36:07,589 --> 00:36:08,849
that a lot of

948
00:36:08,849 --> 00:36:10,249
these open source things
where you looked at,

949
00:36:10,249 --> 00:36:12,309
there'll be like the open
source apache version,

950
00:36:12,309 --> 00:36:14,309
and then there will
be some kind of paid,

951
00:36:14,309 --> 00:36:16,269
like, better proprietary
version of it.

952
00:36:16,269 --> 00:36:18,929
So, for example,
data bricks, right?

953
00:36:18,929 --> 00:36:21,429
They'll help maintain
apache spark,

954
00:36:21,429 --> 00:36:23,009
but they also have
data brick spark,

955
00:36:23,009 --> 00:36:23,869
which is like better,

956
00:36:23,869 --> 00:36:27,009
more reliable, and then you
pay data breaks for it.

957
00:36:27,009 --> 00:36:30,430
Cassada you could deploy the
apache version of yourself,

958
00:36:30,430 --> 00:36:33,274
or you could pay data
stacks to do it for you.

959
00:36:33,274 --> 00:36:36,040
Aca, you could either
run a past Kaka yourself

960
00:36:36,040 --> 00:36:38,700
or you could be paid
to run fluent aca.

961
00:36:38,700 --> 00:36:40,379
Anyway, just a
little bit of a side

962
00:36:40,379 --> 00:36:42,339
that might help folks
if they're kind

963
00:36:42,339 --> 00:36:46,939
of working in this space
at some point. Ah, right.

964
00:36:46,939 --> 00:36:49,399
So I have a few conclusions.

965
00:36:49,399 --> 00:36:52,120
Clouds just keep growing
in ports and revenue,

966
00:36:52,120 --> 00:36:54,159
and the services they provide,

967
00:36:54,159 --> 00:36:56,080
and you know, there's
more cloud providers.

968
00:36:56,080 --> 00:36:57,499
I think lots of you already have

969
00:36:57,499 --> 00:36:59,580
jobs that involve working
on stuff of the Cloud.

970
00:36:59,580 --> 00:37:00,979
So if you're getting
good at that,

971
00:37:00,979 --> 00:37:03,515
that's, you know, a
very marketable skill.

972
00:37:03,515 --> 00:37:05,329
All the resources we care

973
00:37:05,329 --> 00:37:06,990
about like compute
memory, whatever?

974
00:37:06,990 --> 00:37:08,789
You can rent that
in various forms in

975
00:37:08,789 --> 00:37:11,470
the cloud instead of
owning your own hardware.

976
00:37:11,470 --> 00:37:12,809
And then finally, right,

977
00:37:12,809 --> 00:37:14,590
these cloud providers
are definitely charging

978
00:37:14,590 --> 00:37:15,769
you a markup to use

979
00:37:15,769 --> 00:37:18,010
their services over owning
the hardware yourself.

980
00:37:18,010 --> 00:37:19,389
But that doesn't mean
that it's going to

981
00:37:19,389 --> 00:37:20,549
be more expensive, right?

982
00:37:20,549 --> 00:37:22,390
Because if your needs

983
00:37:22,390 --> 00:37:24,509
for compute resources
fluctuates over time,

984
00:37:24,509 --> 00:37:26,009
and you buy hardwareelf,

985
00:37:26,009 --> 00:37:28,669
you're kinda have to buy
for the peak, right?

986
00:37:28,669 --> 00:37:29,849
Whereas if you're renting, then

987
00:37:29,849 --> 00:37:30,950
maybe you pay less overall,

988
00:37:30,950 --> 00:37:33,449
because you aren't renting
everything all the time.

989
00:37:33,449 --> 00:37:35,629
Anyway, so those are my
thugts on Cloud stuff.

990
00:37:35,629 --> 00:37:37,250
Do we have any last questions

991
00:37:37,250 --> 00:37:38,689
about Cloud stuff
before we talk about

992
00:37:38,689 --> 00:37:42,069
big query? All right.

993
00:37:42,069 --> 00:37:43,909
Col. Let's do a deep dive

994
00:37:43,909 --> 00:37:45,890
on one particular cloud service,

995
00:37:45,890 --> 00:37:48,270
which is Big query.

996
00:37:48,270 --> 00:37:52,549
Let me head over here.

997
00:37:52,549 --> 00:37:54,449
I have a few goals for you.

998
00:37:54,449 --> 00:37:55,989
What is that we have to figure

999
00:37:55,989 --> 00:37:57,049
out how to authenticate, right?

1000
00:37:57,049 --> 00:37:59,089
So if I buy by Vb, and

1001
00:37:59,089 --> 00:38:01,689
I want by Vb to do
queries to big query,

1002
00:38:01,689 --> 00:38:02,789
it needs to have some of

1003
00:38:02,789 --> 00:38:04,629
the permissions
that I have, right?

1004
00:38:04,629 --> 00:38:07,370
Like, I as a Google user,

1005
00:38:07,370 --> 00:38:09,049
have access to a bunch of stuff,

1006
00:38:09,049 --> 00:38:10,849
and I have to choose a
subset of that and say by

1007
00:38:10,849 --> 00:38:13,769
VM has access to a subset
of the stuff that I do.

1008
00:38:13,769 --> 00:38:15,449
Right? Maybe they have
access to my big query,

1009
00:38:15,449 --> 00:38:18,610
but I don't want my VM to
have access to my email.

1010
00:38:18,610 --> 00:38:20,630
To figure how we can
limit that scope.

1011
00:38:20,630 --> 00:38:22,910
So if somebody gains
access to my VM,

1012
00:38:22,910 --> 00:38:24,920
the damage will be limited.

1013
00:38:24,920 --> 00:38:26,669
There's a bunch of
different places

1014
00:38:26,669 --> 00:38:28,090
you could run big query.

1015
00:38:28,090 --> 00:38:30,030
We could do it like
in the Cloud Console.

1016
00:38:30,030 --> 00:38:32,109
We could do it with like
regular Python code.

1017
00:38:32,109 --> 00:38:34,589
There's a special Jupiter
extension for it.

1018
00:38:34,589 --> 00:38:36,350
I'm going to demonstrate
all that stuff.

1019
00:38:36,350 --> 00:38:37,949
And then finally, we
want to see how we

1020
00:38:37,949 --> 00:38:39,570
can query over
complicated types,

1021
00:38:39,570 --> 00:38:42,770
like, um arrays and structures.

1022
00:38:42,770 --> 00:38:44,069
And we're going to
have to learn a

1023
00:38:44,069 --> 00:38:45,189
new kind of join for that called

1024
00:38:45,189 --> 00:38:47,329
a correlated cross join to

1025
00:38:47,329 --> 00:38:48,690
kind of dig into the nested

1026
00:38:48,690 --> 00:38:50,369
structure and get
information out.

1027
00:38:50,369 --> 00:38:53,609
Alright. So just s to do some
demos first and jump in.

1028
00:38:53,609 --> 00:38:55,429
And remember that big query,

1029
00:38:55,429 --> 00:38:56,970
I either has its
own storage engine.

1030
00:38:56,970 --> 00:38:59,390
We can I see that, or
it could be pulling

1031
00:38:59,390 --> 00:39:02,230
data from a bucket,
a GCS bucket.

1032
00:39:02,230 --> 00:39:04,909
Is to show how we can
trade a GCS pocket first,

1033
00:39:04,909 --> 00:39:07,590
and then we'll be using that
in subsequent lectures.

1034
00:39:07,590 --> 00:39:09,649
So I'm going to head over here.

1035
00:39:09,649 --> 00:39:12,069
And almost everything we've

1036
00:39:12,069 --> 00:39:14,290
been doing so far has been
under the compute edged,

1037
00:39:14,290 --> 00:39:15,790
but now we're going
to be exploring

1038
00:39:15,790 --> 00:39:17,365
some more of the Google Cloud.

1039
00:39:17,365 --> 00:39:20,460
And so I reed to go
to Cloud Storage.

1040
00:39:20,460 --> 00:39:24,019
And as you can see, they have
these buckets over here.

1041
00:39:24,019 --> 00:39:25,639
And touch how to go ahead and

1042
00:39:25,639 --> 00:39:27,179
try to walk you through
what would happen if

1043
00:39:27,179 --> 00:39:28,960
we want to create a new bucket

1044
00:39:28,960 --> 00:39:31,579
and some of the options
that would have.

1045
00:39:31,579 --> 00:39:33,699
So first of, I have to
give my bucket a name.

1046
00:39:33,699 --> 00:39:35,819
And if I choose somebody
test, it says it's taken.

1047
00:39:35,819 --> 00:39:37,799
And because it's a little
bit like a domain name.

1048
00:39:37,799 --> 00:39:39,560
It has to be globally unique.

1049
00:39:39,560 --> 00:39:41,899
And of course, somebody has
grabbed test before I have.

1050
00:39:41,899 --> 00:39:44,279
So I'll do something a
little bit more, unique,

1051
00:39:44,279 --> 00:39:46,759
like November 2025, section two.

1052
00:39:46,759 --> 00:39:49,394
Nobody has taken that one yet.

1053
00:39:49,394 --> 00:39:51,549
Alright, for our
brokes, we have to

1054
00:39:51,549 --> 00:39:53,669
choose where the data lives.

1055
00:39:53,669 --> 00:39:56,269
We could say US multi region.

1056
00:39:56,269 --> 00:39:58,610
In that case, they're going
to try to keep it reliable.

1057
00:39:58,610 --> 00:39:59,590
They'll trying to keep copies

1058
00:39:59,590 --> 00:40:01,210
of data in different regions,

1059
00:40:01,210 --> 00:40:04,809
and they're going to
try to move it around

1060
00:40:04,809 --> 00:40:06,469
dynamically based
on where the data

1061
00:40:06,469 --> 00:40:08,439
is actually needed, right?

1062
00:40:08,439 --> 00:40:09,899
They don't want to like

1063
00:40:09,899 --> 00:40:12,059
send data over the network
every time there's a query.

1064
00:40:12,059 --> 00:40:14,099
So they just automatically
try to do their best for me.

1065
00:40:14,099 --> 00:40:15,720
I think that's usually
like a good option.

1066
00:40:15,720 --> 00:40:19,440
There are kind of like broader
regions you could choose.

1067
00:40:19,440 --> 00:40:21,939
I could choose a single region

1068
00:40:21,939 --> 00:40:24,159
more narrowly if I wanted to.

1069
00:40:24,159 --> 00:40:26,979
I might do that
if I want to if I

1070
00:40:26,979 --> 00:40:28,179
know where my customers are and

1071
00:40:28,179 --> 00:40:29,299
I know I want to
have it near them,

1072
00:40:29,299 --> 00:40:30,699
I might choose it based on that.

1073
00:40:30,699 --> 00:40:33,579
I might choose it based
on the cost of it.

1074
00:40:33,579 --> 00:40:36,800
I might choose it based
on CO two emissions.

1075
00:40:36,800 --> 00:40:39,039
I could also have a
pair of them if I want.

1076
00:40:39,039 --> 00:40:41,419
Let me just show you some
of these things over here.

1077
00:40:41,419 --> 00:40:45,250
They actually have For each
of these different regions,

1078
00:40:45,250 --> 00:40:46,810
you can actually
just drove through,

1079
00:40:46,810 --> 00:40:49,129
and you can see how much is

1080
00:40:49,129 --> 00:40:50,249
categorized in what they call

1081
00:40:50,249 --> 00:40:52,109
carbon free energy
for the data center.

1082
00:40:52,109 --> 00:40:55,289
And so some of them
are like 98%, right?

1083
00:40:55,289 --> 00:40:58,389
You know, maybe there's a
dam or whatever, right?

1084
00:40:58,389 --> 00:41:00,869
Maybe it's thermal power, right?

1085
00:41:00,869 --> 00:41:02,109
So you could choose based on

1086
00:41:02,109 --> 00:41:03,569
that or maybe you
choose choose on price

1087
00:41:03,569 --> 00:41:06,649
or maybe some combination
of factors, right? Alright.

1088
00:41:06,649 --> 00:41:10,569
Well, so we will we'll
let them decide, right?

1089
00:41:10,800 --> 00:41:13,840
They have different
storage classes

1090
00:41:13,840 --> 00:41:15,819
based on how often
I'm acing your data.

1091
00:41:15,819 --> 00:41:16,940
Sometimes, we're constantly

1092
00:41:16,940 --> 00:41:18,139
reading and writing to the data,

1093
00:41:18,139 --> 00:41:19,840
so we need better performance.

1094
00:41:19,840 --> 00:41:21,680
Other times we might choose,

1095
00:41:21,680 --> 00:41:24,019
for long term archive.
I just write to it.

1096
00:41:24,019 --> 00:41:25,620
And since it's a backup,

1097
00:41:25,620 --> 00:41:26,819
I almost never need it unless

1098
00:41:26,819 --> 00:41:28,040
something really bad happens,

1099
00:41:28,040 --> 00:41:29,819
right? And so we
can choose that.

1100
00:41:29,819 --> 00:41:31,520
And that will
determine the pricing.

1101
00:41:31,520 --> 00:41:32,959
Right? We can see
up here, I'm billed

1102
00:41:32,959 --> 00:41:36,699
for both how much
data I write, right?

1103
00:41:36,699 --> 00:41:38,200
In terms of gigabytes written,

1104
00:41:38,200 --> 00:41:41,750
and I also pay for gigabytes

1105
00:41:41,750 --> 00:41:42,909
of data that are just
sitting there, right.

1106
00:41:42,909 --> 00:41:45,209
If a gigabyte is sitting
there for one month,

1107
00:41:45,209 --> 00:41:47,170
I will pay 2.6 cents,

1108
00:41:47,170 --> 00:41:48,989
right? Relatively
cheap, actually.

1109
00:41:48,989 --> 00:41:50,410
If I did something like archive,

1110
00:41:50,410 --> 00:41:51,869
right, then it would
be a tenth of that,

1111
00:41:51,869 --> 00:41:55,869
it would be 0.2 $0.04
per gigabyte per month.

1112
00:41:55,869 --> 00:41:57,249
Right? I can choose that.

1113
00:41:57,249 --> 00:42:01,849
I'm going to do standard and
and continue. All right.

1114
00:42:01,849 --> 00:42:04,270
We've talked about different
Linux file permissions.

1115
00:42:04,270 --> 00:42:05,069
We've seen that we can have

1116
00:42:05,069 --> 00:42:06,689
different permissions
on each file.

1117
00:42:06,689 --> 00:42:08,790
That would be an example
of find drain permissions.

1118
00:42:08,790 --> 00:42:10,049
We could do if we want.

1119
00:42:10,049 --> 00:42:11,469
Or we could just say, like, Hey,

1120
00:42:11,469 --> 00:42:12,969
the whole bucket has the same

1121
00:42:12,969 --> 00:42:15,839
visibility for
given user, right?

1122
00:42:15,839 --> 00:42:17,079
It's uniform. Either they can

1123
00:42:17,079 --> 00:42:18,619
see it or they can't, right?

1124
00:42:18,619 --> 00:42:20,920
We'll just keep it
uniform for simple.

1125
00:42:20,920 --> 00:42:22,820
We've talked about
data retention.

1126
00:42:22,820 --> 00:42:23,999
There's some
retention stuff here.

1127
00:42:23,999 --> 00:42:25,839
I'm ready to get past, and

1128
00:42:25,839 --> 00:42:27,359
I could go ahead and create it.

1129
00:42:27,359 --> 00:42:29,299
And at the very end,
they can ask me,

1130
00:42:29,299 --> 00:42:31,399
do I want to prevent the
public from seeing it?

1131
00:42:31,399 --> 00:42:32,820
Like it's a private bucklet,

1132
00:42:32,820 --> 00:42:35,180
or I want to make it public?

1133
00:42:35,180 --> 00:42:37,469
I'll keep it private
in this case.

1134
00:42:37,469 --> 00:42:39,540
Alright, so I have my bucket,

1135
00:42:39,540 --> 00:42:41,100
and it really just feels

1136
00:42:41,100 --> 00:42:42,579
like a place to
store files, right?

1137
00:42:42,579 --> 00:42:44,599
I can upload files
if I want here.

1138
00:42:44,599 --> 00:42:47,919
And sorry for that.

1139
00:42:47,919 --> 00:42:50,299
Let me just go over
to my downloads,

1140
00:42:50,299 --> 00:42:54,719
and I will upload this
Park file right here.

1141
00:42:54,719 --> 00:42:58,199
I'm going to upload
that. And there

1142
00:42:58,199 --> 00:42:59,459
we go. I can store files.

1143
00:42:59,459 --> 00:43:01,080
Cheap place to store
files, honestly,

1144
00:43:01,080 --> 00:43:02,939
compared to like
kind of a more user

1145
00:43:02,939 --> 00:43:06,039
facing Cloud service.
Alright, cool.

1146
00:43:06,039 --> 00:43:08,400
That's GCS. Any question
about GCS before I switched

1147
00:43:08,400 --> 00:43:12,779
to big query? All right.

1148
00:43:12,779 --> 00:43:14,259
So I'm going to head over here,

1149
00:43:14,259 --> 00:43:16,379
and I am going to go to

1150
00:43:16,379 --> 00:43:18,479
the marketplace,
which I mentioned,

1151
00:43:18,479 --> 00:43:20,959
remember that the people
building the marketplace,

1152
00:43:20,959 --> 00:43:22,299
that was their job,

1153
00:43:22,299 --> 00:43:24,039
and they realized, well, we
need a query engine, two,

1154
00:43:24,039 --> 00:43:26,420
so they ended up building
two Cloud services.

1155
00:43:26,420 --> 00:43:28,220
We can see over here
that I can filter

1156
00:43:28,220 --> 00:43:30,899
the data in various ways, right?

1157
00:43:30,899 --> 00:43:34,139
I think, for example,
maybe I want

1158
00:43:34,139 --> 00:43:38,629
data and I want it to be free.

1159
00:43:38,629 --> 00:43:41,270
And I think somewhere in
here, they have like maps.

1160
00:43:41,270 --> 00:43:42,829
Here are maps. Okay, great.

1161
00:43:42,829 --> 00:43:44,569
So I can drove through
here, and I can see

1162
00:43:44,569 --> 00:43:45,930
all these different data sources

1163
00:43:45,930 --> 00:43:48,129
that are free that I could use.

1164
00:43:48,129 --> 00:43:51,210
I'm going to go to the
US Census Bureau data.

1165
00:43:51,210 --> 00:43:53,089
They have some US
boundaries there.

1166
00:43:53,089 --> 00:43:55,549
And I'm going to say view that.

1167
00:43:55,549 --> 00:43:57,189
And when I do that, you see that

1168
00:43:57,189 --> 00:43:58,489
it's slightly integrated
with Big Query.

1169
00:43:58,489 --> 00:44:01,095
I'm going to up over and now
I'm inside of Big Query.

1170
00:44:01,095 --> 00:44:03,819
And I can see there's a
hierarchy up here, right?

1171
00:44:03,819 --> 00:44:05,200
At the top of the hierarchy,

1172
00:44:05,200 --> 00:44:06,360
we have different projects,

1173
00:44:06,360 --> 00:44:07,699
which are owned by
different people.

1174
00:44:07,699 --> 00:44:09,479
Like, I have my
own project here.

1175
00:44:09,479 --> 00:44:13,059
And then one project is
called Big Query public data.

1176
00:44:13,059 --> 00:44:16,459
Each project has a lot of
different datasets with it,

1177
00:44:16,459 --> 00:44:18,079
and each dataset with it has

1178
00:44:18,079 --> 00:44:20,039
a bunch of different
tables, right?

1179
00:44:20,039 --> 00:44:22,499
So coming down here, I can

1180
00:44:22,499 --> 00:44:25,900
see that I have these
GO US boundaries,

1181
00:44:25,900 --> 00:44:28,039
and there's different
tables underneath it.

1182
00:44:28,039 --> 00:44:31,899
So, for example, we have a
dataset of counties, right?

1183
00:44:31,899 --> 00:44:33,999
I can see the
different fields that

1184
00:44:33,999 --> 00:44:36,899
I have for my counties
here. All right?

1185
00:44:36,899 --> 00:44:39,219
So if I want to, I can
go over here and I can

1186
00:44:39,219 --> 00:44:42,539
query from this data, right?

1187
00:44:42,539 --> 00:44:44,639
So maybe I want to just
select everything first.

1188
00:44:44,639 --> 00:44:46,379
This is an example of
partition data set.

1189
00:44:46,379 --> 00:44:48,159
We'll eventually talk about
what that means, right?

1190
00:44:48,159 --> 00:44:49,840
There's some information related

1191
00:44:49,840 --> 00:44:51,179
to partitioning down here.

1192
00:44:51,179 --> 00:44:52,699
For now, I'm just going to say,

1193
00:44:52,699 --> 00:44:54,499
let's limit to one row,

1194
00:44:54,499 --> 00:44:57,129
or we'll say let's limit
to like three rows.

1195
00:44:57,129 --> 00:44:59,179
All right. So I may
I run that thing?

1196
00:44:59,179 --> 00:45:01,199
Well, one of the things
that sin quals, up here,

1197
00:45:01,199 --> 00:45:03,299
they're already showing
me how much data

1198
00:45:03,299 --> 00:45:04,679
will be touched when I run it.

1199
00:45:04,679 --> 00:45:06,299
Because they're going
to charge me in

1200
00:45:06,299 --> 00:45:08,699
proportion how much data is
actually touched, right?

1201
00:45:08,699 --> 00:45:10,160
It's a pay as you go service.

1202
00:45:10,160 --> 00:45:13,100
So I'm may run that, and
I will get some results.

1203
00:45:13,100 --> 00:45:14,539
A few counties down here.

1204
00:45:14,539 --> 00:45:17,079
They have these FIPS codes that

1205
00:45:17,079 --> 00:45:20,260
the US Census Bureau uses to
categorize different places.

1206
00:45:20,260 --> 00:45:21,780
I have the county names.

1207
00:45:21,780 --> 00:45:23,359
All of that is there as well.

1208
00:45:23,359 --> 00:45:24,860
And then under the
job information,

1209
00:45:24,860 --> 00:45:29,059
I can see how many bytes were
processed, 182 megabytes.

1210
00:45:29,059 --> 00:45:31,440
It's a column oriented format.

1211
00:45:31,440 --> 00:45:33,460
And so any kind of, like,
row oriented access

1212
00:45:33,460 --> 00:45:35,520
I'm doing is not very efficient.

1213
00:45:35,520 --> 00:45:37,340
I end up touching
a lot of stuff.

1214
00:45:37,340 --> 00:45:39,719
I also see they're
rounding me up in

1215
00:45:39,719 --> 00:45:43,139
terms of the billing
that I have, right?

1216
00:45:43,139 --> 00:45:45,319
Alright, Well, I have all that.

1217
00:45:45,319 --> 00:45:48,359
Let me do a couple
more examples here.

1218
00:45:48,359 --> 00:45:51,999
I want to see if I can find
Dane County here, right?

1219
00:45:51,999 --> 00:45:54,659
And so we will come
through and we will say,

1220
00:45:54,659 --> 00:45:59,700
where county name equals Dane.

1221
00:45:59,700 --> 00:46:01,699
And in this case,
I'm going to try to

1222
00:46:01,699 --> 00:46:03,479
do some fewer things.

1223
00:46:03,479 --> 00:46:05,299
I might say county name,

1224
00:46:05,299 --> 00:46:07,979
and I might say, let's

1225
00:46:07,979 --> 00:46:09,599
figure out what the
FIPS code is for it.

1226
00:46:09,599 --> 00:46:14,109
So I will say, I
think it's GO ID,

1227
00:46:14,109 --> 00:46:17,489
we'll tell me what that FIPS
code is. Let's try that.

1228
00:46:17,489 --> 00:46:20,609
In this case, I can
figure out, Okay,

1229
00:46:20,609 --> 00:46:24,109
this is our number
for our county there.

1230
00:46:24,109 --> 00:46:25,729
And if I look at

1231
00:46:25,729 --> 00:46:27,489
how many bytes or process
is actually much smaller.

1232
00:46:27,489 --> 00:46:28,749
It's like 50 kilobytes.

1233
00:46:28,749 --> 00:46:31,370
It's still rounding me up to
10 megabytes for billing,

1234
00:46:31,370 --> 00:46:34,929
but it's much cheaper than the
previous one. Why is that?

1235
00:46:34,929 --> 00:46:37,149
Well, if I go back over,

1236
00:46:37,149 --> 00:46:40,109
I wonder if I can
see it over here.

1237
00:46:40,109 --> 00:46:43,370
If I look at these counties,

1238
00:46:43,570 --> 00:46:47,329
and maybe a preview of it,

1239
00:46:47,470 --> 00:46:50,049
What I'm going to
see is that they

1240
00:46:50,049 --> 00:46:51,669
have geographic
data here, right?

1241
00:46:51,669 --> 00:46:53,570
They have the boundary
of each county.

1242
00:46:53,570 --> 00:46:55,089
That's a polygon that takes up

1243
00:46:55,089 --> 00:46:56,989
quite a lot of space, right?

1244
00:46:56,989 --> 00:46:58,809
So the main strategy
here, right,

1245
00:46:58,809 --> 00:47:01,029
if I want to have cheaper
queries is I try to

1246
00:47:01,029 --> 00:47:03,829
avoid these really heavy
weight columns, right?

1247
00:47:03,829 --> 00:47:04,989
Most of the billing
is drawing there.

1248
00:47:04,989 --> 00:47:06,109
If I don't need that, then

1249
00:47:06,109 --> 00:47:07,709
avoiding it's going
to make things

1250
00:47:07,709 --> 00:47:10,670
a lot cheaper for
me. Okay, cool.

1251
00:47:10,670 --> 00:47:12,970
So we have all of these
different projects,

1252
00:47:12,970 --> 00:47:14,269
which have different datasets,

1253
00:47:14,269 --> 00:47:15,490
which have different tables.

1254
00:47:15,490 --> 00:47:17,229
And one of the things
that's cool is we can

1255
00:47:17,229 --> 00:47:19,890
do joins across
different tables,

1256
00:47:19,890 --> 00:47:21,650
even if they're in completely
different projects

1257
00:47:21,650 --> 00:47:23,070
owned by different users.

1258
00:47:23,070 --> 00:47:24,309
Very powerful, actually, right?

1259
00:47:24,309 --> 00:47:26,689
If I had some private dataset

1260
00:47:26,689 --> 00:47:28,969
with latitude and
longitude points in it,

1261
00:47:28,969 --> 00:47:30,570
I could join that across

1262
00:47:30,570 --> 00:47:32,930
the public dataset here
where there are counties.

1263
00:47:32,930 --> 00:47:35,129
I can figure out, well this
latitude and latitude point

1264
00:47:35,129 --> 00:47:37,009
is inside of that county, right?

1265
00:47:37,009 --> 00:47:38,830
I wouldn't have to get
all that data myself.

1266
00:47:38,830 --> 00:47:40,189
I may do a simpler join.

1267
00:47:40,189 --> 00:47:42,369
I just want to see how I can

1268
00:47:42,369 --> 00:47:46,049
get all of the counties
in Wisconsin, right?

1269
00:47:46,049 --> 00:47:47,329
So I want to do that, so I may

1270
00:47:47,329 --> 00:47:51,179
select from the
counties up here,

1271
00:47:51,179 --> 00:47:54,820
and I am going to
join to the states.

1272
00:47:54,820 --> 00:47:58,185
I'm going to say
interjoin states.

1273
00:47:58,185 --> 00:48:01,409
Then I have to say what
what I'm joining on.

1274
00:48:01,409 --> 00:48:04,329
I'll say counties so
check my notes here.

1275
00:48:04,329 --> 00:48:08,029
It's State PIPs
code equals state,

1276
00:48:08,029 --> 00:48:11,129
State PIPs Code, can do that.

1277
00:48:11,129 --> 00:48:12,849
And then I'm going to say where

1278
00:48:12,849 --> 00:48:16,289
state name equals Wisconsin.

1279
00:48:16,289 --> 00:48:17,849
We just like to
figure out what are

1280
00:48:17,849 --> 00:48:19,029
all the counties here?

1281
00:48:19,029 --> 00:48:20,429
I already say I'm
getting an error here

1282
00:48:20,429 --> 00:48:22,029
and it's say unrecognized name.

1283
00:48:22,029 --> 00:48:24,149
And the reason counties
is unrecognized

1284
00:48:24,149 --> 00:48:26,709
is because I have the fully
qualified name up here.

1285
00:48:26,709 --> 00:48:30,309
The fully qualified name
goes project dataset table.

1286
00:48:30,309 --> 00:48:32,750
And so even though it's
already named counties,

1287
00:48:32,750 --> 00:48:34,289
I need to say counties here,

1288
00:48:34,289 --> 00:48:36,369
and I have to say states here.

1289
00:48:36,369 --> 00:48:39,074
I try that. I think I'm
still have a little problem.

1290
00:48:39,074 --> 00:48:41,859
That's saying GID is ambiguous.

1291
00:48:41,859 --> 00:48:43,579
That means that
both counties and

1292
00:48:43,579 --> 00:48:45,619
states has a GOID, right?

1293
00:48:45,619 --> 00:48:50,740
So in this case, I'm may say
this is the counties GID.

1294
00:48:50,740 --> 00:48:52,459
And what else would
I need? I might need

1295
00:48:52,459 --> 00:48:54,359
to have a state name. All right.

1296
00:48:54,359 --> 00:48:56,099
So let's try running this.

1297
00:48:56,099 --> 00:48:58,819
And this looks
correct to me, right?

1298
00:48:58,819 --> 00:49:01,340
These are like Door
County, Bayfield County.

1299
00:49:01,340 --> 00:49:03,540
There's probably Dane
County in here somewhere.

1300
00:49:03,540 --> 00:49:05,560
I can go through and I
can run these queries.

1301
00:49:05,560 --> 00:49:08,519
You know, I would work just
as well if these were in

1302
00:49:08,519 --> 00:49:12,099
completely different
projects. All right.

1303
00:49:12,099 --> 00:49:14,980
Any questions about any of
this stuff in the council?

1304
00:49:16,110 --> 00:49:18,329
Right. Cool. So I have

1305
00:49:18,329 --> 00:49:19,929
1 minute left. So I I
have a break there.

1306
00:49:19,929 --> 00:49:21,709
And next time we're going
to come back and see how

1307
00:49:21,709 --> 00:49:23,830
we can authenticate
for certain scope,

1308
00:49:23,830 --> 00:49:27,430
so we can do the same stuff
in a Jupiter notebook.

1309
00:49:27,430 --> 00:49:28,669
Have a fantastic day,

1310
00:49:28,669 --> 00:49:31,989
and if I don't see you
Wednesday, have a great break.
