1
00:00:00,000 --> 00:00:01,800
Great to see
everybody here today.

2
00:00:01,800 --> 00:00:04,740
I'm really excited to start
a new semester with you all.

3
00:00:04,740 --> 00:00:06,220
How is the volume in the back?

4
00:00:06,220 --> 00:00:07,520
It sounds a little echoy for me.

5
00:00:07,520 --> 00:00:09,659
Is the volume good in
the back? It's bad.

6
00:00:09,659 --> 00:00:12,599
Is it should it be
louder or quieter?

7
00:00:12,760 --> 00:00:17,519
Louder. Okay. And how
is that in the back?

8
00:00:19,200 --> 00:00:23,279
Does thumbs down mean
quieter or it's bad.

9
00:00:23,480 --> 00:00:26,240
It's led. It's muffled.

10
00:00:26,240 --> 00:00:32,099
Hm. Yeah. So people are
saying it's muffled.

11
00:00:32,099 --> 00:00:34,520
Oh, is that better?

12
00:01:02,730 --> 00:01:05,610
How is that? Is it
good in the back?

13
00:01:05,610 --> 00:01:07,550
Okay, I'm seeing a few
people and nod their head.

14
00:01:07,550 --> 00:01:09,350
Yes. So, that's fantastic.

15
00:01:09,350 --> 00:01:12,650
So welcome to Intro to
Big Data Systems, 544.

16
00:01:12,650 --> 00:01:14,929
Really excited to have you
all here this semester.

17
00:01:14,929 --> 00:01:18,249
I've taught a bunch of courses
here at Wisconsin now,

18
00:01:18,249 --> 00:01:19,969
and I think this is a favorite

19
00:01:19,969 --> 00:01:21,850
my favorite thing
that I've taught.

20
00:01:21,850 --> 00:01:23,629
I'm going to do a
few things today.

21
00:01:23,629 --> 00:01:26,190
We're going to do some
introductions of myself, of,

22
00:01:26,190 --> 00:01:28,530
of the course, try to
understand the logistics,

23
00:01:28,530 --> 00:01:30,510
the tools, the resources
available to us.

24
00:01:30,510 --> 00:01:31,790
And then a time permitting,

25
00:01:31,790 --> 00:01:32,909
we're going to jump into

26
00:01:32,909 --> 00:01:36,989
some actual resources
related to computing.

27
00:01:36,989 --> 00:01:38,729
When we're working with systems,

28
00:01:38,729 --> 00:01:39,989
we're trying to figure
out how to manage

29
00:01:39,989 --> 00:01:41,789
resources in an efficient way.

30
00:01:41,789 --> 00:01:43,190
And then finally, at the end,

31
00:01:43,190 --> 00:01:45,865
we might talk briefly about
how we deploy systems.

32
00:01:45,865 --> 00:01:48,200
So, my name is Tyler
Carraza Harder.

33
00:01:48,200 --> 00:01:49,640
You can just call me Tyler.

34
00:01:49,640 --> 00:01:50,819
I use mail pronouns.

35
00:01:50,819 --> 00:01:53,900
I have my e mail up
there on the slide,

36
00:01:53,900 --> 00:01:55,079
so feel free to drop me an e

37
00:01:55,079 --> 00:01:56,839
mail if you want
to get in touch.

38
00:01:56,839 --> 00:01:59,199
I've spent most of
my career teaching,

39
00:01:59,199 --> 00:02:01,119
but I have spent some
time in industry.

40
00:02:01,119 --> 00:02:03,659
I was at Microsoft for a
while working in SQL Server.

41
00:02:03,659 --> 00:02:05,819
I've done various
collaborations and internships.

42
00:02:05,819 --> 00:02:07,300
Most recently, I've
been working with

43
00:02:07,300 --> 00:02:10,799
a company Bow plan on some
data engineering tooling.

44
00:02:10,799 --> 00:02:13,520
I'm also really big
into Open source.

45
00:02:13,520 --> 00:02:15,299
The Open Source project I'm most

46
00:02:15,299 --> 00:02:17,330
involved in is
called Open Lambda.

47
00:02:17,330 --> 00:02:20,000
Kind of similar to
Amazon's AWS Lambda.

48
00:02:20,000 --> 00:02:22,579
Maybe some of you have run
across it or maybe not.

49
00:02:22,579 --> 00:02:24,920
But basically, it's a way to run

50
00:02:24,920 --> 00:02:26,879
small Python functions in

51
00:02:26,879 --> 00:02:29,859
an isolated environment in
response to vari SE bents.

52
00:02:29,859 --> 00:02:31,900
So sometimes students help
out with those projects.

53
00:02:31,900 --> 00:02:33,400
So if your interest
in open source

54
00:02:33,400 --> 00:02:35,620
or or servlus computing,

55
00:02:35,620 --> 00:02:36,999
you know, drop me a note,

56
00:02:36,999 --> 00:02:38,760
and we can always chat
about it further.

57
00:02:38,760 --> 00:02:40,360
So I want to get
a quick sense of

58
00:02:40,360 --> 00:02:42,559
who is in the room right now.

59
00:02:42,559 --> 00:02:45,619
Do we have any freshmen or
sophomores in the room?

60
00:02:45,619 --> 00:02:47,679
So like, maybe like two,

61
00:02:47,679 --> 00:02:49,575
how many juniors are here?

62
00:02:49,575 --> 00:02:52,769
And seniors. So pretty
heavy on seniors.

63
00:02:52,769 --> 00:02:54,310
We have many grad students.

64
00:02:54,310 --> 00:02:56,409
So a few and not as many
as in the first thing.

65
00:02:56,409 --> 00:02:57,650
So we kind of have
a good spread.

66
00:02:57,650 --> 00:02:59,589
I think this is really good for

67
00:02:59,589 --> 00:03:00,969
people at a variety of levels.

68
00:03:00,969 --> 00:03:02,449
I do want to point
out for the graduate

69
00:03:02,449 --> 00:03:04,050
students that there's
another course,

70
00:03:04,050 --> 00:03:05,909
which is just big data systems,

71
00:03:05,909 --> 00:03:07,149
not enter the big data systems,

72
00:03:07,149 --> 00:03:08,750
and they're more
focused on research

73
00:03:08,750 --> 00:03:10,190
around big data systems.

74
00:03:10,190 --> 00:03:13,889
How can you build new big data
systems, things like that?

75
00:03:13,889 --> 00:03:15,489
Whereas we're really
focused on kind of

76
00:03:15,489 --> 00:03:18,210
hands on experience
with these systems.

77
00:03:18,960 --> 00:03:21,660
There's a couple of
pathways into this course.

78
00:03:21,660 --> 00:03:23,860
You could take 320 and or 400.

79
00:03:23,860 --> 00:03:25,819
How many of you have
taken both of those?

80
00:03:25,819 --> 00:03:29,819
Okay, just a few, how many
are coming from the 320 side,

81
00:03:29,819 --> 00:03:31,859
and then the 400 side.

82
00:03:31,859 --> 00:03:33,720
So pretty split. Last time

83
00:03:33,720 --> 00:03:35,359
I taught it was mostly
from the 400 sides.

84
00:03:35,359 --> 00:03:36,679
It's good to see kind
of people coming

85
00:03:36,679 --> 00:03:38,560
through various paths.

86
00:03:38,560 --> 00:03:40,820
What about any of these other
courses that are related?

87
00:03:40,820 --> 00:03:42,020
The operating system course,

88
00:03:42,020 --> 00:03:43,420
database course or
networking course.

89
00:03:43,420 --> 00:03:46,099
Is anybody taken any of
those handful of you.

90
00:03:46,099 --> 00:03:48,460
All I will say there
is there's a lot of

91
00:03:48,460 --> 00:03:50,800
overlap between the first third
of this course and there,

92
00:03:50,800 --> 00:03:52,099
so don't get complacent, right?

93
00:03:52,099 --> 00:03:54,339
It's trying to get harder
if you've taken those,

94
00:03:54,339 --> 00:03:56,099
but the first part of the
semester might be a little

95
00:03:56,099 --> 00:03:59,079
easier if you have some
of that other experience.

96
00:03:59,200 --> 00:04:01,220
So I want to just survey

97
00:04:01,220 --> 00:04:02,619
people so I have
actual date on this.

98
00:04:02,619 --> 00:04:05,160
So please do fill out this form.

99
00:04:05,160 --> 00:04:06,759
And and then so I just

100
00:04:06,759 --> 00:04:08,739
know who you are and
what your background is.

101
00:04:08,739 --> 00:04:10,279
And that'd be a huge help to me.

102
00:04:10,279 --> 00:04:12,220
And it's worth, you
know, some small amount

103
00:04:12,220 --> 00:04:14,199
of extra credit if you do it.

104
00:04:14,199 --> 00:04:16,859
Here's a picture of
the various courses

105
00:04:16,859 --> 00:04:18,280
that are related to this one.

106
00:04:18,280 --> 00:04:21,949
U We have a couple
majors related.

107
00:04:21,949 --> 00:04:24,029
One is data science, and
the data science majors

108
00:04:24,029 --> 00:04:25,649
actually take a bunch
of ventral courses,

109
00:04:25,649 --> 00:04:27,769
but most relevant to us
is the Python tracks.

110
00:04:27,769 --> 00:04:30,050
That's 22320, and then

111
00:04:30,050 --> 00:04:31,770
you could take this
course right here.

112
00:04:31,770 --> 00:04:33,429
And having previously
taught 320,

113
00:04:33,429 --> 00:04:35,989
I really built this course
with the 320 student in mind.

114
00:04:35,989 --> 00:04:37,150
I thought about, what is

115
00:04:37,150 --> 00:04:38,669
their level of
python experience?

116
00:04:38,669 --> 00:04:39,830
All of that. This
is designed for

117
00:04:39,830 --> 00:04:41,404
students coming out of 320.

118
00:04:41,404 --> 00:04:43,740
There's also a path over here.

119
00:04:43,740 --> 00:04:46,939
All the computer science
students take 200300400,

120
00:04:46,939 --> 00:04:49,120
and that's in Java, and

121
00:04:49,120 --> 00:04:50,839
that's also a path
do this course,

122
00:04:50,839 --> 00:04:52,820
but you know, you've
had three CS courses.

123
00:04:52,820 --> 00:04:54,719
I'm not going to
teach you Python.

124
00:04:54,719 --> 00:04:57,200
I'm expecting you'll just try
to figure it out as you go.

125
00:04:57,200 --> 00:04:58,820
Some ways you could
do that is you

126
00:04:58,820 --> 00:05:00,199
could read this
stink Python book,

127
00:05:00,199 --> 00:05:02,080
which is pretty
introductory to Python.

128
00:05:02,080 --> 00:05:03,620
This fluent Python book is

129
00:05:03,620 --> 00:05:05,899
a more advanced python
book, which is excellent.

130
00:05:05,899 --> 00:05:08,039
I've learned quite a
bit from it myself.

131
00:05:08,039 --> 00:05:10,240
I think, regardless
of your python level,

132
00:05:10,240 --> 00:05:12,555
you probably learn something
if you pick it up.

133
00:05:12,555 --> 00:05:15,330
Other courses related
to this is that

134
00:05:15,330 --> 00:05:19,350
CS students take the
systems Track 252, 354,

135
00:05:19,350 --> 00:05:21,309
that's definitely relevant
to what we're doing,

136
00:05:21,309 --> 00:05:23,449
but it's not a prerequisite
because again,

137
00:05:23,449 --> 00:05:25,670
this course is really
designed to be accessible to

138
00:05:25,670 --> 00:05:27,150
data science majors who are not

139
00:05:27,150 --> 00:05:29,850
taking some of those
other CS courses.

140
00:05:29,850 --> 00:05:33,330
Some universities with a
big data science course

141
00:05:33,330 --> 00:05:34,570
might have prerequisites like

142
00:05:34,570 --> 00:05:36,889
operating systems or
databases or not working.

143
00:05:36,889 --> 00:05:38,210
That kind of makes sense from

144
00:05:38,210 --> 00:05:39,549
the perspective of the content,

145
00:05:39,549 --> 00:05:40,329
but then it makes

146
00:05:40,329 --> 00:05:41,850
the course not accessible
to that many people,

147
00:05:41,850 --> 00:05:43,230
and there's a lot of
things here that you can

148
00:05:43,230 --> 00:05:45,209
learn quickly and
directly apply.

149
00:05:45,209 --> 00:05:46,890
And so I'm going to spend

150
00:05:46,890 --> 00:05:47,910
about a third of the semester I

151
00:05:47,910 --> 00:05:49,090
try just the bare minimum of

152
00:05:49,090 --> 00:05:51,210
those different areas
so we can get into

153
00:05:51,210 --> 00:05:52,290
big data systems without

154
00:05:52,290 --> 00:05:53,689
having to go take a
whole another course.

155
00:05:53,689 --> 00:05:54,909
I'm just trying to try switching

156
00:05:54,909 --> 00:05:57,070
the mic quick because
I don't know,

157
00:05:57,070 --> 00:05:59,590
if it still just kind of
sounds bad to me up here.

158
00:05:59,590 --> 00:06:02,429
Let me see if the
other mic is better.

159
00:06:24,970 --> 00:06:28,150
Is that any better? Can
people hear me well?

160
00:06:28,150 --> 00:06:30,129
Okay, I see some happy faces.

161
00:06:30,129 --> 00:06:33,129
So, I visit all my
classrooms before I teach,

162
00:06:33,129 --> 00:06:35,350
and I don't remember it sounding
that horrible last time.

163
00:06:35,350 --> 00:06:37,329
So hopefully, it was just
the mic, and we're good now.

164
00:06:37,329 --> 00:06:39,590
But now I hear it crinkling
ale bit again. All right.

165
00:06:39,590 --> 00:06:43,209
Fingers crossed. Great. So
those are the other courses.

166
00:06:43,209 --> 00:06:45,669
Let me talk briefly
about what our systems,

167
00:06:45,669 --> 00:06:48,369
since we're learning
about big data systems.

168
00:06:48,369 --> 00:06:50,149
As a programmer, the's different

169
00:06:50,149 --> 00:06:52,370
kinds of code you might write.

170
00:06:52,370 --> 00:06:54,409
In one case, maybe

171
00:06:54,409 --> 00:06:57,029
you're given some question
that you have to answer,

172
00:06:57,029 --> 00:06:59,150
and you go off and
write some code to

173
00:06:59,150 --> 00:07:01,110
analyze some dataset
and get that answer,

174
00:07:01,110 --> 00:07:02,010
maybe it runs once,

175
00:07:02,010 --> 00:07:03,509
or maybe if the answer
keeps changing,

176
00:07:03,509 --> 00:07:04,830
there's new data,
maybe it runs on

177
00:07:04,830 --> 00:07:06,570
some schedule. That's
analysis code.

178
00:07:06,570 --> 00:07:08,430
Maybe you make some
plots from doing that.

179
00:07:08,430 --> 00:07:10,150
Other kinds of code people like

180
00:07:10,150 --> 00:07:11,849
to write as application code.

181
00:07:11,849 --> 00:07:13,749
Right now I'm using
an application

182
00:07:13,749 --> 00:07:15,509
called keynote for
showing you these slides,

183
00:07:15,509 --> 00:07:16,750
and it will kind of run as long

184
00:07:16,750 --> 00:07:18,310
as I'm using it, and
I'll close it out.

185
00:07:18,310 --> 00:07:20,489
And I might use it many times.

186
00:07:20,489 --> 00:07:23,530
Any kind of website is backed
by some application, right?

187
00:07:23,530 --> 00:07:26,445
It's running there and
serving up web pages to you.

188
00:07:26,445 --> 00:07:29,079
And so some people prefer
that kind of programming.

189
00:07:29,079 --> 00:07:30,760
You know, you all are probably
in the stage of trying to

190
00:07:30,760 --> 00:07:32,520
figure out what kind of
programming you like to do.

191
00:07:32,520 --> 00:07:34,800
And I'd say a third
major category

192
00:07:34,800 --> 00:07:37,260
of programming is
systems programming.

193
00:07:37,260 --> 00:07:40,180
When I'm building
a website, right?

194
00:07:40,180 --> 00:07:41,960
I'm serving up web
pages to people.

195
00:07:41,960 --> 00:07:45,119
The content of those web
pages exist somewhere,

196
00:07:45,119 --> 00:07:47,400
and the way it exists
is as bits on,

197
00:07:47,400 --> 00:07:49,404
say, a hard driver, and SSD.

198
00:07:49,404 --> 00:07:51,869
And if I'm programming
a website,

199
00:07:51,869 --> 00:07:53,590
I don't want to have
to worry about bits or

200
00:07:53,590 --> 00:07:55,770
ones and zeros.
What a pain, right?

201
00:07:55,770 --> 00:07:57,490
And the reason I
don't have to is

202
00:07:57,490 --> 00:07:59,489
because as my
application is running,

203
00:07:59,489 --> 00:08:00,789
it's using a file system.

204
00:08:00,789 --> 00:08:02,629
That file system shows me files,

205
00:08:02,629 --> 00:08:05,090
and that file system is kind
of in charge of worrying

206
00:08:05,090 --> 00:08:06,170
about these ones and zeros that

207
00:08:06,170 --> 00:08:07,589
are start on a hard
drive somewhere.

208
00:08:07,589 --> 00:08:08,969
So when we're talking
about systems,

209
00:08:08,969 --> 00:08:10,069
we're talking about software

210
00:08:10,069 --> 00:08:11,730
that's kind of playing
a supporting role.

211
00:08:11,730 --> 00:08:14,529
It's managing hardware and
making that hardware easier

212
00:08:14,529 --> 00:08:16,069
to use for people
writing analysis

213
00:08:16,069 --> 00:08:17,809
code or applications code.

214
00:08:17,809 --> 00:08:19,649
So this is going to
be super important

215
00:08:19,649 --> 00:08:21,110
to you regardless
what you go into.

216
00:08:21,110 --> 00:08:23,229
Some of you might go
build new systems,

217
00:08:23,229 --> 00:08:24,610
but even if not, you're

218
00:08:24,610 --> 00:08:26,249
always going to be
interacting with systems.

219
00:08:26,249 --> 00:08:27,830
And if you know how
those systems work,

220
00:08:27,830 --> 00:08:30,330
you can get better
performance out of them.

221
00:08:30,330 --> 00:08:32,290
And you can also anticipate

222
00:08:32,290 --> 00:08:33,370
weird things that can happen

223
00:08:33,370 --> 00:08:34,710
different failure
scenarios where you

224
00:08:34,710 --> 00:08:36,029
might lose data or
things like that

225
00:08:36,029 --> 00:08:37,869
because you know what
these systems are

226
00:08:37,869 --> 00:08:39,670
guarantee you and under

227
00:08:39,670 --> 00:08:41,809
what circumstances they
break down, right?

228
00:08:41,809 --> 00:08:44,064
So we want to learn
how systems work.

229
00:08:44,064 --> 00:08:46,619
There are lots of systems,
an operating system,

230
00:08:46,619 --> 00:08:48,299
which kind of the composed
of many subsystems

231
00:08:48,299 --> 00:08:49,579
running on my laptop right now.

232
00:08:49,579 --> 00:08:51,199
Those are not big data systems.

233
00:08:51,199 --> 00:08:52,880
So what are big data systems?

234
00:08:52,880 --> 00:08:54,540
Maybe it's a little
bit hard to define.

235
00:08:54,540 --> 00:08:56,160
But in my mind,

236
00:08:56,160 --> 00:08:57,560
what I imagine is that often

237
00:08:57,560 --> 00:08:58,760
we're working with
some data set,

238
00:08:58,760 --> 00:09:00,479
either for an
application or analysis,

239
00:09:00,479 --> 00:09:02,739
and that data might keep
growing and growing.

240
00:09:02,739 --> 00:09:04,960
And what do we do as
that keep strawing?

241
00:09:04,960 --> 00:09:06,519
One thing you can do is you can

242
00:09:06,519 --> 00:09:08,579
try to write more
efficient code, right?

243
00:09:08,579 --> 00:09:12,399
Maybe you go take 577 and
learn about algorithms and

244
00:09:12,399 --> 00:09:15,380
complexity and write algorithms

245
00:09:15,380 --> 00:09:17,279
with a better complexity class,

246
00:09:17,279 --> 00:09:19,520
or maybe you just learn
in general about how

247
00:09:19,520 --> 00:09:22,294
to streamline things
and avoid waste.

248
00:09:22,294 --> 00:09:24,589
What we're really interested
in is the other case where

249
00:09:24,589 --> 00:09:27,209
maybe you kind of played that
out as far as it will go.

250
00:09:27,209 --> 00:09:28,929
And we're to the
point of we need

251
00:09:28,929 --> 00:09:31,009
more resources or
better resources.

252
00:09:31,009 --> 00:09:32,329
So I think our main focus of

253
00:09:32,329 --> 00:09:34,409
those course is when we
have datasets that it's

254
00:09:34,409 --> 00:09:35,729
not very practical
to just kind of

255
00:09:35,729 --> 00:09:37,870
analyze it or work with
it on one computer.

256
00:09:37,870 --> 00:09:39,490
Maybe we need a
cluster of computers

257
00:09:39,490 --> 00:09:41,370
working together to
work with that data,

258
00:09:41,370 --> 00:09:43,510
or maybe you need some kind
of specialized hardware.

259
00:09:43,510 --> 00:09:45,469
Like a lot of people
are using GPUs now,

260
00:09:45,469 --> 00:09:46,970
originally built for graphics,

261
00:09:46,970 --> 00:09:49,549
but very useful for a
lot of analysis and

262
00:09:49,549 --> 00:09:52,630
machine learning and other
things in that space,

263
00:09:52,630 --> 00:09:54,450
right, maybe you need
some specialized hardware

264
00:09:54,450 --> 00:09:56,115
for dealing with your problem.

265
00:09:56,115 --> 00:09:58,240
So what are you going
to learn this semester?

266
00:09:58,240 --> 00:09:59,260
A few things.

267
00:09:59,260 --> 00:10:00,720
If you're lucky, maybe someday

268
00:10:00,720 --> 00:10:02,259
you'll be working somewhere
where somebody else

269
00:10:02,259 --> 00:10:04,099
deploys these big data systems

270
00:10:04,099 --> 00:10:05,319
for you and you just use them.

271
00:10:05,319 --> 00:10:06,679
But I think a lot
of us are going to

272
00:10:06,679 --> 00:10:08,180
go on and have to deploy
these things ourselves.

273
00:10:08,180 --> 00:10:09,659
We have to have to
figure out how to get

274
00:10:09,659 --> 00:10:11,639
it running on
computer somewhere.

275
00:10:11,639 --> 00:10:13,339
That's often very challenging.

276
00:10:13,339 --> 00:10:15,399
It comes with troubleshooting
skills that we

277
00:10:15,399 --> 00:10:17,860
need to learn to get these
things up up and running.

278
00:10:17,860 --> 00:10:18,899
When the ones are
up and running,

279
00:10:18,899 --> 00:10:19,819
we want to figure out how to get

280
00:10:19,819 --> 00:10:22,140
data on them so we can
actually start using them.

281
00:10:22,140 --> 00:10:24,880
I want you to be able
to efficiently analyze

282
00:10:24,880 --> 00:10:26,460
large datasets on these various

283
00:10:26,460 --> 00:10:28,970
systems and train machine
learning models from them.

284
00:10:28,970 --> 00:10:30,440
When we're doing all
this, we're using

285
00:10:30,440 --> 00:10:31,540
various computing resources.

286
00:10:31,540 --> 00:10:32,759
I want to be able
to measure that

287
00:10:32,759 --> 00:10:34,599
and optimize it and improve it.

288
00:10:34,599 --> 00:10:35,400
And then finally,

289
00:10:35,400 --> 00:10:36,919
the last couple of
weeks of the semester,

290
00:10:36,919 --> 00:10:39,659
we're going to look at various
Cloud services, right?

291
00:10:39,659 --> 00:10:42,079
More and more of this work
is moving to the Cloud.

292
00:10:42,079 --> 00:10:43,760
And that's just going
to be a critical skill

293
00:10:43,760 --> 00:10:45,280
for all of you in your careers,

294
00:10:45,280 --> 00:10:47,244
or at least the vast
majority of you.

295
00:10:47,244 --> 00:10:49,189
That's the what the
semester looks like.

296
00:10:49,189 --> 00:10:50,389
Those are the goals.
Hopefully that

297
00:10:50,389 --> 00:10:51,550
aligns with your interests.

298
00:10:51,550 --> 00:10:53,689
Today, we have just a
few narrower goals.

299
00:10:53,689 --> 00:10:55,349
I want you to just remember

300
00:10:55,349 --> 00:10:57,329
the logistics and
policies of the course.

301
00:10:57,329 --> 00:10:58,750
I want you to be
able to describe

302
00:10:58,750 --> 00:11:01,130
four major categories
of hardware resources.

303
00:11:01,130 --> 00:11:02,889
I want you to be able
to compare and contrast

304
00:11:02,889 --> 00:11:05,130
a scale up approach versus
a scale out approach.

305
00:11:05,130 --> 00:11:06,270
And then finally, where I spend

306
00:11:06,270 --> 00:11:07,950
a little bit time going a little

307
00:11:07,950 --> 00:11:10,950
deeper on what actually
happens when we run our code?

308
00:11:10,950 --> 00:11:12,409
How do we get code
in a language like

309
00:11:12,409 --> 00:11:15,245
Python or Java to run on a CPU?

310
00:11:15,245 --> 00:11:17,259
Okay. So first, let's
talk about some

311
00:11:17,259 --> 00:11:18,959
of the tools and
websites we have.

312
00:11:18,959 --> 00:11:21,280
There's three main websites
that we'll be using.

313
00:11:21,280 --> 00:11:22,819
I'm just trying to pop
over the first one.

314
00:11:22,819 --> 00:11:24,019
This is the most important one

315
00:11:24,019 --> 00:11:25,439
because it links to
everything else.

316
00:11:25,439 --> 00:11:27,360
This is a public facing website.

317
00:11:27,360 --> 00:11:28,920
I like to have
public facing stuff

318
00:11:28,920 --> 00:11:30,100
because and it's
easier for you to

319
00:11:30,100 --> 00:11:31,300
access it later on or for

320
00:11:31,300 --> 00:11:33,160
people to sit in or do whatever.

321
00:11:33,160 --> 00:11:34,459
This will be the
main place to go.

322
00:11:34,459 --> 00:11:35,619
It has links to everything else

323
00:11:35,619 --> 00:11:36,760
you need like the syllabus.

324
00:11:36,760 --> 00:11:38,400
On each day, we can
see what is there.

325
00:11:38,400 --> 00:11:39,620
So you can see that today,

326
00:11:39,620 --> 00:11:40,979
your reading the syllabus.

327
00:11:40,979 --> 00:11:43,660
Please go read that. I have
the slides from today.

328
00:11:43,660 --> 00:11:45,839
There's some flash cards
I'm going to come back to.

329
00:11:45,839 --> 00:11:47,240
Later, I plan to post

330
00:11:47,240 --> 00:11:50,499
a lecture recording
on here as well.

331
00:11:50,499 --> 00:11:53,299
You know, I think, by the way,

332
00:11:53,299 --> 00:11:54,620
I'm recording right
now, in case,

333
00:11:54,620 --> 00:11:56,560
I it matters to anybody.

334
00:11:56,560 --> 00:11:58,039
I encourage you to
still ask questions,

335
00:11:58,039 --> 00:11:59,319
even though it's recorded, but

336
00:11:59,319 --> 00:12:01,200
everybody can make
their own decision.

337
00:12:01,200 --> 00:12:03,339
In general, I just record,
and then I post it.

338
00:12:03,339 --> 00:12:05,279
Sometimes there's
technical difficulties,

339
00:12:05,279 --> 00:12:06,660
and then while
there's no recording,

340
00:12:06,660 --> 00:12:09,019
I'm not trying to redo a
lecture for the sake of that,

341
00:12:09,019 --> 00:12:10,499
but I see no problem in just

342
00:12:10,499 --> 00:12:13,319
posting a recording if I
have it available to me.

343
00:12:13,319 --> 00:12:14,639
I generally plan to do that.

344
00:12:14,639 --> 00:12:15,719
So all that stuff there, right?

345
00:12:15,719 --> 00:12:16,980
You should take a look at

346
00:12:16,980 --> 00:12:18,780
the core schedule, you
should read the syllabus.

347
00:12:18,780 --> 00:12:20,399
There's a tab for
getting help, right?

348
00:12:20,399 --> 00:12:21,659
There's lots of
different options,

349
00:12:21,659 --> 00:12:23,959
Async, or synchronous,
however you like.

350
00:12:23,959 --> 00:12:25,599
P help when you need it.

351
00:12:25,599 --> 00:12:27,280
There's various
resources over here,

352
00:12:27,280 --> 00:12:29,170
like an office hour schedule.

353
00:12:29,170 --> 00:12:30,859
And then all the
other tools that

354
00:12:30,859 --> 00:12:32,300
you need to care about
for this course.

355
00:12:32,300 --> 00:12:34,619
That's the main site that
you need to remember.

356
00:12:34,619 --> 00:12:37,660
What else do we have?
We have a Canvas.

357
00:12:37,660 --> 00:12:38,980
You know, Some people love

358
00:12:38,980 --> 00:12:40,559
Canvas and they use
it for everything.

359
00:12:40,559 --> 00:12:42,119
I don't love Canvas, but there's

360
00:12:42,119 --> 00:12:43,360
a few things that does nicely,

361
00:12:43,360 --> 00:12:44,640
so I will do all the
announcements there,

362
00:12:44,640 --> 00:12:46,040
so you'll never
get another e mail

363
00:12:46,040 --> 00:12:47,580
from me. You're going
to find it here.

364
00:12:47,580 --> 00:12:49,300
Make sure you turn on
your announcements

365
00:12:49,300 --> 00:12:50,779
or your e mail reminder,

366
00:12:50,779 --> 00:12:53,160
so you don't mess a Canvas
announcement, please.

367
00:12:53,160 --> 00:12:55,420
I use it for weekly quizzes.

368
00:12:55,420 --> 00:12:56,639
So there's going
to be a quiz due

369
00:12:56,639 --> 00:13:00,540
next Wednesday on the
content of this week.

370
00:13:00,540 --> 00:13:02,400
I use it for grading summaries.

371
00:13:02,400 --> 00:13:04,579
So, there's a few
things that what we'll

372
00:13:04,579 --> 00:13:07,754
use on Canvas. What
else do we have?

373
00:13:07,754 --> 00:13:11,810
We have this repository
here, which is on Git Hub.

374
00:13:11,810 --> 00:13:15,110
And how many of you have
used Git Hub before?

375
00:13:15,110 --> 00:13:16,849
Fantastic. A lot of you.

376
00:13:16,849 --> 00:13:18,150
I often have some stuff here.

377
00:13:18,150 --> 00:13:20,009
The kinds of things I do here is

378
00:13:20,009 --> 00:13:22,449
I post project description.
So here's P one.

379
00:13:22,449 --> 00:13:24,450
You know, I'm kind of coming
from this background of,

380
00:13:24,450 --> 00:13:25,530
like, everything's open source.

381
00:13:25,530 --> 00:13:26,410
You don't have to
have everything

382
00:13:26,410 --> 00:13:27,569
polished before it's done.

383
00:13:27,569 --> 00:13:30,210
So you can see, what I'm
thinking about for the project,

384
00:13:30,210 --> 00:13:31,350
but it's not ready yet.

385
00:13:31,350 --> 00:13:32,890
So don't do it because
it might change

386
00:13:32,890 --> 00:13:34,770
until that notice goes away,

387
00:13:34,770 --> 00:13:36,409
and I tell you, hey,
go ahead and start.

388
00:13:36,409 --> 00:13:37,989
But yeah, that stuff is there,

389
00:13:37,989 --> 00:13:41,349
kind of general project
policies, some testing stuff.

390
00:13:41,349 --> 00:13:43,770
I like to do a lot of
examples during lecture,

391
00:13:43,770 --> 00:13:45,450
and so I might be
posting those examples

392
00:13:45,450 --> 00:13:48,530
to the Git repository
when I've done as well.

393
00:13:48,530 --> 00:13:50,729
This might actually
change because I'm

394
00:13:50,729 --> 00:13:53,489
looking at moving towards
Gitlab this semester.

395
00:13:53,489 --> 00:13:55,270
Kind of strangely,
GitHub has trouble

396
00:13:55,270 --> 00:13:57,450
scaling when you start to
have hundreds of students,

397
00:13:57,450 --> 00:13:58,909
and it does some
weird things with

398
00:13:58,909 --> 00:14:00,449
respect to how they
manage rosters.

399
00:14:00,449 --> 00:14:02,230
So, you know, Git
Lab looks like they

400
00:14:02,230 --> 00:14:04,250
actually do it better even
though Git Lab is less known.

401
00:14:04,250 --> 00:14:06,030
Has anybody use Git Lab before?

402
00:14:06,030 --> 00:14:08,029
A few of you. So by the
end, all of you will.

403
00:14:08,029 --> 00:14:08,709
So I guess that's

404
00:14:08,709 --> 00:14:10,050
another thing we get to
learn this semester.

405
00:14:10,050 --> 00:14:11,889
Looks like even though
they're not as famous,

406
00:14:11,889 --> 00:14:13,769
they kind of do things
a little bit better.

407
00:14:13,769 --> 00:14:16,989
So we're going to be
transitioning, you know, soon.

408
00:14:17,070 --> 00:14:23,109
Oh, Zoom office hours are
also on on that on Canvas.

409
00:14:23,109 --> 00:14:25,410
You can find that
there. Some other tools

410
00:14:25,410 --> 00:14:27,150
that we have is top hat.

411
00:14:27,150 --> 00:14:28,550
How many of you
have used top hat

412
00:14:28,550 --> 00:14:31,009
before? Fantastic, right?

413
00:14:31,009 --> 00:14:34,649
So I'm not going to
make top hat required.

414
00:14:34,649 --> 00:14:35,930
It's going to be
for extra credit,

415
00:14:35,930 --> 00:14:37,749
some small amount of
extra credit that will

416
00:14:37,749 --> 00:14:40,294
saturate at 4% of your grade.

417
00:14:40,294 --> 00:14:43,440
So you can totally get an
A and never do a top hat,

418
00:14:43,440 --> 00:14:44,000
but I think it's

419
00:14:44,000 --> 00:14:45,819
a small incentive to
come here to lecture.

420
00:14:45,819 --> 00:14:47,459
I don't care if you do it in

421
00:14:47,459 --> 00:14:50,600
this lecture or my
morning lecture,

422
00:14:50,600 --> 00:14:52,939
but you're not allowed
to do it from home.

423
00:14:52,939 --> 00:14:54,280
Sometimes I just have problems

424
00:14:54,280 --> 00:14:55,320
with actually
dozens of students.

425
00:14:55,320 --> 00:14:56,519
They'll just like watch it and

426
00:14:56,519 --> 00:14:57,819
they click some random thing to

427
00:14:57,819 --> 00:14:58,860
make it look like they're doing

428
00:14:58,860 --> 00:15:00,380
something when they're
not doing anything.

429
00:15:00,380 --> 00:15:02,720
So anyway, it's allowed
as long as you're

430
00:15:02,720 --> 00:15:04,219
in person at one
of the locations,

431
00:15:04,219 --> 00:15:05,299
but I don't care which one.

432
00:15:05,299 --> 00:15:06,720
And again, it's
just extra credit,

433
00:15:06,720 --> 00:15:09,240
so don't stress about it, to

434
00:15:09,240 --> 00:15:11,040
keep people a little
bit more engaged.

435
00:15:11,040 --> 00:15:12,540
Were you use Pizza. How many

436
00:15:12,540 --> 00:15:13,995
of you have used Pizza before?

437
00:15:13,995 --> 00:15:17,589
Fantastic. Piazza rules
vary from course to course,

438
00:15:17,589 --> 00:15:19,230
and responsive how

439
00:15:19,230 --> 00:15:20,689
responsive people
are, stuff like that.

440
00:15:20,689 --> 00:15:23,390
Our goal is to respond to
every post within 24 hours,

441
00:15:23,390 --> 00:15:25,689
regardless of whether
it's on the weekend.

442
00:15:25,689 --> 00:15:27,390
I think maybe, like,
Thanksgiving break

443
00:15:27,390 --> 00:15:29,630
might be a little bit different.
We won't check as often.

444
00:15:29,630 --> 00:15:32,309
A lot of courses say
no code on piazza.

445
00:15:32,309 --> 00:15:33,890
Course if somebody
took the whole project

446
00:15:33,890 --> 00:15:35,590
and dumped it on
Piazza and said,

447
00:15:35,590 --> 00:15:36,830
you know, what's
wrong with it, then

448
00:15:36,830 --> 00:15:38,049
other people are
going to copy that.

449
00:15:38,049 --> 00:15:40,289
So that's not allowed.
But, you know,

450
00:15:40,289 --> 00:15:42,750
as long as it's five
lines of code or less,

451
00:15:42,750 --> 00:15:44,649
I think it's sometimes
be helpful to

452
00:15:44,649 --> 00:15:47,130
ask a question in the
context of actual code.

453
00:15:47,130 --> 00:15:49,284
So go for that if
that helps you.

454
00:15:49,284 --> 00:15:52,800
Piazza, I think is for
questions of general interest.

455
00:15:52,800 --> 00:15:54,800
There's like a private
post on Piazza,

456
00:15:54,800 --> 00:15:56,480
but we're not going to really
use that this semester.

457
00:15:56,480 --> 00:15:57,859
If you have an
individual question

458
00:15:57,859 --> 00:15:59,920
related to just you or
you and your team member,

459
00:15:59,920 --> 00:16:01,119
we're going to do
e mail for that.

460
00:16:01,119 --> 00:16:03,320
So what I might be doing
soon is I'm may be assigning

461
00:16:03,320 --> 00:16:06,720
each of you a
primary TA contact.

462
00:16:06,720 --> 00:16:08,239
And so if you have an
individual question,

463
00:16:08,239 --> 00:16:10,100
that's the person
you're going to e mail.

464
00:16:10,100 --> 00:16:11,739
Their expectation is
that they should get

465
00:16:11,739 --> 00:16:13,720
back to you within
two business days.

466
00:16:13,720 --> 00:16:15,840
If they don't,
please don't send me

467
00:16:15,840 --> 00:16:17,680
a separate e mail on
that same thread,

468
00:16:17,680 --> 00:16:19,739
just CC me, and then I

469
00:16:19,739 --> 00:16:22,120
will kind of nudge them or
maybe check in with them.

470
00:16:22,120 --> 00:16:23,279
Maybe they have
something going on that

471
00:16:23,279 --> 00:16:24,479
they can't keep up
with the e mail.

472
00:16:24,479 --> 00:16:25,959
I need to pull another TA.

473
00:16:25,959 --> 00:16:27,439
So just loot me in on that,

474
00:16:27,439 --> 00:16:29,240
give them the they're two days,

475
00:16:29,240 --> 00:16:30,540
and then, you know,
I'll just ndge them.

476
00:16:30,540 --> 00:16:31,820
When that happens. I mean,
they're students too.

477
00:16:31,820 --> 00:16:34,180
They're busy, and
nobody's in trouble,

478
00:16:34,180 --> 00:16:35,819
but I just need to
know if they're not

479
00:16:35,819 --> 00:16:38,500
responding to e mail
within that time frame.

480
00:16:38,500 --> 00:16:41,639
So Git Lab, we talk briefly
about that already.

481
00:16:41,639 --> 00:16:43,399
Make sure that any code
that you're putting on

482
00:16:43,399 --> 00:16:45,440
Jet Hab or it Lab stays
in a private repo.

483
00:16:45,440 --> 00:16:46,779
Otherwise people
will cheat off of

484
00:16:46,779 --> 00:16:48,699
you that has caused
problems for people

485
00:16:48,699 --> 00:16:52,679
even like semesters
after they're graduated.

486
00:16:52,679 --> 00:16:54,600
And then finally,
this is something I

487
00:16:54,600 --> 00:16:56,380
started doing myself in the
last a couple of years.

488
00:16:56,380 --> 00:16:57,920
I started using Anki flashcards.

489
00:16:57,920 --> 00:16:59,439
Anybody use chi flashcards

490
00:16:59,439 --> 00:17:01,519
before I've heard of
it. Just a few of you.

491
00:17:01,519 --> 00:17:04,540
I really think that, It's
such a fantastic tool,

492
00:17:04,540 --> 00:17:06,340
and it kind of doesn't
look very nice,

493
00:17:06,340 --> 00:17:08,380
but it's such a good
way to learn things.

494
00:17:08,380 --> 00:17:10,240
So the idea of Aki is
that it's flash cards,

495
00:17:10,240 --> 00:17:11,599
but it has spaced
repetition, right?

496
00:17:11,599 --> 00:17:12,879
And so what that means
is that when I see

497
00:17:12,879 --> 00:17:14,700
a flash card, I will
either say, Hey,

498
00:17:14,700 --> 00:17:16,239
I got it right, and
it was like easier or

499
00:17:16,239 --> 00:17:18,100
harder or something like that,
or I say, I got it wrong.

500
00:17:18,100 --> 00:17:19,260
And if I see I get it wrong,

501
00:17:19,260 --> 00:17:20,519
I'm going to have to
see it again soon.

502
00:17:20,519 --> 00:17:21,759
If I got it right,
they'll kind of

503
00:17:21,759 --> 00:17:23,360
space it out exponentially.

504
00:17:23,360 --> 00:17:25,540
And it's really efficient
because if there's

505
00:17:25,540 --> 00:17:26,720
some card that it's
just like easy

506
00:17:26,720 --> 00:17:28,019
for me and I keep saying easy.

507
00:17:28,019 --> 00:17:29,360
I do it like four or five times,

508
00:17:29,360 --> 00:17:30,400
and all of a sudden
they don't ask

509
00:17:30,400 --> 00:17:31,784
me again for another two years.

510
00:17:31,784 --> 00:17:33,049
Maybe in ten years, I might

511
00:17:33,049 --> 00:17:34,870
actually forget. So
that's kind of useful.

512
00:17:34,870 --> 00:17:36,710
But given that
exponential back off,

513
00:17:36,710 --> 00:17:39,229
I don't spend a lot of time
on things that I don't know.

514
00:17:39,229 --> 00:17:40,910
And then I just to
keep seeing things

515
00:17:40,910 --> 00:17:42,109
that the scheduling of it

516
00:17:42,109 --> 00:17:43,290
just seems like it
really works nice,

517
00:17:43,290 --> 00:17:45,250
at least for my mind,

518
00:17:45,250 --> 00:17:46,429
I think probably for
a lot of people.

519
00:17:46,429 --> 00:17:48,469
So I think that we should all do

520
00:17:48,469 --> 00:17:50,930
some ky flash cards to
just memorize terms.

521
00:17:50,930 --> 00:17:52,629
You know, there's this
emphasis on kind of,

522
00:17:52,629 --> 00:17:54,049
like general concepts and

523
00:17:54,049 --> 00:17:55,570
kind of, like,
critical thinking.

524
00:17:55,570 --> 00:17:56,929
And I agree with that, but

525
00:17:56,929 --> 00:17:58,110
sometimes I think that we focus

526
00:17:58,110 --> 00:18:00,884
too much on that to the neglect
of just memorizing stuff.

527
00:18:00,884 --> 00:18:03,499
If we're talking about general
concepts and we don't have

528
00:18:03,499 --> 00:18:05,199
a shared vocabulary
because maybe I

529
00:18:05,199 --> 00:18:07,240
said some term and
then it was forgotten.

530
00:18:07,240 --> 00:18:08,239
Well, then you can't do

531
00:18:08,239 --> 00:18:09,540
the conceptual
thinking here either.

532
00:18:09,540 --> 00:18:10,879
So you just have
to put in in time,

533
00:18:10,879 --> 00:18:14,019
memorize some stuff, and
then you can build on that.

534
00:18:14,019 --> 00:18:16,660
And so you should make
your own chi flash cards,

535
00:18:16,660 --> 00:18:19,239
but I also for almost
every lecture,

536
00:18:19,239 --> 00:18:21,300
I have some that I may
be posting as well.

537
00:18:21,300 --> 00:18:23,080
So here you can download these.

538
00:18:23,080 --> 00:18:24,479
There's like 30 flashcards from

539
00:18:24,479 --> 00:18:26,309
today Some of them might
be terms you already know,

540
00:18:26,309 --> 00:18:28,129
and you're just going
to quickly, you know,

541
00:18:28,129 --> 00:18:29,749
space them out and
not worry about it.

542
00:18:29,749 --> 00:18:31,729
And other ones, then
you're just going to make

543
00:18:31,729 --> 00:18:32,169
sure that you have

544
00:18:32,169 --> 00:18:33,890
all the vocabulare that
we're talking today,

545
00:18:33,890 --> 00:18:35,709
and you're going to
have it down solid.

546
00:18:35,709 --> 00:18:36,929
I can't recommend it that much.

547
00:18:36,929 --> 00:18:38,210
I've just been amazed like once

548
00:18:38,210 --> 00:18:39,629
I started doing
this and making a,

549
00:18:39,629 --> 00:18:41,030
a ten minute day habit,

550
00:18:41,030 --> 00:18:43,789
how much I've been able
to retain. All right.

551
00:18:43,789 --> 00:18:46,934
Any questions about course
logistics? Yeah, right here.

552
00:18:46,934 --> 00:18:48,739
I said that we'd
be able to go to

553
00:18:48,739 --> 00:18:50,800
your alternative
lectures in the morning.

554
00:18:50,800 --> 00:18:53,160
Yeah. We? Oh, yeah.

555
00:18:53,160 --> 00:18:55,239
When is my morning lecture.

556
00:18:55,239 --> 00:18:57,760
So it is at 9:55 in the morning,

557
00:18:57,760 --> 00:19:00,599
and it's probably one of the
highest points on campus.

558
00:19:00,599 --> 00:19:04,100
It's in room 272 of Bascom Hall.

559
00:19:04,100 --> 00:19:05,500
So walk up Bascom Hill,

560
00:19:05,500 --> 00:19:07,319
and then you can do
the morning one.

561
00:19:07,319 --> 00:19:08,760
So people not only want to wake

562
00:19:08,760 --> 00:19:10,140
up early, but I
guess climb a Hill.

563
00:19:10,140 --> 00:19:11,779
So kudos to you.

564
00:19:11,779 --> 00:19:14,579
Yeah, Any other logistics
or policy questions people

565
00:19:14,579 --> 00:19:19,600
have? Yeah, right over here.

566
00:19:26,740 --> 00:19:29,539
Oh, Yeah, so I will

567
00:19:29,539 --> 00:19:32,139
provide feedback on
Jitb. Sorry about that.

568
00:19:32,139 --> 00:19:33,999
I'll look through my slides
and make sure I update that.

569
00:19:33,999 --> 00:19:36,280
We're switching just this
semester from JT Hub toGit Lab.

570
00:19:36,280 --> 00:19:37,319
That'll probably be interesting,

571
00:19:37,319 --> 00:19:38,859
actually, interesting in quotes.

572
00:19:38,859 --> 00:19:40,259
But yeah, and I have to update

573
00:19:40,259 --> 00:19:42,040
some stuff that
might say GitHub.

574
00:19:42,040 --> 00:19:44,859
But the future is Git Lab
for this course. Thank you.

575
00:19:44,859 --> 00:19:47,399
Yeah. Other questions
or comments.

576
00:19:47,399 --> 00:19:49,519
And feel free at anytime.

577
00:19:49,519 --> 00:19:50,799
I know it's a bigger
class and sometimes

578
00:19:50,799 --> 00:19:52,259
people might feel shy
about raising your hand.

579
00:19:52,259 --> 00:19:53,139
But I think that whenever you

580
00:19:53,139 --> 00:19:54,220
raise your hand, ask a question,

581
00:19:54,220 --> 00:19:55,620
that's useful to
everybody here, and it's

582
00:19:55,620 --> 00:19:57,199
useful to everybody
watching the recording.

583
00:19:57,199 --> 00:19:58,760
So I encourage that. Please ask

584
00:19:58,760 --> 00:20:00,820
questions as you have them.

585
00:20:01,260 --> 00:20:04,419
Alright, so let's get into
some technical stuff.

586
00:20:04,419 --> 00:20:05,999
Let's talk about resources.

587
00:20:05,999 --> 00:20:08,379
And I think that resources can

588
00:20:08,379 --> 00:20:09,939
actually kind of appeal to

589
00:20:09,939 --> 00:20:12,379
people from a wide
variety of perspectives.

590
00:20:12,379 --> 00:20:14,299
One is that you
think about it in,

591
00:20:14,299 --> 00:20:16,239
like, computing resources,

592
00:20:16,239 --> 00:20:18,459
I either have to buy it, I
have to own some hardware or

593
00:20:18,459 --> 00:20:19,919
maybe I rent it if
I'm in the Cloud,

594
00:20:19,919 --> 00:20:21,019
and that trusts money, right.

595
00:20:21,019 --> 00:20:23,619
So if you figure out how to
use resources better that can

596
00:20:23,619 --> 00:20:26,799
directly translate to
higher profits, right?

597
00:20:26,799 --> 00:20:28,399
So if you're very
money oriented,

598
00:20:28,399 --> 00:20:29,800
then you should think
about resources.

599
00:20:29,800 --> 00:20:31,019
You might also care a lot about

600
00:20:31,019 --> 00:20:32,999
resources just from the
perspective of waste

601
00:20:32,999 --> 00:20:36,920
and trying to be environmentally
conscious conscious.

602
00:20:36,920 --> 00:20:39,579
You know, Data centers
are huge energy hogs,

603
00:20:39,579 --> 00:20:41,139
right? You might be
worried about that.

604
00:20:41,139 --> 00:20:44,140
We do a lot of mining to
create this hardware.

605
00:20:44,140 --> 00:20:46,219
And so if you're coming
from that perspective too,

606
00:20:46,219 --> 00:20:48,480
if you can find more efficient
ways to use resources,

607
00:20:48,480 --> 00:20:49,879
that's hugely valuable, right?

608
00:20:49,879 --> 00:20:51,104
I just think it's a general

609
00:20:51,104 --> 00:20:52,989
Good idea to think
about, how can we be

610
00:20:52,989 --> 00:20:55,529
good stewards of the
resources that we have?

611
00:20:55,529 --> 00:20:56,409
And so there's lots of

612
00:20:56,409 --> 00:20:57,729
different ways you
can define resources.

613
00:20:57,729 --> 00:20:59,969
I'm going to draw a computer
with four resources in it.

614
00:20:59,969 --> 00:21:02,089
Compute, memory,
storage, and network.

615
00:21:02,089 --> 00:21:04,029
This is going to be kind
of our guiding compass

616
00:21:04,029 --> 00:21:05,330
for the first third
of the semester.

617
00:21:05,330 --> 00:21:06,830
We're going to do a
deep dive on each

618
00:21:06,830 --> 00:21:08,429
of these resources
and what we need to

619
00:21:08,429 --> 00:21:09,710
learn before we get into

620
00:21:09,710 --> 00:21:11,919
the big interesting
distributed system.

621
00:21:11,919 --> 00:21:14,069
For computer resources,
the main one

622
00:21:14,069 --> 00:21:16,770
that has been around for
a long time is a CPU,

623
00:21:16,770 --> 00:21:18,310
the central processing unit,

624
00:21:18,310 --> 00:21:21,030
and a central processing
unit can execute code.

625
00:21:21,030 --> 00:21:24,469
And that's the first thing
that we have to think about.

626
00:21:24,469 --> 00:21:26,109
We also have GPUs,

627
00:21:26,109 --> 00:21:27,810
which are graphical
processing units,

628
00:21:27,810 --> 00:21:29,669
and graphical processing units,

629
00:21:29,669 --> 00:21:31,989
maybe were originally
used for video games or

630
00:21:31,989 --> 00:21:34,349
other kinds of visual stuff,

631
00:21:34,349 --> 00:21:36,150
and a lot of that
is kind of a lot

632
00:21:36,150 --> 00:21:37,929
of calculations with
floating point numbers.

633
00:21:37,929 --> 00:21:40,070
And it turns out a lot of
those calculations are useful

634
00:21:40,070 --> 00:21:42,949
for machine learning and
things as well, right?

635
00:21:42,949 --> 00:21:44,969
So there's maybe more
programming that

636
00:21:44,969 --> 00:21:47,874
people do with GPUs
in the future.

637
00:21:47,874 --> 00:21:49,859
When we're running programs, it

638
00:21:49,859 --> 00:21:51,159
has to keep its data somewhere,

639
00:21:51,159 --> 00:21:52,940
that place is in RAM.

640
00:21:52,940 --> 00:21:55,279
And so, kind of any
active data that

641
00:21:55,279 --> 00:21:57,700
we're using as we run our
program is maybe in RAM.

642
00:21:57,700 --> 00:22:00,419
GPU is actually, I wasn't
really sure what box to put it.

643
00:22:00,419 --> 00:22:01,680
I think it's mostly compute,

644
00:22:01,680 --> 00:22:04,820
but it also will have a bunch
of RAM built right into

645
00:22:04,820 --> 00:22:09,000
it because it's kind of like
a CPU and RAM combined.

646
00:22:09,000 --> 00:22:10,620
In terms of storage,

647
00:22:10,620 --> 00:22:12,879
we need a place to keep
our data longer term,

648
00:22:12,879 --> 00:22:14,839
and there's two devices you
need to know about there.

649
00:22:14,839 --> 00:22:16,620
One is a hard disk
drive on the left,

650
00:22:16,620 --> 00:22:20,945
and then the solid state
disk on the right hand side.

651
00:22:20,945 --> 00:22:22,810
Then finally, if we're

652
00:22:22,810 --> 00:22:24,590
trying to get a bunch of
computers working together,

653
00:22:24,590 --> 00:22:25,789
they have to be able
to talk to each other,

654
00:22:25,789 --> 00:22:27,909
and to talk to each other,
they need a network.

655
00:22:27,909 --> 00:22:31,329
And the way we do that is
that each computer might have

656
00:22:31,329 --> 00:22:33,029
some number of NICs
in it that sends for

657
00:22:33,029 --> 00:22:35,710
network interface card or
network interface controller.

658
00:22:35,710 --> 00:22:37,969
And this one right is
for a wired, right?

659
00:22:37,969 --> 00:22:39,869
I could imagine attaching
an either net table to

660
00:22:39,869 --> 00:22:42,469
that and plugging it into the
switch or router over here.

661
00:22:42,469 --> 00:22:43,870
I do that with a
bunch of computers,

662
00:22:43,870 --> 00:22:45,330
and then they can
communicate with each

663
00:22:45,330 --> 00:22:47,890
other and work on
a bigger problem.

664
00:22:47,890 --> 00:22:49,729
We'll be talking a
lot more about that.

665
00:22:49,729 --> 00:22:51,850
Here's a picture
of a real server,

666
00:22:51,850 --> 00:22:54,789
a little bit dated, but a
real server, nonetheless.

667
00:22:54,789 --> 00:22:57,289
On the left hand side, I have
this power supply, right.

668
00:22:57,289 --> 00:22:59,670
All these components are
drawing a lot of power.

669
00:22:59,670 --> 00:23:03,340
Here I have two sockets
on the motherboard.

670
00:23:03,340 --> 00:23:04,539
This kind of big square.

671
00:23:04,539 --> 00:23:06,640
The greenish bluish
square is a motherboard.

672
00:23:06,640 --> 00:23:07,840
Here I have two sockets,

673
00:23:07,840 --> 00:23:10,780
and they plugged
in two CPUs there.

674
00:23:10,780 --> 00:23:12,560
Those are kind of
draw a lot of power,

675
00:23:12,560 --> 00:23:14,339
and they get hot, so
they have bands on them.

676
00:23:14,339 --> 00:23:16,020
These green sticks are ram.

677
00:23:16,020 --> 00:23:17,620
Over here, I have Nick,

678
00:23:17,620 --> 00:23:19,559
that's actually built right
into the motherboard.

679
00:23:19,559 --> 00:23:21,739
And then up here, I
have two hard drives.

680
00:23:21,739 --> 00:23:23,759
This is an example of,
kind of an older server

681
00:23:23,759 --> 00:23:25,624
that they had at
Google, actually.

682
00:23:25,624 --> 00:23:28,129
Okay, so what are we going to
do when we're dealing with

683
00:23:28,129 --> 00:23:29,850
bigger resources or bigger data

684
00:23:29,850 --> 00:23:31,609
and we need to use
these resources?

685
00:23:31,609 --> 00:23:33,409
Right? We could run into
a couple of problems.

686
00:23:33,409 --> 00:23:35,329
One is that, what
if it takes like

687
00:23:35,329 --> 00:23:36,610
a year to do my analysis?

688
00:23:36,610 --> 00:23:37,709
That's not really
reasonable, right?

689
00:23:37,709 --> 00:23:39,169
I might need to throw
more resources at

690
00:23:39,169 --> 00:23:41,349
it to get things done in a
reasonable amount of time.

691
00:23:41,349 --> 00:23:44,030
The other thing is that
maybe my dataset simply does

692
00:23:44,030 --> 00:23:46,889
not fit in RAM or heaven forbid,

693
00:23:46,889 --> 00:23:48,650
maybe doesn't even fit on desk.

694
00:23:48,650 --> 00:23:51,214
And then I would have
a problem, right?

695
00:23:51,214 --> 00:23:53,559
So things might not be
able to run at all.

696
00:23:53,559 --> 00:23:55,179
So if we can't make things more

697
00:23:55,179 --> 00:23:56,400
efficient or we've already

698
00:23:56,400 --> 00:23:57,539
made it as efficient as we can,

699
00:23:57,539 --> 00:23:59,419
we have to somehow
use more resources,

700
00:23:59,419 --> 00:24:00,479
and there's two ways.

701
00:24:00,479 --> 00:24:02,419
One is we could buy
better hardware.

702
00:24:02,419 --> 00:24:04,959
We could buy a server with
more compute, more memory.

703
00:24:04,959 --> 00:24:06,259
That's called scaling up.

704
00:24:06,259 --> 00:24:07,499
And that's actually becoming

705
00:24:07,499 --> 00:24:08,399
more and more possible because

706
00:24:08,399 --> 00:24:09,579
hardware is getting kind of

707
00:24:09,579 --> 00:24:10,999
amazing the capabilities of it.

708
00:24:10,999 --> 00:24:14,094
So a single machine can do
more and more over time.

709
00:24:14,094 --> 00:24:15,589
But eventually, right, it might

710
00:24:15,589 --> 00:24:17,029
make sense to
actually scale out.

711
00:24:17,029 --> 00:24:19,149
And then said by more and
more powerful machines,

712
00:24:19,149 --> 00:24:20,249
you just have lots and lots of

713
00:24:20,249 --> 00:24:22,269
machines that are
working together.

714
00:24:22,269 --> 00:24:24,910
Google really played
out this strategy.

715
00:24:24,910 --> 00:24:26,689
You know, before
Google, a lot of

716
00:24:26,689 --> 00:24:28,450
companies are like, Oh,
we have bigger data,

717
00:24:28,450 --> 00:24:30,549
let's buy, like the
best fanciest hardware

718
00:24:30,549 --> 00:24:32,269
with all these
reliability features.

719
00:24:32,269 --> 00:24:33,749
And Google is like, Well,

720
00:24:33,749 --> 00:24:35,189
no, let's just buy
commodity hardware.

721
00:24:35,189 --> 00:24:36,429
Comodity hardware
is stuff that like

722
00:24:36,429 --> 00:24:38,090
anybody could just
buy off the shelf.

723
00:24:38,090 --> 00:24:39,829
Let's buy lots and lots of it,

724
00:24:39,829 --> 00:24:41,889
and it's starting to fail
all the time because

725
00:24:41,889 --> 00:24:44,450
it's kind of like this cheap
stuff that everybody uses,

726
00:24:44,450 --> 00:24:46,949
but we can build software on
top of it to deal with it.

727
00:24:46,949 --> 00:24:48,410
So they kind of really
push that forward.

728
00:24:48,410 --> 00:24:50,429
I think a lot of
the systems where I

729
00:24:50,429 --> 00:24:51,529
see this semester
are kind of like

730
00:24:51,529 --> 00:24:52,750
built around that strategy.

731
00:24:52,750 --> 00:24:54,089
Now, I mean, in recent years,

732
00:24:54,089 --> 00:24:57,029
it is changing some companies
like Google and Facebook or

733
00:24:57,029 --> 00:24:59,009
Meta are kind of

734
00:24:59,009 --> 00:25:01,229
building more and more
custom hardware, right?

735
00:25:01,229 --> 00:25:04,329
But this is kind of the
history of big data systems.

736
00:25:04,329 --> 00:25:06,569
All right, let's do a
deep dive on each of

737
00:25:06,569 --> 00:25:08,009
these four different
resources now

738
00:25:08,009 --> 00:25:09,789
compute memory
storage and network.

739
00:25:09,789 --> 00:25:11,190
I'm to look at these.

740
00:25:11,190 --> 00:25:13,929
The CPU is actually a
little bit ambiguous.

741
00:25:13,929 --> 00:25:15,569
If I'm trying to be unambiguous,

742
00:25:15,569 --> 00:25:16,930
I would probably
say a processor.

743
00:25:16,930 --> 00:25:19,390
So this actually has
two processors here.

744
00:25:19,390 --> 00:25:21,490
Each of those processors

745
00:25:21,490 --> 00:25:23,369
might have many
different cores in it,

746
00:25:23,369 --> 00:25:25,509
and each core acts

747
00:25:25,509 --> 00:25:28,610
basically logically
like its own own CPU.

748
00:25:28,610 --> 00:25:30,490
So sometimes people use CPU

749
00:25:30,490 --> 00:25:32,649
to refer to one of these cores,

750
00:25:32,649 --> 00:25:34,050
especially if you're
like a kernel hacker,

751
00:25:34,050 --> 00:25:35,850
you probably use CPU
to refer to a core.

752
00:25:35,850 --> 00:25:39,249
Some people will use CPU to
refer to the whole thing.

753
00:25:39,249 --> 00:25:41,589
So I'll try to use either
the word processor

754
00:25:41,589 --> 00:25:44,090
or core because CPU is
a little bit ambiguous.

755
00:25:44,090 --> 00:25:45,369
But anyway, these cores that we

756
00:25:45,369 --> 00:25:46,830
have can run instructions,

757
00:25:46,830 --> 00:25:49,815
and that's how how our
programs get executed.

758
00:25:49,815 --> 00:25:53,399
So how do these cores execute

759
00:25:53,399 --> 00:25:56,620
some machine code that was
basically written for them?

760
00:25:56,620 --> 00:25:56,999
All right.

761
00:25:56,999 --> 00:25:59,020
So I'm going to drop a
picture of this up here.

762
00:25:59,020 --> 00:26:01,780
So here I have a
CPU, and this CPU,

763
00:26:01,780 --> 00:26:03,039
I guess I should just call it

764
00:26:03,039 --> 00:26:05,579
processor has two cores on it,

765
00:26:05,579 --> 00:26:09,279
and I want to run four
different processes.

766
00:26:09,279 --> 00:26:11,920
What is a process? A process
is just a running program.

767
00:26:11,920 --> 00:26:13,679
I write a program. I run it.

768
00:26:13,679 --> 00:26:15,219
The running thing is a process.

769
00:26:15,219 --> 00:26:18,019
Here I actually see
that processes one and

770
00:26:18,019 --> 00:26:19,479
four are both program P.

771
00:26:19,479 --> 00:26:21,220
I guess I started
program P twice.

772
00:26:21,220 --> 00:26:23,139
But I have these four
different processes.

773
00:26:23,139 --> 00:26:25,505
They each have some data in RAM

774
00:26:25,505 --> 00:26:28,909
In RAM for them. They each
have some code, right?

775
00:26:28,909 --> 00:26:31,230
So that's a machine code
that can be executed.

776
00:26:31,230 --> 00:26:33,669
And one of the most important
things for our process is

777
00:26:33,669 --> 00:26:36,270
knowing what instruction
is currently executed.

778
00:26:36,270 --> 00:26:37,129
And so each of them have

779
00:26:37,129 --> 00:26:39,610
this red instruction
pointer indicating

780
00:26:39,610 --> 00:26:41,569
what part of the code is

781
00:26:41,569 --> 00:26:43,949
currently executing at
that moment in time.

782
00:26:43,949 --> 00:26:45,649
So to execute code,

783
00:26:45,649 --> 00:26:47,270
that pointer is going to
have to move and we're

784
00:26:47,270 --> 00:26:49,029
going to have to run
different instructions.

785
00:26:49,029 --> 00:26:51,769
And so cores at any
given time can be

786
00:26:51,769 --> 00:26:53,029
associated with one of

787
00:26:53,029 --> 00:26:55,610
these different
instruction pointers,

788
00:26:55,610 --> 00:26:58,679
and they can move along, right?

789
00:26:58,679 --> 00:27:00,459
The cores will advance
those instruction pointers

790
00:27:00,459 --> 00:27:02,479
and execute the
instructions as we go.

791
00:27:02,479 --> 00:27:05,519
The operating system has
a scheduler and then

792
00:27:05,519 --> 00:27:07,180
the scheduler can decide
at certain points

793
00:27:07,180 --> 00:27:09,320
to switch which
process is running.

794
00:27:09,320 --> 00:27:10,779
So even if I have a bunch of

795
00:27:10,779 --> 00:27:13,360
processes and not that many
cores, to me as a human,

796
00:27:13,360 --> 00:27:15,160
this switching is
happening so fast,

797
00:27:15,160 --> 00:27:16,559
it really feels like
everything is kind

798
00:27:16,559 --> 00:27:18,159
of running at the same time.

799
00:27:18,159 --> 00:27:19,819
It's kind of a basic
picture there.

800
00:27:19,819 --> 00:27:21,999
You know, modern cores of

801
00:27:21,999 --> 00:27:25,360
modern CPUs have
some hyperthreading,

802
00:27:25,360 --> 00:27:26,719
they might actually have
two arrows like this,

803
00:27:26,719 --> 00:27:27,439
but it would still be

804
00:27:27,439 --> 00:27:29,839
kind of the same
general concept, right?

805
00:27:29,839 --> 00:27:31,799
At anytime the operating
system is going to have

806
00:27:31,799 --> 00:27:34,089
knowledge of which
process are running here,

807
00:27:34,089 --> 00:27:35,469
it's process one and three, and

808
00:27:35,469 --> 00:27:36,989
then which ones
are ready to run,

809
00:27:36,989 --> 00:27:39,810
but they're not currently
running. That's two and four.

810
00:27:39,810 --> 00:27:42,469
Alright, so we could do
that. The more cores I have,

811
00:27:42,469 --> 00:27:45,660
the more things I
can run in parallel.

812
00:27:45,660 --> 00:27:47,930
Alright, so what exactly
are they running?

813
00:27:47,930 --> 00:27:50,869
So let's zoom in on
this blurred out code.

814
00:27:50,869 --> 00:27:53,009
They're running
machine instructions,

815
00:27:53,009 --> 00:27:55,330
which are encoded
as zeros and ones.

816
00:27:55,330 --> 00:27:57,689
Very, very few people
would be writing zeros

817
00:27:57,689 --> 00:28:00,069
and ones like that
for machine code.

818
00:28:00,069 --> 00:28:02,890
Some people might be using
something called assembly.

819
00:28:02,890 --> 00:28:04,109
So here's an example of some

820
00:28:04,109 --> 00:28:05,749
assembly instructions over here.

821
00:28:05,749 --> 00:28:07,829
Assembly instructions
very closely

822
00:28:07,829 --> 00:28:10,369
correspond to
machine code, right?

823
00:28:10,369 --> 00:28:13,150
So here I have
like Ad L up here.

824
00:28:13,150 --> 00:28:14,169
That might correspond to

825
00:28:14,169 --> 00:28:15,550
some combination
of zeros and ones.

826
00:28:15,550 --> 00:28:18,549
I represent that's an instruction
we need to do, right?

827
00:28:18,549 --> 00:28:20,830
More people will
write assembly code,

828
00:28:20,830 --> 00:28:22,829
but still not that many, right?

829
00:28:22,829 --> 00:28:24,830
More people, what
they're doing is they're

830
00:28:24,830 --> 00:28:26,949
writing higher level code,

831
00:28:26,949 --> 00:28:28,389
that's not really
for the machine,

832
00:28:28,389 --> 00:28:29,929
it's really for a
human to understand.

833
00:28:29,929 --> 00:28:32,109
They're going be doing that
in a language like Python or

834
00:28:32,109 --> 00:28:34,869
Java or something
like that. Right?

835
00:28:34,869 --> 00:28:36,489
So how do we bridge
that gap between

836
00:28:36,489 --> 00:28:39,289
the high level code
that humans like to

837
00:28:39,289 --> 00:28:41,149
write and then the
low level code

838
00:28:41,149 --> 00:28:44,229
that's actually running
on a machine, right?

839
00:28:44,229 --> 00:28:47,030
This is an important
question for us because even

840
00:28:47,030 --> 00:28:48,209
though most of our examples are

841
00:28:48,209 --> 00:28:49,570
going to be in Python
this semester,

842
00:28:49,570 --> 00:28:52,309
we're going to be using systems
built in other languages.

843
00:28:52,309 --> 00:28:53,530
So for example, we're
going to be looking

844
00:28:53,530 --> 00:28:55,070
at Spark very closely,

845
00:28:55,070 --> 00:28:58,310
and Spark has written a
language called Scala

846
00:28:58,310 --> 00:29:02,129
and Scala runs on the
Java virtual machine.

847
00:29:02,129 --> 00:29:03,469
Now, I'm sure all of you have

848
00:29:03,469 --> 00:29:05,029
seen stack traces before, right?

849
00:29:05,029 --> 00:29:06,770
You remember stack
traces where like, Oh,

850
00:29:06,770 --> 00:29:09,229
it crashed on this line
inside of this function.

851
00:29:09,229 --> 00:29:10,589
And it was there
because this other

852
00:29:10,589 --> 00:29:11,890
function called it
from this line.

853
00:29:11,890 --> 00:29:13,309
You get a bunch of line numbers

854
00:29:13,309 --> 00:29:15,229
helping you figure out
where you crashed.

855
00:29:15,229 --> 00:29:17,129
You all are going to be
getting very exciting

856
00:29:17,129 --> 00:29:19,129
stack traces a semester
where you're looking at,

857
00:29:19,129 --> 00:29:20,190
there's like some Python code,

858
00:29:20,190 --> 00:29:22,110
there's some Scala code,
there's some Java code.

859
00:29:22,110 --> 00:29:24,489
And I don't expect you
to know Scala or Java,

860
00:29:24,489 --> 00:29:26,549
but you still have to
be troubleshoot that.

861
00:29:26,549 --> 00:29:28,609
And so I just want to
have some sense of how

862
00:29:28,609 --> 00:29:30,949
things run and brace ourselves.

863
00:29:30,949 --> 00:29:32,529
It's going to be really
nasty exceptions that

864
00:29:32,529 --> 00:29:35,449
we're going to have to deal
with and troubleshoot.

865
00:29:35,449 --> 00:29:37,720
So it's better You'll be less

866
00:29:37,720 --> 00:29:40,419
shocked if we're talking
about it now, right?

867
00:29:40,419 --> 00:29:42,599
So how do these
things actually run?

868
00:29:42,599 --> 00:29:45,079
Okay, there's a few ways.

869
00:29:45,079 --> 00:29:47,180
One way is that the programmer

870
00:29:47,180 --> 00:29:48,440
could write some
high level code,

871
00:29:48,440 --> 00:29:51,059
and then a tool called a
compiler could travert

872
00:29:51,059 --> 00:29:54,279
that high level code
into machine code.

873
00:29:54,279 --> 00:29:55,479
You would do that once, and then

874
00:29:55,479 --> 00:29:57,360
that machine code
could run many times.

875
00:29:57,360 --> 00:29:58,939
You could also run on
different machines

876
00:29:58,939 --> 00:30:00,635
that have the same machine code.

877
00:30:00,635 --> 00:30:02,950
Different processors

878
00:30:02,950 --> 00:30:04,990
might be expecting
different instructions.

879
00:30:04,990 --> 00:30:06,230
So it couldn't run
on every machine,

880
00:30:06,230 --> 00:30:08,649
but it couldn't run on a
certain sum set of machines,

881
00:30:08,649 --> 00:30:10,569
and then the CPU would just

882
00:30:10,569 --> 00:30:12,809
be executing that, right?
So that's one option.

883
00:30:12,809 --> 00:30:16,269
A compiler is one kind of
translator that does this.

884
00:30:16,269 --> 00:30:19,109
The other approach that
people have, which is slower,

885
00:30:19,109 --> 00:30:20,749
but it's a little
easier to run things in

886
00:30:20,749 --> 00:30:22,809
different places is
with an interpreter.

887
00:30:22,809 --> 00:30:25,050
So in this case, the
interpreter is a program,

888
00:30:25,050 --> 00:30:27,569
and that program is
represented as machine code,

889
00:30:27,569 --> 00:30:29,749
so the core can run

890
00:30:29,749 --> 00:30:32,799
that interpreter code. What
does an interpreter do?

891
00:30:32,799 --> 00:30:34,319
It has a big loop in it,

892
00:30:34,319 --> 00:30:37,819
and that loop is looping
over lines of code here.

893
00:30:37,819 --> 00:30:39,060
You can magine
looping over lines

894
00:30:39,060 --> 00:30:40,499
of python code or
something like that.

895
00:30:40,499 --> 00:30:41,919
And as it loops
over each line of

896
00:30:41,919 --> 00:30:43,539
code, it will execute that.

897
00:30:43,539 --> 00:30:45,279
It might do a bunch of steps

898
00:30:45,279 --> 00:30:47,199
to actually make
that thing happen.

899
00:30:47,199 --> 00:30:49,139
So that's one step. I guess when

900
00:30:49,139 --> 00:30:51,080
people learn about
compilers and interpreters,

901
00:30:51,080 --> 00:30:52,559
this is like the
first introductory,

902
00:30:52,559 --> 00:30:53,619
like, this is what happens.

903
00:30:53,619 --> 00:30:55,420
The real world is a little
bit more complicated,

904
00:30:55,420 --> 00:30:56,899
and so I'm going
to t to dive like

905
00:30:56,899 --> 00:30:58,780
maybe one level
deeper and see what's

906
00:30:58,780 --> 00:31:02,539
really happening with a
language like Python or Java.

907
00:31:02,539 --> 00:31:04,904
They both actually
use a third approach.

908
00:31:04,904 --> 00:31:07,530
Which is almost a
little bit of a hybrid.

909
00:31:07,530 --> 00:31:11,350
The idea here is that there's
a compiler in place still,

910
00:31:11,350 --> 00:31:13,469
and it produces something
called Byte Code,

911
00:31:13,469 --> 00:31:15,469
and Bite Td is not

912
00:31:15,469 --> 00:31:17,529
really something a human
would like to look at,

913
00:31:17,529 --> 00:31:19,229
but it's also not really
something that can

914
00:31:19,229 --> 00:31:22,109
directly run on any
specific hardware.

915
00:31:22,790 --> 00:31:24,909
When I actually want to run it,

916
00:31:24,909 --> 00:31:27,189
I need a piece of software
called a virtual machine,

917
00:31:27,189 --> 00:31:28,769
a program virtual machine,

918
00:31:28,769 --> 00:31:30,269
and I might have one for

919
00:31:30,269 --> 00:31:32,110
Python or av
different languages.

920
00:31:32,110 --> 00:31:34,529
That virtual machine is
written in machine code.

921
00:31:34,529 --> 00:31:37,889
And so the core knows how to
execute the virtual machine,

922
00:31:37,889 --> 00:31:39,269
and the virtual
machine, a lot like

923
00:31:39,269 --> 00:31:42,190
an interpreter is looping
over that byte code up here.

924
00:31:42,190 --> 00:31:43,350
But because the byte code

925
00:31:43,350 --> 00:31:44,549
has already been
processed a little bit,

926
00:31:44,549 --> 00:31:45,910
the virtual machine
can be a little

927
00:31:45,910 --> 00:31:48,789
faster than the
interpreter was, right?

928
00:31:48,789 --> 00:31:51,229
So we have to have that kind
of byte code in between.

929
00:31:51,229 --> 00:31:53,149
And so Python
actually does this.

930
00:31:53,149 --> 00:31:54,390
Python,

931
00:31:54,390 --> 00:31:56,890
It gets compiled. And sometimes

932
00:31:56,890 --> 00:31:58,190
depending on the Python version,

933
00:31:58,190 --> 00:31:59,529
it might show up as these PY

934
00:31:59,529 --> 00:32:01,209
C files that have
byte Trode in them,

935
00:32:01,209 --> 00:32:04,029
and then the Python virtual
machine will execute that.

936
00:32:04,029 --> 00:32:06,789
Let me actually just show
you what some Python vial

937
00:32:06,789 --> 00:32:08,829
some Python bite
trod looks like.

938
00:32:08,829 --> 00:32:11,010
So my head over here. And I'm

939
00:32:11,010 --> 00:32:12,689
going to make this a
little bit bigger.

940
00:32:12,689 --> 00:32:16,014
And I am going to
import this module.

941
00:32:16,014 --> 00:32:17,740
Called disassembly.

942
00:32:17,740 --> 00:32:20,299
And disassembly has a
function called disassembly.

943
00:32:20,299 --> 00:32:22,639
And inside of there, I
can put some Python code.

944
00:32:22,639 --> 00:32:27,819
And so I'll just say like z
equals x times two plus y.

945
00:32:27,819 --> 00:32:29,919
And I do that. That's
going to show me

946
00:32:29,919 --> 00:32:31,840
what is the byte code for
that one line of code?

947
00:32:31,840 --> 00:32:33,459
So one line of code
might actually

948
00:32:33,459 --> 00:32:35,539
be a lot of different
byte code instructions.

949
00:32:35,539 --> 00:32:38,360
This stuff down here
is not interesting.

950
00:32:38,360 --> 00:32:41,340
I guess after I do
that assignment.

951
00:32:41,340 --> 00:32:42,579
If I kind of took
the whole thing,

952
00:32:42,579 --> 00:32:43,600
it would give me back none.

953
00:32:43,600 --> 00:32:44,980
There's nothing really
interesting there.

954
00:32:44,980 --> 00:32:47,519
The interesting stuff
is all this up here.

955
00:32:47,519 --> 00:32:49,865
So let's just walk through
what this is doing.

956
00:32:49,865 --> 00:32:52,169
It's loading a name, which is X.

957
00:32:52,169 --> 00:32:54,629
Then it's loading a
constant which is two.

958
00:32:54,629 --> 00:32:56,929
Then it's multiplying
those two things together.

959
00:32:56,929 --> 00:32:58,669
So I'll get x times
two. Then I'm

960
00:32:58,669 --> 00:32:59,770
loading in another name,

961
00:32:59,770 --> 00:33:02,009
which is y, and then I'm
adding those together.

962
00:33:02,009 --> 00:33:03,529
So then I'll have
this whole result,

963
00:33:03,529 --> 00:33:05,569
and then I'm storing
it back in Z.

964
00:33:05,569 --> 00:33:07,510
Right? So you have
this Python byte code

965
00:33:07,510 --> 00:33:09,830
that's a result of executing
that line of code.

966
00:33:09,830 --> 00:33:12,269
Now I'm curious. I'm curious,

967
00:33:12,269 --> 00:33:15,029
what are some possible
types that X Y and Z might

968
00:33:15,029 --> 00:33:20,509
be. Yeah, right here.

969
00:33:20,509 --> 00:33:22,330
Maybe they're integers.

970
00:33:22,330 --> 00:33:25,169
Yep. Yeah, other thoughts.
What else might they be?

971
00:33:25,169 --> 00:33:27,369
Here. There might be floats.

972
00:33:27,369 --> 00:33:29,569
Yep. Anything else
they might be?

973
00:33:30,860 --> 00:33:33,359
What's that? Strings.

974
00:33:33,359 --> 00:33:35,000
Excellent. I didn't see
who said that, but yeah,

975
00:33:35,000 --> 00:33:36,239
that's like somebody coming from

976
00:33:36,239 --> 00:33:37,399
a true python
background will will

977
00:33:37,399 --> 00:33:38,799
realize they can also
be strings, right?

978
00:33:38,799 --> 00:33:40,519
By multi by a string by two.

979
00:33:40,519 --> 00:33:41,980
It just like repeats it twice,

980
00:33:41,980 --> 00:33:43,719
and then this
contatinates two strings.

981
00:33:43,719 --> 00:33:45,740
Right? So when I look
at this byte code,

982
00:33:45,740 --> 00:33:47,979
it doesn't necessarily
specify what the types are,

983
00:33:47,979 --> 00:33:49,739
and that means that the
Python virtual machine

984
00:33:49,739 --> 00:33:50,559
when it's running this is

985
00:33:50,559 --> 00:33:51,519
going to have to
do a lot of war.

986
00:33:51,519 --> 00:33:53,900
Because by time things
run an actual CPU,

987
00:33:53,900 --> 00:33:55,159
we need to know
what the types are.

988
00:33:55,159 --> 00:33:56,740
Right? Even though
this is byte code,

989
00:33:56,740 --> 00:33:58,619
it's still kind of
high level byte code,

990
00:33:58,619 --> 00:34:00,199
and the Python virtual
machine is going

991
00:34:00,199 --> 00:34:02,745
to have to do some
serious work there.

992
00:34:02,745 --> 00:34:04,590
I'm showing Java now,

993
00:34:04,590 --> 00:34:06,049
and you can see Java is actually

994
00:34:06,049 --> 00:34:08,370
identical picture in terms
of these boxes flowing,

995
00:34:08,370 --> 00:34:09,750
but the byte code
is very different.

996
00:34:09,750 --> 00:34:11,309
Right? Java makes
you specify types.

997
00:34:11,309 --> 00:34:12,890
And so when you
compile to byte code,

998
00:34:12,890 --> 00:34:14,850
those byte codes
will specify types.

999
00:34:14,850 --> 00:34:16,389
And then when we
actually run it with

1000
00:34:16,389 --> 00:34:18,570
Java down here on the
Java virtual machine,

1001
00:34:18,570 --> 00:34:20,090
that will be faster,

1002
00:34:20,090 --> 00:34:21,029
right because it doesn't have to

1003
00:34:21,029 --> 00:34:22,575
figure out the types anymore.

1004
00:34:22,575 --> 00:34:24,279
There's some details
here that are

1005
00:34:24,279 --> 00:34:26,000
just kind of like
about the tooling.

1006
00:34:26,000 --> 00:34:29,200
In Java Roma, you'll run
Java C as a compiler,

1007
00:34:29,200 --> 00:34:30,639
then you'll separate run Java,

1008
00:34:30,639 --> 00:34:33,039
whereas Python just does it
all automatically for you.

1009
00:34:33,039 --> 00:34:34,479
There's other languages like

1010
00:34:34,479 --> 00:34:36,199
go where they could
do either, right?

1011
00:34:36,199 --> 00:34:37,499
You just kind of say, just

1012
00:34:37,499 --> 00:34:39,299
like run and then they'll
compile and run it,

1013
00:34:39,299 --> 00:34:41,820
or maybe you explicitly
do it as two steps.

1014
00:34:41,820 --> 00:34:43,099
That's not the interesting part.

1015
00:34:43,099 --> 00:34:44,579
The more interesting
part is see how

1016
00:34:44,579 --> 00:34:46,280
they both have an
intermediate language,

1017
00:34:46,280 --> 00:34:48,379
which is byte Tad,
and they kind of

1018
00:34:48,379 --> 00:34:51,039
have different levels of
closeness to machine toad.

1019
00:34:51,039 --> 00:34:52,979
Let's make the
picture. First, I'll

1020
00:34:52,979 --> 00:34:54,559
just pause there before
I make it mess here.

1021
00:34:54,559 --> 00:34:56,839
Any questions about that so far?

1022
00:35:02,220 --> 00:35:07,419
Oh, right. So, some
other details here,

1023
00:35:07,419 --> 00:35:09,740
there's a project called Jython,

1024
00:35:09,740 --> 00:35:11,259
which I don't know.
It's almost like a toy.

1025
00:35:11,259 --> 00:35:12,760
I don't think it's like
really actively developed,

1026
00:35:12,760 --> 00:35:14,540
but kind of interesting
proof of concept,

1027
00:35:14,540 --> 00:35:18,520
they'll take Python code and
convert it to JVM Bitterod.

1028
00:35:18,520 --> 00:35:19,859
I have to imagine
that wouldn't be

1029
00:35:19,859 --> 00:35:21,279
very efficient because
like that Tod would

1030
00:35:21,279 --> 00:35:24,019
probably still have to handle
different types, right?

1031
00:35:24,019 --> 00:35:25,199
So I'm assuming it
would be kind of

1032
00:35:25,199 --> 00:35:27,239
bloated and efficient bite Trod

1033
00:35:27,239 --> 00:35:29,160
it couldn't be done nonetheless.

1034
00:35:29,160 --> 00:35:30,900
What is more efficient
is that scala,

1035
00:35:30,900 --> 00:35:33,000
rather than building a new
Scala virtual machine,

1036
00:35:33,000 --> 00:35:35,360
they decided to piggy back
on the Java virtual machine.

1037
00:35:35,360 --> 00:35:37,589
So when you compile
some scalar code.

1038
00:35:37,589 --> 00:35:38,969
You get these class files with

1039
00:35:38,969 --> 00:35:40,769
Java byte code that
can actually run.

1040
00:35:40,769 --> 00:35:43,289
And so Java and Scalla
play nicely together,

1041
00:35:43,289 --> 00:35:44,489
and some of the
systems we're looking

1042
00:35:44,489 --> 00:35:47,229
at are built as a
combination of those.

1043
00:35:47,350 --> 00:35:51,939
Alright. So let's talk

1044
00:35:51,939 --> 00:35:55,119
about some alternatives
to using CPUs.

1045
00:35:55,119 --> 00:35:56,499
GPUs are the main one we're

1046
00:35:56,499 --> 00:35:57,860
going to talk about
in this course.

1047
00:35:57,860 --> 00:35:59,999
A CPU core or

1048
00:35:59,999 --> 00:36:02,699
a U processor might have
a handful, of course,

1049
00:36:02,699 --> 00:36:04,739
maybe eight, 16,
something like that,

1050
00:36:04,739 --> 00:36:06,600
and they're relatively fast,

1051
00:36:06,600 --> 00:36:08,180
and they're relatively
independent.

1052
00:36:08,180 --> 00:36:09,339
They can each different things,

1053
00:36:09,339 --> 00:36:11,260
and they're fairly
general purpose.

1054
00:36:11,260 --> 00:36:13,660
A GPU, in contrast,

1055
00:36:13,660 --> 00:36:16,080
what they're going to have
is lots and lots of cores,

1056
00:36:16,080 --> 00:36:17,699
but they're very
optimized for one thing.

1057
00:36:17,699 --> 00:36:18,679
They're optimized for doing

1058
00:36:18,679 --> 00:36:20,339
floating point
number calculations,

1059
00:36:20,339 --> 00:36:21,779
and they have to work and lock

1060
00:36:21,779 --> 00:36:23,119
step with each other, right?

1061
00:36:23,119 --> 00:36:25,759
So That's very useful,

1062
00:36:25,759 --> 00:36:28,839
for example, if I have
a big matrix of data.

1063
00:36:28,839 --> 00:36:30,179
Like in machine
learning. We're often

1064
00:36:30,179 --> 00:36:31,920
multiplying two
matrices together.

1065
00:36:31,920 --> 00:36:34,619
And on all the different rows,

1066
00:36:34,619 --> 00:36:35,880
I have to do the same operation.

1067
00:36:35,880 --> 00:36:37,799
I'm like doing a
row multiplication,

1068
00:36:37,799 --> 00:36:39,939
and so I'm doing the same work,

1069
00:36:39,939 --> 00:36:41,779
but on different pieces of data,

1070
00:36:41,779 --> 00:36:43,619
same instruction, multiple data.

1071
00:36:43,619 --> 00:36:45,179
And so that actually
works sraight.

1072
00:36:45,179 --> 00:36:46,600
If I have a bunch of threads

1073
00:36:46,600 --> 00:36:48,299
or I have a bunch of

1074
00:36:48,299 --> 00:36:49,059
cores that are kind of

1075
00:36:49,059 --> 00:36:50,359
working in lockstep
with each other,

1076
00:36:50,359 --> 00:36:52,000
that's useful for
some applications,

1077
00:36:52,000 --> 00:36:55,329
and that's how they but
that's how they built GPUs.

1078
00:36:55,329 --> 00:36:57,339
L et's just compare these.

1079
00:36:57,339 --> 00:36:59,440
So sometimes when
you're buying hardware,

1080
00:36:59,440 --> 00:37:01,040
this actually might save
you some money someday,

1081
00:37:01,040 --> 00:37:02,620
right, by making you
a better shopper.

1082
00:37:02,620 --> 00:37:04,779
One of the things people look
at and maybe brag about,

1083
00:37:04,779 --> 00:37:07,839
maybe not reasonably is
the clock speed, right?

1084
00:37:07,839 --> 00:37:11,599
So this one here has a 3.2
gigahertz clock speed.

1085
00:37:11,599 --> 00:37:14,059
So giga is billion
Hertzs per second.

1086
00:37:14,059 --> 00:37:16,639
That means that that CPU
has a clock in it that's

1087
00:37:16,639 --> 00:37:20,000
ticking 3.2 billion
times per second.

1088
00:37:20,000 --> 00:37:23,259
The GPU over here on

1089
00:37:23,259 --> 00:37:24,960
the right that I'm
comparing to that CPU

1090
00:37:24,960 --> 00:37:27,400
is like less than 11.5.

1091
00:37:27,400 --> 00:37:28,739
That's not the end
of the story because

1092
00:37:28,739 --> 00:37:30,299
they have different
numbers of res, right?

1093
00:37:30,299 --> 00:37:32,020
That CPU only has eight cores,

1094
00:37:32,020 --> 00:37:38,459
whereas this slower VDA one
has like 3,500 cores, right?

1095
00:37:38,459 --> 00:37:40,520
You might think you could
multiply those together.

1096
00:37:40,520 --> 00:37:42,500
It's still not
quite a final story

1097
00:37:42,500 --> 00:37:45,539
because just because that
clock is ticking super fast,

1098
00:37:45,539 --> 00:37:47,879
doesn't mean you're completing
instructions super fast.

1099
00:37:47,879 --> 00:37:49,759
Sometimes an operation
might take like

1100
00:37:49,759 --> 00:37:51,019
two clock cycles or

1101
00:37:51,019 --> 00:37:53,299
eight clock cycles or
you don't really know.

1102
00:37:53,299 --> 00:37:56,019
It gets so complicated
that the only way to

1103
00:37:56,019 --> 00:37:57,380
know which one is faster

1104
00:37:57,380 --> 00:37:59,294
is to actually run
something on it.

1105
00:37:59,294 --> 00:38:02,149
Okay. So I could write a program

1106
00:38:02,149 --> 00:38:05,290
explicitly for
measuring performance,

1107
00:38:05,290 --> 00:38:06,830
and that's called a benchmark.

1108
00:38:06,830 --> 00:38:08,930
I could also take an
existing application

1109
00:38:08,930 --> 00:38:10,329
and run it and see
how fast it is,

1110
00:38:10,329 --> 00:38:11,790
and I'm basically
turning an existing

1111
00:38:11,790 --> 00:38:13,250
application into a benchmark.

1112
00:38:13,250 --> 00:38:15,149
Benchmarks are
programs we run to

1113
00:38:15,149 --> 00:38:18,229
see how fast some hardware is.

1114
00:38:18,229 --> 00:38:20,649
So if somebody wants to
compare these two things,

1115
00:38:20,649 --> 00:38:22,129
what they might do
is they might write

1116
00:38:22,129 --> 00:38:23,509
a program that does a bunch

1117
00:38:23,509 --> 00:38:24,929
of floating point
operations, right?

1118
00:38:24,929 --> 00:38:27,040
Like you know,
adding some floats,

1119
00:38:27,040 --> 00:38:28,339
dividing some floats, whatever,

1120
00:38:28,339 --> 00:38:30,159
lots of some mix of
floating things.

1121
00:38:30,159 --> 00:38:31,439
And then it could measure how

1122
00:38:31,439 --> 00:38:33,239
many floating point operations

1123
00:38:33,239 --> 00:38:34,920
can we do per second?

1124
00:38:34,920 --> 00:38:36,260
So that would be called flops.

1125
00:38:36,260 --> 00:38:37,759
And so when I compare
this up here,

1126
00:38:37,759 --> 00:38:41,300
I have 409 i iga
flops for the CPU

1127
00:38:41,300 --> 00:38:45,239
and 11,300 giga flops
for the GPU, right?

1128
00:38:45,239 --> 00:38:46,899
So prefixes here that
you should know.

1129
00:38:46,899 --> 00:38:48,919
So K is 1,000 M is

1130
00:38:48,919 --> 00:38:51,600
1 million G is 1 billion,
T is 1 trillion.

1131
00:38:51,600 --> 00:38:54,540
Right? So when I have T
flops, that's Tera flops,

1132
00:38:54,540 --> 00:38:56,979
that would be
measuring billions of

1133
00:38:56,979 --> 00:39:00,605
floating operation floating
point operations per second.

1134
00:39:00,605 --> 00:39:04,070
See here is that GPU and
this is a little bit dated,

1135
00:39:04,070 --> 00:39:06,130
but this one is
about 30% cheaper,

1136
00:39:06,130 --> 00:39:09,990
but it's 28 times faster
for this specific workload.

1137
00:39:09,990 --> 00:39:12,289
So you have to understand your
workload and then find out

1138
00:39:12,289 --> 00:39:14,810
what is the cheapest way
to run your workload.

1139
00:39:14,810 --> 00:39:16,169
If it was some kind
of other thing,

1140
00:39:16,169 --> 00:39:17,530
maybe I'm dealing
with like strings

1141
00:39:17,530 --> 00:39:18,889
or integers or
something like that,

1142
00:39:18,889 --> 00:39:21,110
or maybe the data
is not as uniform,

1143
00:39:21,110 --> 00:39:22,869
then the CPU might win, right?

1144
00:39:22,869 --> 00:39:24,129
So different hardware
are going to

1145
00:39:24,129 --> 00:39:26,269
win on different benchmarks.

1146
00:39:26,269 --> 00:39:27,889
But here we can clearly see that

1147
00:39:27,889 --> 00:39:29,229
if we're working with big data,

1148
00:39:29,229 --> 00:39:31,569
GPUs are very critical to that.

1149
00:39:31,569 --> 00:39:33,529
Any questions about CPU so

1150
00:39:33,529 --> 00:39:36,289
far? Yeah, question right here.

1151
00:39:36,289 --> 00:39:38,829
It's not too complicated
if you sp a little bit

1152
00:39:38,829 --> 00:39:42,390
on how be optimized.

1153
00:39:42,390 --> 00:39:44,609
Yeah, how could a GPU be

1154
00:39:44,609 --> 00:39:46,350
optimized for floating
point operations?

1155
00:39:46,350 --> 00:39:47,949
Like I'm not like a
hardware design person,

1156
00:39:47,949 --> 00:39:50,150
so I won't be able to
have a great answer.

1157
00:39:50,150 --> 00:39:52,390
But you can imagine, right
when they're building

1158
00:39:52,390 --> 00:39:54,629
any of these chips, right?

1159
00:39:54,629 --> 00:39:56,389
They have some transistors
that they're using,

1160
00:39:56,389 --> 00:39:58,409
and you could imagine having

1161
00:39:58,409 --> 00:40:00,689
like a bunch of transistors
for different things,

1162
00:40:00,689 --> 00:40:02,949
maybe some for operating
on strings or some for

1163
00:40:02,949 --> 00:40:05,709
operating on integers, right?

1164
00:40:05,709 --> 00:40:07,570
Or you could imagine

1165
00:40:07,570 --> 00:40:09,329
using all your transistors

1166
00:40:09,329 --> 00:40:10,809
to do floating point
operations, right?

1167
00:40:10,809 --> 00:40:12,369
So I can kind of figure out

1168
00:40:12,369 --> 00:40:14,704
how I'm allocating transistors.

1169
00:40:14,704 --> 00:40:16,959
I like they're making
everything lockstep, too.

1170
00:40:16,959 --> 00:40:19,339
They can optimize that
in terms of as I'm like,

1171
00:40:19,339 --> 00:40:22,019
fetching the next instruction
to execute, right,

1172
00:40:22,019 --> 00:40:23,819
that logic can be
shared across a lot of

1173
00:40:23,819 --> 00:40:25,019
different cores
instead of each of

1174
00:40:25,019 --> 00:40:26,539
them having their own, right?

1175
00:40:26,539 --> 00:40:28,259
So they can just
figure out how they

1176
00:40:28,259 --> 00:40:30,759
actually build it and
what like components,

1177
00:40:30,759 --> 00:40:33,239
what units are going inside
of that chip, right?

1178
00:40:33,239 --> 00:40:35,399
And they can spend
more transistors.

1179
00:40:35,399 --> 00:40:36,880
They're kind of
spend that budget

1180
00:40:36,880 --> 00:40:38,899
on the thing that they
want to optimize for.

1181
00:40:38,899 --> 00:40:41,279
That makes sense? Yeah,
Yeah, great question.

1182
00:40:41,279 --> 00:40:43,339
Yeah, there are
questions people have.

1183
00:40:44,610 --> 00:40:47,870
All right. Fantastic.

1184
00:40:47,870 --> 00:40:50,070
Alright, let's
talk about memory.

1185
00:40:50,070 --> 00:40:52,429
So here's a bunch of sticks of

1186
00:40:52,429 --> 00:40:55,030
RAM in the bottom right.
That's our memory.

1187
00:40:55,030 --> 00:40:58,350
And RAM stands for
random access memory.

1188
00:40:58,350 --> 00:41:00,849
And random means that as
I'm accessing my data,

1189
00:41:00,849 --> 00:41:02,949
maybe I'm reading in my data,
or I'm writing my data,

1190
00:41:02,949 --> 00:41:04,410
I can jump around a different,

1191
00:41:04,410 --> 00:41:05,910
have samples from
different places,

1192
00:41:05,910 --> 00:41:08,169
and I can do that efficiently.

1193
00:41:08,169 --> 00:41:12,390
In contrast, this
is a tape cassette,

1194
00:41:12,390 --> 00:41:15,330
this is not random.
It's very sequential.

1195
00:41:15,330 --> 00:41:16,969
If I want to listen
to the little bit

1196
00:41:16,969 --> 00:41:18,839
at the beginning, and a
little bit at the end.

1197
00:41:18,839 --> 00:41:20,130
I can't do that efficiently.

1198
00:41:20,130 --> 00:41:21,769
I have to wait a long
time to kind of go

1199
00:41:21,769 --> 00:41:24,109
through the whole tape to
fast forward to the end.

1200
00:41:24,109 --> 00:41:25,569
I actually hear that
these are kind of

1201
00:41:25,569 --> 00:41:27,789
making a comeback for kind
of nostalgia reasons.

1202
00:41:27,789 --> 00:41:29,749
I don't know if that's
true, but that's what

1203
00:41:29,749 --> 00:41:31,869
I grew up listening to, right?

1204
00:41:31,869 --> 00:41:33,269
So definitely a device that's

1205
00:41:33,269 --> 00:41:35,429
random random kind of
has a bad connotation,

1206
00:41:35,429 --> 00:41:37,690
but here it actually
means that it's faster.

1207
00:41:37,690 --> 00:41:41,449
I can jump around and access
different parts of it.

1208
00:41:41,449 --> 00:41:43,670
So RAM holds bits.

1209
00:41:43,670 --> 00:41:45,289
A bit is a zero or one.

1210
00:41:45,289 --> 00:41:47,029
Those are two possible
values you have.

1211
00:41:47,029 --> 00:41:48,069
If you have two bits,

1212
00:41:48,069 --> 00:41:49,330
well, you can have
more combinations.

1213
00:41:49,330 --> 00:41:51,470
I can have zero,
zero, zero, one, 10,

1214
00:41:51,470 --> 00:41:54,370
11 The pattern is that
if you have n bits,

1215
00:41:54,370 --> 00:41:55,670
you can have two to the power

1216
00:41:55,670 --> 00:41:59,469
n different possible
values. Okay?

1217
00:41:59,469 --> 00:42:01,209
And so what you're going to do

1218
00:42:01,209 --> 00:42:01,949
is you're going to think about,

1219
00:42:01,949 --> 00:42:02,909
well, how many bits do I have?

1220
00:42:02,909 --> 00:42:04,729
How may different possible
values can I have?

1221
00:42:04,729 --> 00:42:06,169
And what do those values mean?

1222
00:42:06,169 --> 00:42:07,889
That's a question
of representation.

1223
00:42:07,889 --> 00:42:10,549
Different representations
have different trade offs.

1224
00:42:10,549 --> 00:42:12,110
When you learned
about this semester,

1225
00:42:12,110 --> 00:42:14,310
some representations are
very memory efficient.

1226
00:42:14,310 --> 00:42:16,670
I can have a lot of
data and few bytes.

1227
00:42:16,670 --> 00:42:18,630
Some are optimized for helping

1228
00:42:18,630 --> 00:42:20,069
the CPU execute as

1229
00:42:20,069 --> 00:42:22,344
efficiently as possible.
I just want to like

1230
00:42:22,344 --> 00:42:23,840
Open up that concept.

1231
00:42:23,840 --> 00:42:26,279
Here I have three bits, so
there's eight combinations.

1232
00:42:26,279 --> 00:42:28,060
I could use those to
represent letters.

1233
00:42:28,060 --> 00:42:30,260
I could use those to
represent positive numbers.

1234
00:42:30,260 --> 00:42:31,720
I could use those to represent

1235
00:42:31,720 --> 00:42:33,940
a mix of negative and
positive numbers.

1236
00:42:33,940 --> 00:42:35,319
I could have
derivative of these.

1237
00:42:35,319 --> 00:42:37,900
If I have numbers, I can use
that to represent colors.

1238
00:42:37,900 --> 00:42:39,299
You have to think
carefully about what

1239
00:42:39,299 --> 00:42:40,579
is a good data representation

1240
00:42:40,579 --> 00:42:41,139
that's going to be

1241
00:42:41,139 --> 00:42:44,214
efficient for what
you're trying to do.

1242
00:42:44,214 --> 00:42:48,010
All right. So a byte
is just eight bits,

1243
00:42:48,010 --> 00:42:49,830
and so 28 is 256,

1244
00:42:49,830 --> 00:42:53,290
so a byte can hold 256
different possible values.

1245
00:42:53,290 --> 00:42:56,009
And RAM is going to have
all these bytes of data.

1246
00:42:56,009 --> 00:42:58,990
And what we'll say is that
RAM is byte addressable.

1247
00:42:58,990 --> 00:43:00,389
So every different byte has

1248
00:43:00,389 --> 00:43:02,489
an address associated with it,

1249
00:43:02,489 --> 00:43:04,249
and there are
instructions you can use

1250
00:43:04,249 --> 00:43:06,990
to get the byte at
that specific address.

1251
00:43:06,990 --> 00:43:08,729
And what that means is
that if you wanted to say

1252
00:43:08,729 --> 00:43:10,729
just one bit instead
of one byte,

1253
00:43:10,729 --> 00:43:13,809
it's actually a little
bit more we, right?

1254
00:43:13,809 --> 00:43:15,250
Because you'd run
one instruction

1255
00:43:15,250 --> 00:43:16,950
to kind of get that
little piece of memory,

1256
00:43:16,950 --> 00:43:18,569
and you'd run another
instruction to

1257
00:43:18,569 --> 00:43:21,029
actually pull out the bit
bit you're interested in.

1258
00:43:21,029 --> 00:43:23,489
Some languages, like CPS pus,

1259
00:43:23,489 --> 00:43:27,010
for example, will actually
if you have a Boolean,

1260
00:43:27,010 --> 00:43:28,010
you might think you
could represent

1261
00:43:28,010 --> 00:43:29,749
a Boolean with a
bit, and you can,

1262
00:43:29,749 --> 00:43:32,350
but they actually will use
a full bite to represent

1263
00:43:32,350 --> 00:43:36,150
a single bit just because
RAM is bite addressable.

1264
00:43:36,150 --> 00:43:37,749
That's kind of wasteful,
right? We're using

1265
00:43:37,749 --> 00:43:39,730
one eighth of the
memory available,

1266
00:43:39,730 --> 00:43:41,449
but it's faster for
the CPU because

1267
00:43:41,449 --> 00:43:43,529
we can access it with
fewer instructions.

1268
00:43:43,529 --> 00:43:47,930
We have those same suffixes
over here, Kilmga Giga Tera.

1269
00:43:47,930 --> 00:43:50,089
You know, you can
think of those as

1270
00:43:50,089 --> 00:43:51,870
like multiples of 1,000.

1271
00:43:51,870 --> 00:43:54,490
Sometimes people will
do nice round numbers,

1272
00:43:54,490 --> 00:43:56,129
not in terms of base
ten, but base two.

1273
00:43:56,129 --> 00:43:58,889
So two to the power
of ten is 1024.

1274
00:43:58,889 --> 00:44:00,570
So if somebody says 1 kilobyte,

1275
00:44:00,570 --> 00:44:03,069
sometimes they might
mean 1024 bytes,

1276
00:44:03,069 --> 00:44:05,930
that's two of ten, or they
maybe mean 1,000 bytes,

1277
00:44:05,930 --> 00:44:08,469
but fortunately, the numbers
work out pretty close.

1278
00:44:08,469 --> 00:44:13,230
So unless it's something that
is very kind of particular,

1279
00:44:13,230 --> 00:44:15,529
then maybe it doesn't
matter too much.

1280
00:44:15,529 --> 00:44:18,609
Some characteristics of RAM
is that it's small, right?

1281
00:44:18,609 --> 00:44:20,569
So maybe like some of the
VMs we might be using

1282
00:44:20,569 --> 00:44:22,169
this semester might have like

1283
00:44:22,169 --> 00:44:24,409
4 gigabytes of RAM,
that's not that large.

1284
00:44:24,409 --> 00:44:25,909
It's volatile, meaning that if

1285
00:44:25,909 --> 00:44:27,569
you reboot your
computer, it's Guan.

1286
00:44:27,569 --> 00:44:29,350
It's not for long term storage.

1287
00:44:29,350 --> 00:44:30,930
And then the redeeming quality

1288
00:44:30,930 --> 00:44:32,510
of it is quite fast, actually.

1289
00:44:32,510 --> 00:44:33,669
It's quite fast compared to say,

1290
00:44:33,669 --> 00:44:35,170
like a hard driver and SSD.

1291
00:44:35,170 --> 00:44:36,769
So some use cases for it is

1292
00:44:36,769 --> 00:44:38,949
any kind of active program
data you're using,

1293
00:44:38,949 --> 00:44:40,309
if I have like a Python list or

1294
00:44:40,309 --> 00:44:42,629
a data frame faster
than a BN RAM.

1295
00:44:42,629 --> 00:44:44,774
Sometimes people will use it.

1296
00:44:44,774 --> 00:44:47,060
To have the same data
on both storage,

1297
00:44:47,060 --> 00:44:48,780
long term storage, and in RAM.

1298
00:44:48,780 --> 00:44:50,700
If we have all this data
on long term storage,

1299
00:44:50,700 --> 00:44:52,459
some of that data
is probably hot.

1300
00:44:52,459 --> 00:44:55,379
Hot data is data that
we access frequently.

1301
00:44:55,379 --> 00:44:56,840
And if we access it frequently,

1302
00:44:56,840 --> 00:44:58,519
we don't want it to be
sitting somewhere slow.

1303
00:44:58,519 --> 00:44:59,999
So usually what you'll
do is you'll take

1304
00:44:59,999 --> 00:45:02,359
all your data and then some
subset of it that is hot,

1305
00:45:02,359 --> 00:45:03,959
will be in in RAM.

1306
00:45:03,959 --> 00:45:05,959
Systems do this
automatically for us.

1307
00:45:05,959 --> 00:45:07,420
And then when I see some systems

1308
00:45:07,420 --> 00:45:08,820
like Spark where
we have to choose,

1309
00:45:08,820 --> 00:45:10,719
like, this is the data
that I want in RAM.

1310
00:45:10,719 --> 00:45:12,599
This is the data I don't
want in RAM, right?

1311
00:45:12,599 --> 00:45:14,320
So we have to start thinking
about the trade offs

1312
00:45:14,320 --> 00:45:16,635
of these different
storage mediums.

1313
00:45:16,635 --> 00:45:19,430
Alright, let's talk
about storage.

1314
00:45:19,430 --> 00:45:22,009
Here are two devices
you have to know.

1315
00:45:22,009 --> 00:45:23,550
They're both called
block devices.

1316
00:45:23,550 --> 00:45:25,029
One is a hard disk drive.

1317
00:45:25,029 --> 00:45:27,330
I have that on the left.
That's abbreviated HDD.

1318
00:45:27,330 --> 00:45:29,089
And again, like those
ki flash cards,

1319
00:45:29,089 --> 00:45:30,449
you're just trying to
memorize all that stuff.

1320
00:45:30,449 --> 00:45:31,689
You're going to
know what HDD is.

1321
00:45:31,689 --> 00:45:34,330
You know SSD because you're
going to do the flash cards.

1322
00:45:34,330 --> 00:45:36,729
On the right hand side, I
have a solid state disk.

1323
00:45:36,729 --> 00:45:38,330
On the left, I
have moving parts,

1324
00:45:38,330 --> 00:45:40,150
and moving parts
introduce delays.

1325
00:45:40,150 --> 00:45:42,160
So the hard disk
is kind of slower.

1326
00:45:42,160 --> 00:45:44,590
It's spending this
big magnetic platter.

1327
00:45:44,590 --> 00:45:46,989
The good thing is, you
can pack a lot of bits on

1328
00:45:46,989 --> 00:45:48,489
that magnetic platter based

1329
00:45:48,489 --> 00:45:49,669
on whether it's
magnetized or not,

1330
00:45:49,669 --> 00:45:51,050
so it has a high capacity.

1331
00:45:51,050 --> 00:45:53,770
The SSD is based on charges,

1332
00:45:53,770 --> 00:45:55,209
and they haven't figured
out how to make that

1333
00:45:55,209 --> 00:45:56,750
as dense. So it'll be faster.

1334
00:45:56,750 --> 00:45:59,130
There's no moving
parts involved,

1335
00:45:59,450 --> 00:46:02,249
but it won't have
as much capacity.

1336
00:46:02,249 --> 00:46:04,570
Both of these are what
we call block devices.

1337
00:46:04,570 --> 00:46:06,969
And the idea of having
a block device is very

1338
00:46:06,969 --> 00:46:08,730
related to that idea of memory

1339
00:46:08,730 --> 00:46:10,029
being bite addressable, right?

1340
00:46:10,029 --> 00:46:11,690
So when we were
talking about memory,

1341
00:46:11,690 --> 00:46:14,590
we said like each byte
has its own address,

1342
00:46:14,590 --> 00:46:15,749
and if I wanted a
bit within that,

1343
00:46:15,749 --> 00:46:16,549
I have to kind of grab

1344
00:46:16,549 --> 00:46:18,204
the whole bite and
then pull a piece out.

1345
00:46:18,204 --> 00:46:19,139
It's like that here,

1346
00:46:19,139 --> 00:46:20,720
but instead of bytes,
we have blocks.

1347
00:46:20,720 --> 00:46:21,859
So you can think
of these as being

1348
00:46:21,859 --> 00:46:23,899
block address, and
blocks are big.

1349
00:46:23,899 --> 00:46:27,360
Blocks are something
like maybe 512 bytes.

1350
00:46:27,360 --> 00:46:29,599
And so if you want to get

1351
00:46:29,599 --> 00:46:32,120
just a single byte of data
from one of these devices,

1352
00:46:32,120 --> 00:46:33,779
you'll actually have to
read in a whole block,

1353
00:46:33,779 --> 00:46:36,739
that 512 and pull out
just the data you want.

1354
00:46:36,739 --> 00:46:38,379
Whether you read one byte or

1355
00:46:38,379 --> 00:46:41,739
512 bytes, same
performance, right?

1356
00:46:41,739 --> 00:46:44,339
So we generally to have to
think about how we can have

1357
00:46:44,339 --> 00:46:45,939
data representations that let

1358
00:46:45,939 --> 00:46:47,100
us access these efficiently.

1359
00:46:47,100 --> 00:46:50,119
If you're frequently accessing
a small subset of a block,

1360
00:46:50,119 --> 00:46:52,590
you're going to have
terrible performance.

1361
00:46:52,590 --> 00:46:55,199
So both of these, I'll kind
of lump them together,

1362
00:46:55,199 --> 00:46:57,260
and later we'll talk about
them in more detail,

1363
00:46:57,260 --> 00:46:58,779
but they're both large, right?

1364
00:46:58,779 --> 00:47:00,419
I think, you know,
it's affordable to get

1365
00:47:00,419 --> 00:47:02,300
a device sets more
than 1 terabyte.

1366
00:47:02,300 --> 00:47:04,019
They're non volatile,
so the data

1367
00:47:04,019 --> 00:47:06,799
lives beyond a reboot,
and they're slow.

1368
00:47:06,799 --> 00:47:09,259
At least they're much
slower than RAM.

1369
00:47:09,259 --> 00:47:12,100
So you could use them for
very large data sets,

1370
00:47:12,100 --> 00:47:14,279
and you can also
use them for data

1371
00:47:14,279 --> 00:47:16,919
that needs to be
persisted long term.

1372
00:47:16,919 --> 00:47:19,619
I've been talking about
different resources, right?

1373
00:47:19,619 --> 00:47:23,390
Like, you know,
memory or storage.

1374
00:47:23,390 --> 00:47:25,039
But we can think of more

1375
00:47:25,039 --> 00:47:27,039
fine grained resources
for some of these.

1376
00:47:27,039 --> 00:47:29,899
So one resource I might think
about is capacity, right?

1377
00:47:29,899 --> 00:47:31,220
I can say, what is the capacity

1378
00:47:31,220 --> 00:47:32,879
of that hard drive, right?

1379
00:47:32,879 --> 00:47:34,439
And I can measure that in bytes.

1380
00:47:34,439 --> 00:47:35,819
How much data can I store there?

1381
00:47:35,819 --> 00:47:38,560
I might also think about
throughput as a capacity.

1382
00:47:38,560 --> 00:47:40,420
How quickly can I transfer

1383
00:47:40,420 --> 00:47:43,400
bytes from that hard
drive into my memory,

1384
00:47:43,400 --> 00:47:44,619
so I can actually analyze it.

1385
00:47:44,619 --> 00:47:47,359
So maybe I have a 500
gigabyte block device,

1386
00:47:47,359 --> 00:47:48,740
but maybe I can only transfer

1387
00:47:48,740 --> 00:47:51,679
200 megabytes/second, right?

1388
00:47:51,679 --> 00:47:53,159
Another statistic we might use

1389
00:47:53,159 --> 00:47:54,520
to evaluate these
things is latency.

1390
00:47:54,520 --> 00:47:56,180
I I just want one byte of data,

1391
00:47:56,180 --> 00:47:57,739
how long do I have to wait?

1392
00:47:57,739 --> 00:47:59,999
Latency is about how long
we wait for something?

1393
00:47:59,999 --> 00:48:03,039
Maybe that might take something
like ten milliseconds.

1394
00:48:03,039 --> 00:48:06,200
So SSDs are much faster,

1395
00:48:06,200 --> 00:48:08,019
but in terms of capacity,

1396
00:48:08,019 --> 00:48:09,559
hard drives are much better.

1397
00:48:09,559 --> 00:48:10,939
That gap is closing, but

1398
00:48:10,939 --> 00:48:12,980
here's a trend that
goes through 2020.

1399
00:48:12,980 --> 00:48:15,679
And so we can see at 20:20 that

1400
00:48:15,679 --> 00:48:20,220
SSDs cost six times more
than hard drives per byte.

1401
00:48:20,220 --> 00:48:21,439
So disks are not dead yet.

1402
00:48:21,439 --> 00:48:22,679
Google uses a bunch of disks.

1403
00:48:22,679 --> 00:48:24,019
You can imagine like
on YouTube, right?

1404
00:48:24,019 --> 00:48:26,609
There's a bunch of videos
that take up a lot of bytes,

1405
00:48:26,609 --> 00:48:27,949
but nobody watches them, right?

1406
00:48:27,949 --> 00:48:29,329
Like, some things
people watch a lot,

1407
00:48:29,329 --> 00:48:30,610
and you want that on SSDs,

1408
00:48:30,610 --> 00:48:31,649
some of that other stuff you

1409
00:48:31,649 --> 00:48:33,569
just want on a slow hard disk.

1410
00:48:33,569 --> 00:48:35,389
You know, this last week, I

1411
00:48:35,389 --> 00:48:37,289
looked on Amazon and
their overall pick,

1412
00:48:37,289 --> 00:48:38,830
very, like on scientific.

1413
00:48:38,830 --> 00:48:40,430
But just looked at
the two devices.

1414
00:48:40,430 --> 00:48:43,029
And here, there was a three
times difference, right?

1415
00:48:43,029 --> 00:48:47,109
Like the recommended SSD cost
three times more per byte.

1416
00:48:47,109 --> 00:48:49,509
Maybe that eventually, I
don't know the future, right?

1417
00:48:49,509 --> 00:48:52,470
Maybe hard drives have
a long term future.

1418
00:48:52,470 --> 00:48:54,409
It might also be that, you
know, ten years from now,

1419
00:48:54,409 --> 00:48:55,709
we're just all using SSDs for

1420
00:48:55,709 --> 00:48:58,389
everything because it
might be strictly better.

1421
00:48:58,510 --> 00:49:00,809
Oh, right. How are we doing?

1422
00:49:00,809 --> 00:49:02,029
I think we have 1 minute left,

1423
00:49:02,029 --> 00:49:04,350
and so I don't have time
start another resource.

1424
00:49:04,350 --> 00:49:06,229
But I'll hang out here
and you can all come up

1425
00:49:06,229 --> 00:49:08,550
and chat if you want or if
you have any questions,

1426
00:49:08,550 --> 00:49:12,270
and I'll see you on Friday.
So I have a great evening.
