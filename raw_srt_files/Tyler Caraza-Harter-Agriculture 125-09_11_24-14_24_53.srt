1
00:00:00,280 --> 00:00:03,500
Fantastic. Yeah. So somebody
came out and fixed.

2
00:00:03,500 --> 00:00:04,380
Actually, it's funny like

3
00:00:04,380 --> 00:00:05,700
everything is a
computer these days,

4
00:00:05,700 --> 00:00:07,400
and they just had to reboot it,

5
00:00:07,400 --> 00:00:08,999
and that fixed the problem.

6
00:00:08,999 --> 00:00:11,399
So more and more
things like that.

7
00:00:11,399 --> 00:00:13,459
So today, a couple of

8
00:00:13,459 --> 00:00:16,320
announcements about
logistical stuff.

9
00:00:16,320 --> 00:00:19,599
One is that there's
a quiz due tonight.

10
00:00:19,599 --> 00:00:22,045
How many people have
done the quiz so far?

11
00:00:22,045 --> 00:00:25,049
Maybe a third of you. So if
you haven't done the quiz,

12
00:00:25,049 --> 00:00:26,689
go do the quiz tonight.

13
00:00:26,689 --> 00:00:29,110
Most Wednesdays, there
will be a quiz due.

14
00:00:29,110 --> 00:00:30,370
It will tell you
what it'll cover.

15
00:00:30,370 --> 00:00:31,929
So this quiz is
covering Week one.

16
00:00:31,929 --> 00:00:35,290
So anything from Week
one is fair game.

17
00:00:35,290 --> 00:00:36,829
And that's generally
true, right?

18
00:00:36,829 --> 00:00:38,910
Le As soon as a
Friday lecture ends,

19
00:00:38,910 --> 00:00:41,569
it would be pretty reasonable
to go take a quiz or do it

20
00:00:41,569 --> 00:00:42,789
over the weekend or do it

21
00:00:42,789 --> 00:00:44,849
anytime before that
next Wednesday.

22
00:00:44,849 --> 00:00:49,540
So go and take that. Um You
know, there's no time limit.

23
00:00:49,540 --> 00:00:51,360
It's five multiple
choice questions.

24
00:00:51,360 --> 00:00:52,440
Hole place of pressure.

25
00:00:52,440 --> 00:00:53,819
I'm just to try to have
some incentive that

26
00:00:53,819 --> 00:00:55,340
people kind of keep

27
00:00:55,340 --> 00:00:56,759
up with the material
and study as you go

28
00:00:56,759 --> 00:00:59,139
instead of waiting
for the bigger exams.

29
00:00:59,139 --> 00:01:01,179
You're allowed to
collaborate with

30
00:01:01,179 --> 00:01:02,899
it with friends on
it if you want.

31
00:01:02,899 --> 00:01:04,380
You can get together and discuss

32
00:01:04,380 --> 00:01:05,819
and do the questions together.

33
00:01:05,819 --> 00:01:08,880
The only thing I ask
is that that you're

34
00:01:08,880 --> 00:01:10,520
actually actively doing
it with somebody and

35
00:01:10,520 --> 00:01:12,419
talking about it because I
think you will learn that way.

36
00:01:12,419 --> 00:01:14,020
What I don't want
and what is not

37
00:01:14,020 --> 00:01:14,800
allowed is for like

38
00:01:14,800 --> 00:01:16,120
one person to do the
quiz and just say,

39
00:01:16,120 --> 00:01:18,100
Oh, here are the answers,
now you go fill it in.

40
00:01:18,100 --> 00:01:19,500
As long as you're
sitting and talking

41
00:01:19,500 --> 00:01:20,940
about it together, you
can do it together.

42
00:01:20,940 --> 00:01:22,760
And hopefully, it's a nice time

43
00:01:22,760 --> 00:01:26,299
to meet people and work
together on things.

44
00:01:26,430 --> 00:01:29,310
We also have Project one,

45
00:01:29,310 --> 00:01:31,689
which is officially
released today.

46
00:01:31,689 --> 00:01:33,689
I actually released
it last week.

47
00:01:33,689 --> 00:01:36,730
Today is the official release
date because after today,

48
00:01:36,730 --> 00:01:37,890
you'll actually know enough to

49
00:01:37,890 --> 00:01:39,309
basically do the whole project,

50
00:01:39,309 --> 00:01:42,270
maybe, not the last tiny
bit if we run behind,

51
00:01:42,270 --> 00:01:45,720
but you can go do the
project, Now, basically.

52
00:01:45,720 --> 00:01:48,139
I'm going to come over
here and try to make sure

53
00:01:48,139 --> 00:01:51,180
everybody is aware of
the policies, right?

54
00:01:51,180 --> 00:01:52,420
So, in general, I'll link to

55
00:01:52,420 --> 00:01:53,879
the general project directions.

56
00:01:53,879 --> 00:01:56,060
You all should read this
carefully to make sure that you

57
00:01:56,060 --> 00:01:57,380
don't get in trouble with

58
00:01:57,380 --> 00:01:59,520
any rules around
academic misconduct,

59
00:01:59,520 --> 00:02:01,400
know how you can work
with other people,

60
00:02:01,400 --> 00:02:03,280
know what is allowed with

61
00:02:03,280 --> 00:02:06,160
respect to Chat GPT and
other stuff like that.

62
00:02:06,160 --> 00:02:10,120
Trying to read that carefully
and don't get into trouble.

63
00:02:10,120 --> 00:02:12,000
There's a late policy down here

64
00:02:12,000 --> 00:02:13,579
and now is a good time
to talk about that.

65
00:02:13,579 --> 00:02:15,600
I think unexpected
stuff always happens.

66
00:02:15,600 --> 00:02:17,479
We should expect
unexpected things,

67
00:02:17,479 --> 00:02:21,359
like getting sick or getting
busy or things like that.

68
00:02:22,360 --> 00:02:25,179
Basically, if I see

69
00:02:25,179 --> 00:02:28,100
that you're making an effort
to kind of start early,

70
00:02:28,100 --> 00:02:30,419
then there's some
flexibility there.

71
00:02:30,419 --> 00:02:33,980
So the rule is that normally,
if it's one day late,

72
00:02:33,980 --> 00:02:35,980
you lose 10%, two days late,

73
00:02:35,980 --> 00:02:39,440
you lose 20%, we'll accept
it at most three days late.

74
00:02:39,440 --> 00:02:43,559
If, however, you start three
days before the deadline,

75
00:02:43,559 --> 00:02:45,720
and you've made
significant progress,

76
00:02:45,720 --> 00:02:48,639
and the low bar for
significant progress is low.

77
00:02:48,639 --> 00:02:50,059
If you've done
that, then you can

78
00:02:50,059 --> 00:02:52,500
request that that late
penalty is waived,

79
00:02:52,500 --> 00:02:53,599
and then you can submit up to

80
00:02:53,599 --> 00:02:55,840
three days after the deadline.

81
00:02:56,150 --> 00:02:58,929
This is, cover if you get
sick or something like that.

82
00:02:58,929 --> 00:03:00,109
Sometimes people ask like, well,

83
00:03:00,109 --> 00:03:01,589
if I get sick, like,

84
00:03:01,589 --> 00:03:03,130
will you override
the sick policy?

85
00:03:03,130 --> 00:03:05,090
I'm like, Well, no, that
that is a sick policy.

86
00:03:05,090 --> 00:03:06,389
If you were extremely sick,

87
00:03:06,389 --> 00:03:08,029
like if you were like
hospitalized for a week

88
00:03:08,029 --> 00:03:09,809
or something like
that, then yeah,

89
00:03:09,809 --> 00:03:11,410
we'll figure out something
kind of specific

90
00:03:11,410 --> 00:03:13,409
to your situation,
but, you know,

91
00:03:13,409 --> 00:03:16,229
if you have a cold or a flu
or something like that,

92
00:03:16,229 --> 00:03:18,134
then this is the late policy.

93
00:03:18,134 --> 00:03:20,100
What I'd really encourage
you do is get started,

94
00:03:20,100 --> 00:03:22,000
at least do a little bit
of the project early?

95
00:03:22,000 --> 00:03:23,400
Don't do it in the
last three days

96
00:03:23,400 --> 00:03:25,219
because then if something
unexpected happens,

97
00:03:25,219 --> 00:03:27,859
well, you won't have
any kind of buffer.

98
00:03:27,859 --> 00:03:29,960
Another thing where
people kind of run

99
00:03:29,960 --> 00:03:32,640
astray on this is that actually,

100
00:03:32,640 --> 00:03:35,480
like pushing the code to get
lab is part of the project.

101
00:03:35,480 --> 00:03:39,180
Sometimes, that's where
people run into trouble,

102
00:03:39,180 --> 00:03:41,500
and then they try to send you
like e mails or screenshot.

103
00:03:41,500 --> 00:03:42,880
Know you actually
have to be pushing

104
00:03:42,880 --> 00:03:45,440
the stuff three days before
the deadline to qualify.

105
00:03:45,440 --> 00:03:47,440
So really what I
do is I tend to at

106
00:03:47,440 --> 00:03:49,580
least start the
project pretty soon,

107
00:03:49,580 --> 00:03:50,799
and just like as
soon as you have

108
00:03:50,799 --> 00:03:52,479
anything just to push it,

109
00:03:52,479 --> 00:03:53,740
and then you have a little bit

110
00:03:53,740 --> 00:03:55,400
more breathing room at the end.

111
00:03:55,400 --> 00:03:57,765
How many of you have already
started the project?

112
00:03:57,765 --> 00:04:00,750
Fantastic. And today is
the day it's released.

113
00:04:00,750 --> 00:04:02,990
So you're really a
head of the game.

114
00:04:02,990 --> 00:04:04,809
So do you any questions about,

115
00:04:04,809 --> 00:04:06,169
either the quiz policies

116
00:04:06,169 --> 00:04:09,729
or this late policy
I've just described?

117
00:04:11,330 --> 00:04:15,030
All right. Fantastic. So
what else do I have here?

118
00:04:15,030 --> 00:04:20,269
Let me head back
to the schedule.

119
00:04:20,269 --> 00:04:24,060
U We've talked a lot
about shell stuff.

120
00:04:24,060 --> 00:04:25,339
Now we're going to be
talking about Docker.

121
00:04:25,339 --> 00:04:26,819
Docker kind of like
other stuff it's

122
00:04:26,819 --> 00:04:28,519
just a lot of
things to memorize.

123
00:04:28,519 --> 00:04:30,619
So I have this worksheet,
which is, again, notes.

124
00:04:30,619 --> 00:04:32,100
You know, at the end
of this, you just have

125
00:04:32,100 --> 00:04:33,760
to memorize all these things.

126
00:04:33,760 --> 00:04:35,939
Otherwise, you know, you
spend more time in the class.

127
00:04:35,939 --> 00:04:37,280
If you have to Google
it all the time,

128
00:04:37,280 --> 00:04:39,120
just spend some
time, memorize it.

129
00:04:39,120 --> 00:04:42,860
These Anki flash tart decks
will help you with that.

130
00:04:42,860 --> 00:04:44,700
Alright, fantastic,
emery hadad over here.

131
00:04:44,700 --> 00:04:46,439
And today, we're going to
be learning about Docker,

132
00:04:46,439 --> 00:04:47,740
which is maybe one
of my favorite

133
00:04:47,740 --> 00:04:49,480
systems of this semester.

134
00:04:49,480 --> 00:04:52,259
This little whale over
here is the Docker logo,

135
00:04:52,259 --> 00:04:54,380
and it has a bunch of
containers on its back.

136
00:04:54,380 --> 00:04:55,739
And so we're going
to be learning

137
00:04:55,739 --> 00:04:56,839
about something
called containers.

138
00:04:56,839 --> 00:04:58,599
Today. How can we deploy code

139
00:04:58,599 --> 00:05:00,639
inside of a Docker container?

140
00:05:00,639 --> 00:05:03,440
And so I have a few learning
objectives for you.

141
00:05:03,440 --> 00:05:05,499
With containers, they're
created from images.

142
00:05:05,499 --> 00:05:06,699
And so I want you
to be able to take

143
00:05:06,699 --> 00:05:09,540
a Docker image and launch
a container from it.

144
00:05:09,540 --> 00:05:11,979
I want you to be able to define

145
00:05:11,979 --> 00:05:14,599
a new docker image given
something called a Docker file,

146
00:05:14,599 --> 00:05:15,940
you're going to get a
lot of experience this

147
00:05:15,940 --> 00:05:17,619
semester writing Docker files.

148
00:05:17,619 --> 00:05:19,260
And then, you know,
there's all kinds of

149
00:05:19,260 --> 00:05:21,179
things that you might
troubleshoot that might go wrong,

150
00:05:21,179 --> 00:05:23,639
and some might give you
some troubleshooting tips

151
00:05:23,639 --> 00:05:26,020
today. All right.

152
00:05:26,020 --> 00:05:27,819
Before we get into the details,

153
00:05:27,819 --> 00:05:30,680
I want to talk about this
word virtualization,

154
00:05:30,680 --> 00:05:32,320
which you've heard a couple
of times in this course,

155
00:05:32,320 --> 00:05:33,599
and you've probably
heard in other courses,

156
00:05:33,599 --> 00:05:35,639
and it can mean lots
of different things.

157
00:05:35,639 --> 00:05:37,660
When something is virtual,

158
00:05:37,660 --> 00:05:39,219
there's some kind of illusion.

159
00:05:39,219 --> 00:05:40,760
There's not something
real, there's kind of

160
00:05:40,760 --> 00:05:42,720
maybe software is
providing some illusion.

161
00:05:42,720 --> 00:05:45,360
And usually that
illusion is that you

162
00:05:45,360 --> 00:05:48,520
have some kind of private
resources, right?

163
00:05:48,520 --> 00:05:50,659
You don't actually have
those resources yourself.

164
00:05:50,659 --> 00:05:52,200
Maybe they're shared or
something like that.

165
00:05:52,200 --> 00:05:53,760
But you have the
illusion, you can kind of

166
00:05:53,760 --> 00:05:55,700
pretend like you own it.

167
00:05:55,700 --> 00:05:57,379
And so even in just
this semester,

168
00:05:57,379 --> 00:05:58,820
there's four different
ways, we're gonna use this,

169
00:05:58,820 --> 00:06:01,479
we're gonna use it for
hardware virtual machines,

170
00:06:01,479 --> 00:06:03,419
we're going to use it for
language virtual machines.

171
00:06:03,419 --> 00:06:04,420
Today we're going to be learning

172
00:06:04,420 --> 00:06:05,539
about virtual operating systems.

173
00:06:05,539 --> 00:06:06,999
And then in a later
lecture, I'm going to

174
00:06:06,999 --> 00:06:09,539
talk about virtual memory.

175
00:06:09,539 --> 00:06:12,399
Okay, so let's start with
hardware virtual machines.

176
00:06:12,399 --> 00:06:14,479
You could do this
yourself, or in this case,

177
00:06:14,479 --> 00:06:17,039
we're renting from a
cloud provider, Google.

178
00:06:17,039 --> 00:06:19,020
And so what Google
does is they'll buy

179
00:06:19,020 --> 00:06:21,560
a bunch of physical machines
in a data center like this.

180
00:06:21,560 --> 00:06:24,099
This one has 16 gigabytes
of ram and eight tours.

181
00:06:24,099 --> 00:06:26,220
Probably their machines
have much more than that.

182
00:06:26,220 --> 00:06:28,420
And they can put
virtual machines on it,

183
00:06:28,420 --> 00:06:30,260
and then we rent those, right?

184
00:06:30,260 --> 00:06:32,480
Does anybody notice
anything interesting

185
00:06:32,480 --> 00:06:36,040
about the numbers I
put in this example?

186
00:06:36,160 --> 00:06:39,520
Yeah, right here. Of that.

187
00:06:39,520 --> 00:06:43,340
Yeah, it sums up to more
than the actual space.

188
00:06:43,340 --> 00:06:45,500
We might say is they're
overbooking these machines or

189
00:06:45,500 --> 00:06:48,000
overcommitting resources
on these machines.

190
00:06:48,000 --> 00:06:49,800
And this happens in
other industries, too.

191
00:06:49,800 --> 00:06:51,600
It happens with airlines,

192
00:06:51,600 --> 00:06:54,020
for example, with an airplane,

193
00:06:54,020 --> 00:06:55,280
there's a couple hundred seats,

194
00:06:55,280 --> 00:06:56,480
they can say probabilistically,

195
00:06:56,480 --> 00:06:57,799
probably some people
will not show

196
00:06:57,799 --> 00:06:59,159
up or they'll miss their flight.

197
00:06:59,159 --> 00:07:00,939
And so they always, they'll

198
00:07:00,939 --> 00:07:03,400
often sell a couple more
seats and there actually are.

199
00:07:03,400 --> 00:07:05,140
And the vast majority of

200
00:07:05,140 --> 00:07:06,980
the time that works
out out fine.

201
00:07:06,980 --> 00:07:08,840
Now, most people who pay for

202
00:07:08,840 --> 00:07:11,309
a ticket actually
show up In contrast,

203
00:07:11,309 --> 00:07:13,069
most people who are
running a virtual machine

204
00:07:13,069 --> 00:07:14,410
are not using it very heavily.

205
00:07:14,410 --> 00:07:16,030
So, for example, right now,

206
00:07:16,030 --> 00:07:20,010
all of you who have started P
one have a virtual machine,

207
00:07:20,010 --> 00:07:22,910
and it is not using
any CPU right now,

208
00:07:22,910 --> 00:07:25,629
and it's not using nearly
the memory available.

209
00:07:25,629 --> 00:07:27,350
So cloud providers
can actually play

210
00:07:27,350 --> 00:07:29,490
this game a lot more
aggressively than say,

211
00:07:29,490 --> 00:07:31,930
like an airline cud,
and they do that.

212
00:07:31,930 --> 00:07:34,280
And so one of the
implications is that

213
00:07:34,280 --> 00:07:37,270
The actual performance you
get might depend a bit

214
00:07:37,270 --> 00:07:38,489
on what other people are doing

215
00:07:38,489 --> 00:07:39,769
on the same physical machine.

216
00:07:39,769 --> 00:07:41,490
Sometimes that shows up
in weird ways, like,

217
00:07:41,490 --> 00:07:42,870
maybe I do an example and I time

218
00:07:42,870 --> 00:07:44,649
something and you might
do the same example,

219
00:07:44,649 --> 00:07:48,190
and you might get different
timings than I do.

220
00:07:48,190 --> 00:07:49,710
Right? Not all
virtual machines of

221
00:07:49,710 --> 00:07:51,549
the same size are going to
give the same performance,

222
00:07:51,549 --> 00:07:55,410
and it can vary
over time, right?

223
00:07:55,410 --> 00:08:01,140
All right. Let's talk about
operating systems, right?

224
00:08:01,140 --> 00:08:03,139
So for each of these
virtual machines,

225
00:08:03,139 --> 00:08:05,100
I can install a different
operating system.

226
00:08:05,100 --> 00:08:07,379
Maybe I have a couple of
different flavors of Linux,

227
00:08:07,379 --> 00:08:08,760
like ubuntu and Debian.

228
00:08:08,760 --> 00:08:10,819
Maybe I have a windows server.

229
00:08:10,819 --> 00:08:12,760
That's pretty powerful, right?

230
00:08:12,760 --> 00:08:14,039
Maybe if I have an application

231
00:08:14,039 --> 00:08:15,180
that's only built for windows,

232
00:08:15,180 --> 00:08:18,220
I can now run that here
instead of having to have

233
00:08:18,220 --> 00:08:22,459
different physical machines,
that's very efficient.

234
00:08:22,459 --> 00:08:25,520
You know, it's also a
little bit wasteful because

235
00:08:25,520 --> 00:08:27,219
if I have a bunch of
different applications

236
00:08:27,219 --> 00:08:28,679
and they each need their
own operating system,

237
00:08:28,679 --> 00:08:30,760
then I have all that
overhead of having

238
00:08:30,760 --> 00:08:34,539
many different operating
systems, using resources.

239
00:08:34,539 --> 00:08:36,039
Okay, That's hardware
virtual machines.

240
00:08:36,039 --> 00:08:37,919
Let's talk about language
virtual machines.

241
00:08:37,919 --> 00:08:39,160
A language virtual machine,

242
00:08:39,160 --> 00:08:40,980
an example that would
be like the JVM,

243
00:08:40,980 --> 00:08:44,240
the Java virtual machine or
the Python virtual machine.

244
00:08:44,240 --> 00:08:46,400
Um In this case,

245
00:08:46,400 --> 00:08:48,359
you do have some kind
of illusion that

246
00:08:48,359 --> 00:08:50,160
you have private resources,

247
00:08:50,160 --> 00:08:51,480
but that's not the main point.

248
00:08:51,480 --> 00:08:56,160
The main point is that we
can have this machine that's

249
00:08:56,160 --> 00:08:58,539
basically just defined in
software that can have

250
00:08:58,539 --> 00:08:59,979
different instructions than

251
00:08:59,979 --> 00:09:01,699
real hardware might have, right?

252
00:09:01,699 --> 00:09:03,279
So when I compile Java,

253
00:09:03,279 --> 00:09:04,879
I get Java byte code,

254
00:09:04,879 --> 00:09:06,859
and that Bite Codes
not run directly on

255
00:09:06,859 --> 00:09:09,219
any machine that anybody
has ever made, right?

256
00:09:09,219 --> 00:09:10,520
It can run on a machine

257
00:09:10,520 --> 00:09:12,579
that's defined by
software, right?

258
00:09:12,579 --> 00:09:14,359
So maybe I have some
programs that are running

259
00:09:14,359 --> 00:09:16,240
on top of the JVM,
some on the PVM.

260
00:09:16,240 --> 00:09:18,320
And then I have some that
are actually written

261
00:09:18,320 --> 00:09:21,429
for X 86 64 instructions,

262
00:09:21,429 --> 00:09:23,889
which might be what
the actual CPU has,

263
00:09:23,889 --> 00:09:26,329
right, and that might run
directly on top of that.

264
00:09:26,329 --> 00:09:27,969
Right? So we have virtual
machines for hardware,

265
00:09:27,969 --> 00:09:29,209
virtual machines for language.

266
00:09:29,209 --> 00:09:31,770
Let's talk about virtual
operating systems.

267
00:09:31,770 --> 00:09:33,450
We have a virtual
operating system

268
00:09:33,450 --> 00:09:34,310
that we have this illusion

269
00:09:34,310 --> 00:09:36,750
that we are the only person,

270
00:09:36,750 --> 00:09:39,270
we as an application
are the only person

271
00:09:39,270 --> 00:09:41,730
using the operating system.

272
00:09:41,730 --> 00:09:44,630
It's not a term that
people use very often.

273
00:09:44,630 --> 00:09:46,649
More often people would
call that a container.

274
00:09:46,649 --> 00:09:48,050
That's the term I'm
going to start using,

275
00:09:48,050 --> 00:09:51,790
but a container is basically
a virtual operating system.

276
00:09:51,790 --> 00:09:53,795
So you can see
here, for example,

277
00:09:53,795 --> 00:09:55,719
On top of my physical machine,

278
00:09:55,719 --> 00:09:57,700
I have some flavor
of Linux running.

279
00:09:57,700 --> 00:10:00,139
And then I have a bunch of
containers on top of it,

280
00:10:00,139 --> 00:10:04,459
and those are actually
different flavors of Linux.

281
00:10:04,459 --> 00:10:06,840
There's a part of the operating
system called the Kernel,

282
00:10:06,840 --> 00:10:09,119
and these are actually
all sharing it.

283
00:10:09,119 --> 00:10:10,460
In reality, we're sharing

284
00:10:10,460 --> 00:10:12,320
the kernel between
these different things,

285
00:10:12,320 --> 00:10:13,839
but we have the illusion that

286
00:10:13,839 --> 00:10:16,019
we're the only one using
the operating system,

287
00:10:16,019 --> 00:10:20,005
and then we can have different
flavors of Linux, right?

288
00:10:20,005 --> 00:10:22,230
This is much more efficient

289
00:10:22,230 --> 00:10:24,149
than having virtual
machines, right?

290
00:10:24,149 --> 00:10:25,430
If I have virtual
operating systems,

291
00:10:25,430 --> 00:10:26,769
and I don't actually really have

292
00:10:26,769 --> 00:10:28,270
a lot of different
operating systems

293
00:10:28,270 --> 00:10:29,109
running at the same time.

294
00:10:29,109 --> 00:10:30,350
If I have virtual machines,

295
00:10:30,350 --> 00:10:31,530
then I actually do have a lot of

296
00:10:31,530 --> 00:10:32,790
different operating
systems running,

297
00:10:32,790 --> 00:10:34,250
and that takes up more space.

298
00:10:34,250 --> 00:10:36,010
It does mean that
it's less flexible.

299
00:10:36,010 --> 00:10:37,390
Since kind of under the hood,

300
00:10:37,390 --> 00:10:38,969
it is really just one kernel.

301
00:10:38,969 --> 00:10:40,509
That means that I
can have a lot of

302
00:10:40,509 --> 00:10:42,469
different flavors of
Linux, but I could not,

303
00:10:42,469 --> 00:10:44,349
for example, have like

304
00:10:44,349 --> 00:10:47,049
a windows container
running on top of Linux.

305
00:10:47,049 --> 00:10:49,330
That's not possible, right?

306
00:10:50,370 --> 00:10:52,830
So, all this container stuff,

307
00:10:52,830 --> 00:10:54,170
it's really a
collection of features

308
00:10:54,170 --> 00:10:55,610
that have been built into Linux,

309
00:10:55,610 --> 00:10:56,650
and then where Docker came

310
00:10:56,650 --> 00:10:57,969
along is that they
made it really

311
00:10:57,969 --> 00:11:00,450
easy to configure all of
these different features.

312
00:11:00,450 --> 00:11:01,749
Before that, you could
still kind of put

313
00:11:01,749 --> 00:11:03,130
together containers
in your own way,

314
00:11:03,130 --> 00:11:04,409
but it would be you'd have to be

315
00:11:04,409 --> 00:11:06,170
quite the expert to pull it off.

316
00:11:06,170 --> 00:11:07,770
Docker has made that easy,

317
00:11:07,770 --> 00:11:09,309
and so we're going to be
learning Docker today.

318
00:11:09,309 --> 00:11:11,410
Yeah, question right over here.

319
00:11:14,240 --> 00:11:16,860
Yeah, if we have
virtual machines,

320
00:11:16,860 --> 00:11:18,320
why would we want
to have containers?

321
00:11:18,320 --> 00:11:19,619
Do anybody think of an advantage

322
00:11:19,619 --> 00:11:21,159
of having containers
instead of having

323
00:11:21,159 --> 00:11:25,520
a virtual machine?
Yeah, right here.

324
00:11:26,920 --> 00:11:29,220
Yeah, I could have
the same results,

325
00:11:29,220 --> 00:11:31,179
but there would be less
resources used, right?

326
00:11:31,179 --> 00:11:32,759
So if I have ten containers,

327
00:11:32,759 --> 00:11:33,859
then I really only have

328
00:11:33,859 --> 00:11:35,259
one operating system
and that maybe that

329
00:11:35,259 --> 00:11:37,979
uses up like 200 megabytes
of ram, perhaps.

330
00:11:37,979 --> 00:11:39,679
Whereas if I had
ten different VMs,

331
00:11:39,679 --> 00:11:41,419
they each have their
own operating system,

332
00:11:41,419 --> 00:11:43,640
each of which might be using
200 megabytes of ram and

333
00:11:43,640 --> 00:11:45,979
be like 2 gigabytes
of RAM total, right?

334
00:11:45,979 --> 00:11:47,140
So whenever we share,

335
00:11:47,140 --> 00:11:48,859
we get more efficiency.

336
00:11:48,859 --> 00:11:51,919
Yeah, follow up here. T.

337
00:11:55,880 --> 00:12:00,459
Yeah, there's a couple of
advantages to virtual machines.

338
00:12:00,459 --> 00:12:03,680
One is that we have
more flexibility.

339
00:12:03,680 --> 00:12:08,179
I could run like a
Windows VM on top of it.

340
00:12:08,179 --> 00:12:11,300
It's also g I want to get
like deep in security.

341
00:12:11,300 --> 00:12:14,420
It's arguably more
secure than a container.

342
00:12:14,420 --> 00:12:16,720
So those would be the
main advantage of VMs.

343
00:12:16,720 --> 00:12:22,050
Yeah, right here. Are there

344
00:12:22,050 --> 00:12:24,169
technique similar to
Docker on windows?

345
00:12:24,169 --> 00:12:25,930
I haven't been following
that space closely,

346
00:12:25,930 --> 00:12:29,809
but I have to assume that
they're doing stuff like that.

347
00:12:29,809 --> 00:12:32,749
Sometimes they'll
have, I know on Mac,

348
00:12:32,749 --> 00:12:34,409
they have a docker for Mac,

349
00:12:34,409 --> 00:12:36,129
and what that's actually
doing is it's spinning up

350
00:12:36,129 --> 00:12:37,530
a Linux virtual machine and

351
00:12:37,530 --> 00:12:39,129
then the running the
container inside of that.

352
00:12:39,129 --> 00:12:41,829
So oftentimes they will

353
00:12:41,829 --> 00:12:44,790
make it look like dockers
running on top of other things.

354
00:12:44,790 --> 00:12:46,449
I'm sure Microsoft is

355
00:12:46,449 --> 00:12:48,329
looking at different
isolation technologies.

356
00:12:48,329 --> 00:12:49,669
And we can talk more about that

357
00:12:49,669 --> 00:12:51,929
offline too. I don't
want to get too far up.

358
00:12:51,929 --> 00:12:53,550
I mean, I worked at
Microsoft for a while,

359
00:12:53,550 --> 00:12:54,730
so I can maybe give a little bit

360
00:12:54,730 --> 00:12:56,069
more of an in depth answer,

361
00:12:56,069 --> 00:12:58,729
but, I mean, they're
doing things too.

362
00:12:58,729 --> 00:13:00,969
Yeah, other questions
people have?

363
00:13:00,969 --> 00:13:05,969
Yeah, over here. Well, we

364
00:13:05,969 --> 00:13:07,830
talk about the difference
between Debi and ubuntu?

365
00:13:07,830 --> 00:13:10,010
No, not really. I mean,
ubuntu is based off of Debi.

366
00:13:10,010 --> 00:13:11,810
A lot of things are
kind of similar.

367
00:13:11,810 --> 00:13:12,910
I don't know, they install

368
00:13:12,910 --> 00:13:14,129
different software on top of it,

369
00:13:14,129 --> 00:13:15,970
maybe you install packages
slightly differently,

370
00:13:15,970 --> 00:13:17,449
but I mean, I don't know.

371
00:13:17,449 --> 00:13:19,610
I even thought about switching
to Debi in this semester,

372
00:13:19,610 --> 00:13:21,750
but it felt like it didn't
make that much difference.

373
00:13:21,750 --> 00:13:24,149
Yeah. Other questions
people have?

374
00:13:24,149 --> 00:13:26,030
Oh, right. After today,

375
00:13:26,030 --> 00:13:27,369
it'd be very easy
for you to try both.

376
00:13:27,369 --> 00:13:28,790
Like in 1 minute,
you could be using

377
00:13:28,790 --> 00:13:30,290
Debi and the next
year using ubuntu,

378
00:13:30,290 --> 00:13:32,845
you can try and see if
you feel a difference.

379
00:13:32,845 --> 00:13:36,620
So some of these
virtualization ideas

380
00:13:36,620 --> 00:13:39,699
are examples of sandboxes
and some are not, right?

381
00:13:39,699 --> 00:13:40,999
If I have a language
virtual machine,

382
00:13:40,999 --> 00:13:43,379
it doesn't necessarily protect
different applications

383
00:13:43,379 --> 00:13:44,639
from each other
because they can touch

384
00:13:44,639 --> 00:13:46,400
the same files, for example.

385
00:13:46,400 --> 00:13:48,460
And then other things
like containers and

386
00:13:48,460 --> 00:13:50,520
virtual machines are what
I would call sandboxes.

387
00:13:50,520 --> 00:13:52,660
They're kind of providing
some separation

388
00:13:52,660 --> 00:13:54,079
and protection from each other.

389
00:13:54,079 --> 00:13:55,599
You can kind of
almost look at this

390
00:13:55,599 --> 00:13:57,019
like a child playing
in a sandbox.

391
00:13:57,019 --> 00:13:59,159
That's a safe place to
play without kind of

392
00:13:59,159 --> 00:14:01,440
doing damage outside
of the sandbox.

393
00:14:01,440 --> 00:14:02,639
It's okay to be messy and

394
00:14:02,639 --> 00:14:04,094
when you're inside of a sandbox.

395
00:14:04,094 --> 00:14:05,390
So here I have an example of

396
00:14:05,390 --> 00:14:07,230
a computer with a bunch of
different sandboxes in it,

397
00:14:07,230 --> 00:14:09,350
maybe they're virtual machines,
maybe they're containers.

398
00:14:09,350 --> 00:14:09,669
I have

399
00:14:09,669 --> 00:14:11,589
the different software
versions and different ones.

400
00:14:11,589 --> 00:14:12,730
That's one advantage. It's not

401
00:14:12,730 --> 00:14:13,849
just about the operating system,

402
00:14:13,849 --> 00:14:15,589
but what packages we have.

403
00:14:15,589 --> 00:14:17,409
I have some processes
that might be

404
00:14:17,409 --> 00:14:19,310
running outside of any sandbox.

405
00:14:19,310 --> 00:14:20,869
Then you see up here,
I actually have

406
00:14:20,869 --> 00:14:23,270
a couple of malicious
containers.

407
00:14:23,270 --> 00:14:26,070
So one over here on the left
is running a Python program.

408
00:14:26,070 --> 00:14:27,790
And I'm wondering if
anybody can just pop

409
00:14:27,790 --> 00:14:29,689
up a hand and tell me what is

410
00:14:29,689 --> 00:14:32,149
this malicious program
trying to do to

411
00:14:32,149 --> 00:14:35,710
me. Yeah, go ahead.

412
00:14:37,030 --> 00:14:39,529
Yeah, trying to remove

413
00:14:39,529 --> 00:14:40,649
everything in the
root fold, right?

414
00:14:40,649 --> 00:14:41,930
So the RM is removed.

415
00:14:41,930 --> 00:14:43,570
That slash is the root.

416
00:14:43,570 --> 00:14:45,829
Recursive means don't
just do the top,

417
00:14:45,829 --> 00:14:47,769
but kind of go down and
find everything you can.

418
00:14:47,769 --> 00:14:49,709
And then force means even with

419
00:14:49,709 --> 00:14:50,849
some permissions
where you might not

420
00:14:50,849 --> 00:14:52,669
otherwise deleted it,
it will do it, right?

421
00:14:52,669 --> 00:14:54,469
So this would really kind
of wipe out everything.

422
00:14:54,469 --> 00:14:57,170
How bad is that? Well, if it
does inside of the sandbox,

423
00:14:57,170 --> 00:14:59,509
I guess that sandbox is
going to be messed up,

424
00:14:59,509 --> 00:15:02,849
but at least my host computer
will be fine, right?

425
00:15:02,849 --> 00:15:05,230
So I'd be kind of a
safer way to run,

426
00:15:05,230 --> 00:15:06,710
something like that
maybe to run code

427
00:15:06,710 --> 00:15:08,679
that I don't fully trust.

428
00:15:08,679 --> 00:15:11,249
Alright. And the way we're
going to be using sandboxes

429
00:15:11,249 --> 00:15:12,970
or containers this semester

430
00:15:12,970 --> 00:15:14,230
is that we're going to
have a virtual machine,

431
00:15:14,230 --> 00:15:15,849
and we'll have a few
different containers on it,

432
00:15:15,849 --> 00:15:17,870
and that will really look
like a small cluster.

433
00:15:17,870 --> 00:15:19,669
You're going to be
familiar with that.

434
00:15:19,669 --> 00:15:21,709
And then if we're good at
that, then we could later,

435
00:15:21,709 --> 00:15:23,249
you know, if you are
on a job somewhere,

436
00:15:23,249 --> 00:15:25,130
you could have a similar set
up instead of containers,

437
00:15:25,130 --> 00:15:27,870
you might actually have
real physical machines.

438
00:15:27,870 --> 00:15:30,070
All the same techniques
are going to apply.

439
00:15:30,070 --> 00:15:31,250
It'll just be much faster.

440
00:15:31,250 --> 00:15:33,030
Of course, if you have more real

441
00:15:33,030 --> 00:15:36,695
physical resources
thrown at your problem.

442
00:15:36,695 --> 00:15:40,120
Alright, cool. So let's look at

443
00:15:40,120 --> 00:15:41,860
some high level ideas related

444
00:15:41,860 --> 00:15:44,560
to Docker before we jump
into some examples.

445
00:15:44,560 --> 00:15:46,140
The first thing you have to do

446
00:15:46,140 --> 00:15:47,499
is you have to go
install Docker,

447
00:15:47,499 --> 00:15:49,879
and that's actually
part of the project.

448
00:15:49,879 --> 00:15:51,460
It's kind of actually
a few steps,

449
00:15:51,460 --> 00:15:54,299
maybe a little bit annoying,
but just do that, right?

450
00:15:54,299 --> 00:15:56,899
That would be like a nice
thing to do today and

451
00:15:56,899 --> 00:15:58,500
then kind of post that
significant start

452
00:15:58,500 --> 00:16:00,219
if you just row
through these steps.

453
00:16:00,219 --> 00:16:02,079
So follow through
those directions

454
00:16:02,079 --> 00:16:03,600
and get that installed,

455
00:16:03,600 --> 00:16:05,599
let us know if you
have any trouble.

456
00:16:05,599 --> 00:16:07,860
Afterwards, can you
can start using it.

457
00:16:07,860 --> 00:16:09,529
And using it might
look like this.

458
00:16:09,529 --> 00:16:12,639
I have a computer, my
virtual machine over here,

459
00:16:12,639 --> 00:16:14,080
and on my computer,

460
00:16:14,080 --> 00:16:16,700
I have these things
called Docker images.

461
00:16:16,700 --> 00:16:19,360
In this case, I have
a Ubuntu image.

462
00:16:19,360 --> 00:16:20,940
And where do I get these things?

463
00:16:20,940 --> 00:16:22,219
One place I could get them is

464
00:16:22,219 --> 00:16:24,159
from Docker Registry, right?

465
00:16:24,159 --> 00:16:25,620
Over here, I have
different registries.

466
00:16:25,620 --> 00:16:27,600
Maybe you're at a company
and they have a registry

467
00:16:27,600 --> 00:16:29,680
of different Docker
images you can use.

468
00:16:29,680 --> 00:16:32,300
The famous public one is
called the Docker Hub.

469
00:16:32,300 --> 00:16:33,219
And so there are a bunch of

470
00:16:33,219 --> 00:16:34,419
different images over there with

471
00:16:34,419 --> 00:16:36,720
different software
installed on them.

472
00:16:36,720 --> 00:16:39,320
And if I do a Docker pull
command like this down here,

473
00:16:39,320 --> 00:16:43,660
I'll basically pull down
that image to my machine.

474
00:16:43,660 --> 00:16:45,439
And When I have an image,

475
00:16:45,439 --> 00:16:46,919
I can almost use
it like a template

476
00:16:46,919 --> 00:16:48,260
to create different containers.

477
00:16:48,260 --> 00:16:50,380
I think you all know
object or programming.

478
00:16:50,380 --> 00:16:52,019
And so maybe the analogy
I'll make is that

479
00:16:52,019 --> 00:16:54,839
a Docker image is
like a class, right?

480
00:16:54,839 --> 00:16:56,680
I have one class and
I can create a lot of

481
00:16:56,680 --> 00:16:59,120
objects from it
when I instantiate.

482
00:16:59,120 --> 00:17:00,440
If I have a Docker image,

483
00:17:00,440 --> 00:17:02,599
I can create a lot of
different containers

484
00:17:02,599 --> 00:17:04,139
from that image. Let's do that.

485
00:17:04,139 --> 00:17:05,319
There's a Docker run command.

486
00:17:05,319 --> 00:17:07,419
If I say Docker, run in
the name of an image,

487
00:17:07,419 --> 00:17:08,999
I might run that a
few times and I get

488
00:17:08,999 --> 00:17:13,759
a few containers from
that image. All right.

489
00:17:13,759 --> 00:17:15,679
Now, sometimes there might

490
00:17:15,679 --> 00:17:17,559
be an image that does
exactly what I want.

491
00:17:17,559 --> 00:17:18,820
A lot of times, though,

492
00:17:18,820 --> 00:17:20,039
you're going to need
to have an image

493
00:17:20,039 --> 00:17:22,600
that has specific
software installed,

494
00:17:22,600 --> 00:17:24,299
and maybe that's not available.

495
00:17:24,299 --> 00:17:26,199
You go to figure out how to
build that image yourself.

496
00:17:26,199 --> 00:17:28,599
And particularly if you're
writing your own software,

497
00:17:28,599 --> 00:17:29,900
you want it to be
in a docker image,

498
00:17:29,900 --> 00:17:30,739
then of course, you're going to

499
00:17:30,739 --> 00:17:31,879
have to build it yourself.

500
00:17:31,879 --> 00:17:33,339
And that will be
kind of the form of,

501
00:17:33,339 --> 00:17:35,080
most of the projects
this semester,

502
00:17:35,080 --> 00:17:36,739
you're going to have
some docker images

503
00:17:36,739 --> 00:17:37,959
that you define yourself,

504
00:17:37,959 --> 00:17:39,599
and you'll kind of hand in

505
00:17:39,599 --> 00:17:42,859
a description of how we
can build those images.

506
00:17:43,320 --> 00:17:46,259
Here's where the analogy
breaks down a little bit

507
00:17:46,259 --> 00:17:48,599
between classes and
objects, right?

508
00:17:48,599 --> 00:17:50,739
I guess, in obit programming,

509
00:17:50,739 --> 00:17:52,760
you don't really take an
object and turn into a class,

510
00:17:52,760 --> 00:17:55,320
but that's what we will do
when we make a new image.

511
00:17:55,320 --> 00:17:56,919
We'll take a container that

512
00:17:56,919 --> 00:17:59,200
has the stuff installed
that we want to use,

513
00:17:59,200 --> 00:18:01,559
and we can convert it
back into an image.

514
00:18:01,559 --> 00:18:05,085
So the way this will work is
we can say, Docker build,

515
00:18:05,085 --> 00:18:07,070
and then I say some
kind of directory,

516
00:18:07,070 --> 00:18:08,329
and then I say T,

517
00:18:08,329 --> 00:18:11,170
and I say the name of the
image I want to build.

518
00:18:11,170 --> 00:18:12,389
So this my image,

519
00:18:12,389 --> 00:18:14,990
directory will contain a file

520
00:18:14,990 --> 00:18:16,989
called Docker file.
That's the name of it.

521
00:18:16,989 --> 00:18:19,229
And that Docker file defines

522
00:18:19,229 --> 00:18:20,989
all the steps you
have to do one by

523
00:18:20,989 --> 00:18:23,029
one to create the image
you want to create.

524
00:18:23,029 --> 00:18:25,189
And so if I run this
Docker build command,

525
00:18:25,189 --> 00:18:26,790
what will happen is it first,

526
00:18:26,790 --> 00:18:28,310
it's starting from ubuntu.

527
00:18:28,310 --> 00:18:29,990
I can see that first
line from Ubuntu.

528
00:18:29,990 --> 00:18:32,489
I'll create a container
from the ubuntu image,

529
00:18:32,489 --> 00:18:33,729
and it'll start running

530
00:18:33,729 --> 00:18:34,989
all these install steps

531
00:18:34,989 --> 00:18:36,609
in or whatever else
I want to do in it.

532
00:18:36,609 --> 00:18:38,270
And when it's all done,
it'll basically create

533
00:18:38,270 --> 00:18:40,400
a snapshot of that container.

534
00:18:40,400 --> 00:18:42,509
And it will give
it the name Pandas

535
00:18:42,509 --> 00:18:44,350
because I said T for tag.

536
00:18:44,350 --> 00:18:45,909
I'm going tag it as Pandas.

537
00:18:45,909 --> 00:18:48,649
And so Ubuntu, I pulled
from the Docker hub,

538
00:18:48,649 --> 00:18:50,889
Pandas I built myself.

539
00:18:50,889 --> 00:18:53,029
Mostly when you're building
something yourself,

540
00:18:53,029 --> 00:18:54,190
you're starting from
something a little

541
00:18:54,190 --> 00:18:55,929
bit more generic, right?

542
00:18:55,929 --> 00:18:57,689
And then once I have that, then

543
00:18:57,689 --> 00:18:58,949
I can start new containers.

544
00:18:58,949 --> 00:19:00,909
And when I start
those new containers,

545
00:19:00,909 --> 00:19:03,869
then it will already
have Pandas installed.

546
00:19:03,869 --> 00:19:05,689
And that's more
efficient, right?

547
00:19:05,689 --> 00:19:07,650
Like I I start a bunch
of different containers,

548
00:19:07,650 --> 00:19:09,509
I only had to
install Pandas once,

549
00:19:09,509 --> 00:19:12,590
but they all have Pandas
available to them.

550
00:19:12,590 --> 00:19:14,489
Any questions about that kind of

551
00:19:14,489 --> 00:19:18,589
general setup? Yeah, right here.

552
00:19:19,350 --> 00:19:23,629
I. So build creates
the container.

553
00:19:23,629 --> 00:19:25,510
And what was the
other thing you said?

554
00:19:25,510 --> 00:19:32,210
Yes. Oh, yeah.

555
00:19:32,210 --> 00:19:34,729
Okay, there's two commands
that create a container.

556
00:19:34,729 --> 00:19:36,489
If I do Docker run, I get

557
00:19:36,489 --> 00:19:39,689
a container just for me to
start using for something.

558
00:19:39,689 --> 00:19:41,649
If I do docker build,

559
00:19:41,649 --> 00:19:43,570
that will also
create a container,

560
00:19:43,570 --> 00:19:45,249
but it will automatically

561
00:19:45,249 --> 00:19:46,829
bun a bunch of
install stuffs in it,

562
00:19:46,829 --> 00:19:48,269
and then it'll snapshot it

563
00:19:48,269 --> 00:19:50,330
back and then it'll
kill the container.

564
00:19:50,330 --> 00:19:51,949
So Docker Run is

565
00:19:51,949 --> 00:19:53,469
the primary way you're going
to creating containers,

566
00:19:53,469 --> 00:19:54,829
but Docker build just as

567
00:19:54,829 --> 00:19:56,269
kind of a side
effect we'll have to

568
00:19:56,269 --> 00:19:59,690
do create a container as
well. That makes sense?

569
00:19:59,690 --> 00:20:02,329
Yeah, I saw another
question over here.

570
00:20:03,850 --> 00:20:09,950
Institution Yeah, the question
is, does the Docer file?

571
00:20:09,950 --> 00:20:11,870
Is it just installations
or copy other stuff.

572
00:20:11,870 --> 00:20:13,209
I could be whatever you want.

573
00:20:13,209 --> 00:20:14,390
Anything you can
run on the shell,

574
00:20:14,390 --> 00:20:15,069
you could put in there.

575
00:20:15,069 --> 00:20:17,330
So I guess you have to say
like maybe data or whatever.

576
00:20:17,330 --> 00:20:19,009
You can put whatever you
want in there, right?

577
00:20:19,009 --> 00:20:22,189
And this is actually
kind of nice because

578
00:20:22,189 --> 00:20:24,230
we're unambiguously
decide describe

579
00:20:24,230 --> 00:20:25,750
how to get a specific setup.

580
00:20:25,750 --> 00:20:27,209
Maybe there's even
data with that.

581
00:20:27,209 --> 00:20:28,709
Especially if we're
like a scientist and

582
00:20:28,709 --> 00:20:30,769
somebody else to reproduce
our analysis with

583
00:20:30,769 --> 00:20:33,489
specific data and specific code

584
00:20:33,489 --> 00:20:35,429
and specific versions
of packages.

585
00:20:35,429 --> 00:20:37,569
This is a way for us
to unambiguously say,

586
00:20:37,569 --> 00:20:39,510
this is how you get
the same environment.

587
00:20:39,510 --> 00:20:40,949
I. Right? If you're a scientist,

588
00:20:40,949 --> 00:20:42,769
you want to have
reproducible work.

589
00:20:42,769 --> 00:20:46,429
This is kind of very broadly
useful to data scientists.

590
00:20:46,429 --> 00:20:48,749
Yeah, other are
questions people have.

591
00:20:50,640 --> 00:20:55,359
All right. Cool. So
we're a head over.

592
00:20:55,359 --> 00:20:57,400
We're going to do a top
hat and then some demos.

593
00:20:57,400 --> 00:21:00,080
So whip out your phone.

594
00:21:00,160 --> 00:21:05,559
And excuse me. All right.

595
00:21:05,559 --> 00:21:07,919
So what I'm asking
about is if I do Docker

596
00:21:07,919 --> 00:21:10,999
pull X. I'm just wondering
what X is. Is it a container?

597
00:21:10,999 --> 00:21:14,839
Is it an image? Is it a
registry? What is it?

598
00:22:08,990 --> 00:22:12,050
Alright, Fantastic. So most
people are saying an image,

599
00:22:12,050 --> 00:22:13,549
which is correct, do Docker

600
00:22:13,549 --> 00:22:15,770
pull by DFL thatt, look
at the Docker hub.

601
00:22:15,770 --> 00:22:16,949
I pulled on that image.

602
00:22:16,949 --> 00:22:18,130
If I wanted a container,

603
00:22:18,130 --> 00:22:21,089
then after that, then
maybe I might go run it.

604
00:22:21,089 --> 00:22:23,249
Alright, cool. Let's
jump in. Yeah.

605
00:22:23,249 --> 00:22:25,169
Crush here. Where's it?

606
00:22:25,169 --> 00:22:27,590
It pulls it from registry.

607
00:22:27,590 --> 00:22:29,210
Maybe that registry
is Docker hub,

608
00:22:29,210 --> 00:22:32,550
Maybe it's like a private
corporate registry.

609
00:22:32,590 --> 00:22:35,569
Alright. C. Let's jump in.

610
00:22:35,569 --> 00:22:37,809
Let's get some Docker
commands going.

611
00:22:37,809 --> 00:22:42,509
I'm going to SSH N. Great.

612
00:22:42,509 --> 00:22:45,510
And Great.

613
00:22:45,510 --> 00:22:47,189
I'll just try to clean
this up a little bit.

614
00:22:47,189 --> 00:22:48,750
Here I am, Fresh environment.

615
00:22:48,750 --> 00:22:50,969
If you already install Docker,
you can just run Docker,

616
00:22:50,969 --> 00:22:52,149
and that's actually
kind of great because

617
00:22:52,149 --> 00:22:54,289
it'll just show you a
bunch of documentation.

618
00:22:54,289 --> 00:22:56,349
And so if I stroll up a bit,

619
00:22:56,349 --> 00:22:57,649
then there's a bunch
of commands here,

620
00:22:57,649 --> 00:22:59,169
which should all be in
your notes, by the way.

621
00:22:59,169 --> 00:23:00,830
Take notes on these
and remember these.

622
00:23:00,830 --> 00:23:02,310
We can say we can
run containers,

623
00:23:02,310 --> 00:23:03,589
we can build containers, we can

624
00:23:03,589 --> 00:23:05,549
pull containers, so
on and so forth.

625
00:23:05,549 --> 00:23:06,809
I'm going to be showing

626
00:23:06,809 --> 00:23:08,850
examples of those in a
whole bunch more as well.

627
00:23:08,850 --> 00:23:10,169
So if I want to
do a pull, right,

628
00:23:10,169 --> 00:23:11,390
I could say Docker pull,

629
00:23:11,390 --> 00:23:12,649
and if I want to learn
more about that,

630
00:23:12,649 --> 00:23:13,830
I might say dash hell.

631
00:23:13,830 --> 00:23:15,559
It's actually telling
me that right here.

632
00:23:15,559 --> 00:23:19,150
That I can read more
about these with Health.

633
00:23:19,150 --> 00:23:21,110
And so I can see I
do Docker, pull.

634
00:23:21,110 --> 00:23:22,729
And a lot of this
documentation stuff if

635
00:23:22,729 --> 00:23:24,569
it's in square brackets,
as it means it's optional.

636
00:23:24,569 --> 00:23:26,369
So maybe I put something
there, maybe not.

637
00:23:26,369 --> 00:23:28,949
I see the name. I have to
have the name of the image.

638
00:23:28,949 --> 00:23:30,309
And then up here,

639
00:23:30,309 --> 00:23:33,909
I have to specify, I can
specify a tag if I want to.

640
00:23:33,909 --> 00:23:35,449
We are these tags coming from?

641
00:23:35,449 --> 00:23:38,549
Let me just head back here
to the slides momentarily.

642
00:23:38,549 --> 00:23:42,290
And we can see, let's take
a look at a real registry,

643
00:23:42,290 --> 00:23:43,770
which is the Docker hub,

644
00:23:43,770 --> 00:23:45,269
here is the Docker hub, has

645
00:23:45,269 --> 00:23:47,250
a whole bunch of
images I can download.

646
00:23:47,250 --> 00:23:48,949
Like, MMC D is

647
00:23:48,949 --> 00:23:50,669
the most popular engine ax for

648
00:23:50,669 --> 00:23:53,090
some HDP hosting,
busybox Alpine.

649
00:23:53,090 --> 00:23:55,670
Here's ubuntu. Let me
take a look at Ubuntu.

650
00:23:55,670 --> 00:23:57,869
I see that Ubuntu has a bunch of

651
00:23:57,869 --> 00:24:00,150
different tags because there

652
00:24:00,150 --> 00:24:02,729
are different versions
of ubuntu, right?

653
00:24:02,729 --> 00:24:04,850
So, for example, over here,

654
00:24:04,850 --> 00:24:08,140
if I do CT ETC OS release.

655
00:24:08,140 --> 00:24:10,760
I am on Ubuntu 244.

656
00:24:10,760 --> 00:24:13,340
That is the most recent
long term support version.

657
00:24:13,340 --> 00:24:15,580
It's the most recent thing
that's pretty stable.

658
00:24:15,580 --> 00:24:18,140
If I look over on
the Docker hub,

659
00:24:18,140 --> 00:24:20,919
I can see that they
have 2410, right?

660
00:24:20,919 --> 00:24:22,719
So these are actually
based on dates, right?

661
00:24:22,719 --> 00:24:23,879
So this is the October release.

662
00:24:23,879 --> 00:24:26,200
I guess it's not even October
yet, but it's out there.

663
00:24:26,200 --> 00:24:29,260
And it's not going to be a
stable or long term supported,

664
00:24:29,260 --> 00:24:30,639
but it's the most recent thing.

665
00:24:30,639 --> 00:24:32,799
Maybe I might want
that in my container.

666
00:24:32,799 --> 00:24:34,580
So we're going to
see how we can use

667
00:24:34,580 --> 00:24:38,839
2410 and just get a container
that is running that.

668
00:24:38,839 --> 00:24:40,239
All right. So what
I can do is I can

669
00:24:40,239 --> 00:24:42,179
say, Docker pull Ubuntu.

670
00:24:42,179 --> 00:24:46,880
And I'll say 22,
I'm sorry, 2410.

671
00:24:46,880 --> 00:24:48,740
And I'm going to pull that down,

672
00:24:48,740 --> 00:24:50,180
and that was trying to fast.

673
00:24:50,180 --> 00:24:52,099
And then if I want to see
what I have available,

674
00:24:52,099 --> 00:24:55,059
I can say, Dor images, right?

675
00:24:55,059 --> 00:24:56,240
I can see all the
different images.

676
00:24:56,240 --> 00:24:57,780
I should have kind of
clean this up before.

677
00:24:57,780 --> 00:24:59,799
But I can see, sure enough,

678
00:24:59,799 --> 00:25:03,919
here is Ubuntu, and
it's 2410, right?

679
00:25:03,919 --> 00:25:05,780
And there's some
kind of image ID

680
00:25:05,780 --> 00:25:07,979
associated with it, right?

681
00:25:07,979 --> 00:25:11,289
So then I could grow and I
could run that if I want to.

682
00:25:11,289 --> 00:25:14,180
If I want to, I can give
these things different names.

683
00:25:14,180 --> 00:25:16,320
So I can do something like
I could say Docker tag,

684
00:25:16,320 --> 00:25:18,800
and I could say old
name and new name.

685
00:25:18,800 --> 00:25:21,279
And when I do this, then it
will have two names, right?

686
00:25:21,279 --> 00:25:25,520
So I could say Ubuntu 2410,

687
00:25:25,520 --> 00:25:29,999
and I could say, I could
say my Ubuntu, right?

688
00:25:29,999 --> 00:25:33,999
And then if I say Docker
image images after that.

689
00:25:33,999 --> 00:25:35,600
So images should
be in your list.

690
00:25:35,600 --> 00:25:37,220
I see here is my Ubuntu.

691
00:25:37,220 --> 00:25:38,520
Here was the one I pulled down.

692
00:25:38,520 --> 00:25:40,680
Even though I had they have
different tags on them,

693
00:25:40,680 --> 00:25:42,360
they have the same image ID.

694
00:25:42,360 --> 00:25:43,999
So we have differ
name the same thing.

695
00:25:43,999 --> 00:25:46,000
I want to know what is actually
different or the same.

696
00:25:46,000 --> 00:25:47,660
I'm going to look
at that image ID

697
00:25:47,660 --> 00:25:50,434
instead of the
actual name of it.

698
00:25:50,434 --> 00:25:53,149
Alright, let's try
running this thing.

699
00:25:53,149 --> 00:25:56,390
I could do Docker Run ubuntu,

700
00:25:56,390 --> 00:25:59,369
24.10, or if I just
do it like this,

701
00:25:59,369 --> 00:26:00,930
then it will look for
the latest version.

702
00:26:00,930 --> 00:26:03,049
And I think I actually have
a latest version up here.

703
00:26:03,049 --> 00:26:05,090
But that's another reason
we might tag things.

704
00:26:05,090 --> 00:26:07,969
I might tag it as
ubuntu latest, right?

705
00:26:07,969 --> 00:26:09,650
I might indicate, what
is the latest ubuntu

706
00:26:09,650 --> 00:26:11,189
that I actually
want to go and run?

707
00:26:11,189 --> 00:26:12,829
And then if I can just say

708
00:26:12,829 --> 00:26:15,969
Docker Run Ubuntu,
and nothing happens.

709
00:26:15,969 --> 00:26:17,729
Well, nothing happens
that I can see.

710
00:26:17,729 --> 00:26:20,829
I created a container. It
looked for some input.

711
00:26:20,829 --> 00:26:23,009
There was none, I
exited again, right?

712
00:26:23,009 --> 00:26:24,250
So what if I want
to run something

713
00:26:24,250 --> 00:26:25,690
inside of that container,

714
00:26:25,690 --> 00:26:27,970
I can put a command over here.

715
00:26:27,970 --> 00:26:30,569
Any kind of shell command
is fair name here,

716
00:26:30,569 --> 00:26:32,329
so I could do echo hello,

717
00:26:32,329 --> 00:26:33,990
and then it will
run hello inside

718
00:26:33,990 --> 00:26:35,670
of a container, the
container exits.

719
00:26:35,670 --> 00:26:37,369
The main thing to see
right now is that this is,

720
00:26:37,369 --> 00:26:40,549
like, super fast compared to
creating a virtual machine.

721
00:26:40,549 --> 00:26:42,389
It's impressive, both in

722
00:26:42,389 --> 00:26:44,470
terms of pulling it
and running things.

723
00:26:44,470 --> 00:26:45,349
All right, what if I want to

724
00:26:45,349 --> 00:26:46,169
do something more interesting?

725
00:26:46,169 --> 00:26:47,469
What if I want to
do like a doc or

726
00:26:47,469 --> 00:26:49,330
run, and I want a shell.

727
00:26:49,330 --> 00:26:52,004
So then Bash is the name
of a shell. I do that.

728
00:26:52,004 --> 00:26:53,739
That starts a container,

729
00:26:53,739 --> 00:26:55,440
starts running bash,
the bash says,

730
00:26:55,440 --> 00:26:56,819
there's nothing from
standard input.

731
00:26:56,819 --> 00:26:58,120
I'm going to exit right away.

732
00:26:58,120 --> 00:27:00,840
What I might want to do is
I might want to say IT.

733
00:27:00,840 --> 00:27:02,999
I want to have an interactive
terminal so I can

734
00:27:02,999 --> 00:27:05,399
start typing to bash. I do that.

735
00:27:05,399 --> 00:27:08,020
And now I am inside
of a container,

736
00:27:08,020 --> 00:27:09,840
and I have a shell
environment there.

737
00:27:09,840 --> 00:27:12,100
And this is pretty cool.

738
00:27:12,100 --> 00:27:13,619
Be if I like, look at
my home directory,

739
00:27:13,619 --> 00:27:16,739
my home directory is
root, look over here.

740
00:27:16,739 --> 00:27:19,959
IM root. When you're in a
container, you're always root.

741
00:27:19,959 --> 00:27:22,459
There's no more pseudo when
you're inside of a container.

742
00:27:22,459 --> 00:27:23,559
You can do whatever you want.

743
00:27:23,559 --> 00:27:25,959
That's your sandbox
to play around with,

744
00:27:25,959 --> 00:27:29,659
have fun and just be free,
right? I can do that.

745
00:27:29,659 --> 00:27:33,600
If I look at ETC, OS release.

746
00:27:33,600 --> 00:27:37,700
I can see that even
though the Ubuntu,

747
00:27:37,700 --> 00:27:38,939
I'm going to call
that the host, right?

748
00:27:38,939 --> 00:27:40,179
That's outside of the container.

749
00:27:40,179 --> 00:27:44,740
On the host, I'm 24 oh
four, inside I'm 2410.

750
00:27:44,740 --> 00:27:47,179
Okay, I'm going to do
something kind of crazy.

751
00:27:47,179 --> 00:27:48,600
Okay, if you're following along,

752
00:27:48,600 --> 00:27:50,119
make sure make sure you're

753
00:27:50,119 --> 00:27:51,980
in the container.
Don't do it otherwise.

754
00:27:51,980 --> 00:27:57,020
I am going to do remove
recursive force.

755
00:27:57,540 --> 00:28:00,120
L et's delete everything,

756
00:28:00,120 --> 00:28:02,199
right? I run that.

757
00:28:02,199 --> 00:28:04,779
I'm trying to try to delete
everything it possibly can.

758
00:28:04,779 --> 00:28:07,679
Alright. And now I'm
gonna run the LS command.

759
00:28:07,679 --> 00:28:09,479
I remember if people
remember the LS command.

760
00:28:09,479 --> 00:28:11,679
What is this t to show
up when I run LS?

761
00:28:11,679 --> 00:28:15,290
Just shout it out. I
heard people say nothing.

762
00:28:15,290 --> 00:28:17,989
It's even worse than that.
I deleted the LS command.

763
00:28:17,989 --> 00:28:20,349
There's like, This is the most
worthless environment now.

764
00:28:20,349 --> 00:28:21,929
Everything is completely broken.

765
00:28:21,929 --> 00:28:23,730
There's nothing I can do here.

766
00:28:23,730 --> 00:28:25,389
Thank goodness. It's
in a container.

767
00:28:25,389 --> 00:28:26,489
Let's get out of
here. I'm going to

768
00:28:26,489 --> 00:28:27,989
do Control D. I'm out.

769
00:28:27,989 --> 00:28:30,690
LS works again. I'm
back to my host.

770
00:28:30,690 --> 00:28:33,129
How many of you have ever felt

771
00:28:33,129 --> 00:28:34,250
like that you can kind

772
00:28:34,250 --> 00:28:35,590
of learn something
by playing around,

773
00:28:35,590 --> 00:28:36,870
but you're afraid to play around

774
00:28:36,870 --> 00:28:38,010
because you might
break something?

775
00:28:38,010 --> 00:28:39,429
Has anybody ever felt that way?

776
00:28:39,429 --> 00:28:40,830
I felt that way a lot.

777
00:28:40,830 --> 00:28:42,429
Containers solve that problem.

778
00:28:42,429 --> 00:28:44,130
You can get in a container,
you can mess around,

779
00:28:44,130 --> 00:28:45,590
break things. That
doesn't matter.

780
00:28:45,590 --> 00:28:47,409
You mess it up,
create a new one.

781
00:28:47,409 --> 00:28:50,664
It's such a great learning
tool from that perspective.

782
00:28:50,664 --> 00:28:53,799
All right, cool. Any questions
people have so far about

783
00:28:53,799 --> 00:28:56,259
this very broken container or

784
00:28:56,259 --> 00:29:00,719
the tools I've been running
so far? Yeah, right here.

785
00:29:04,020 --> 00:29:07,279
Oh, that's a good question.
Is the container still there?

786
00:29:07,279 --> 00:29:09,199
It's an exited state,
so it's still there,

787
00:29:09,199 --> 00:29:10,999
and there's ways I
could rebuy it or kind

788
00:29:10,999 --> 00:29:12,959
of poke around and it state
and then I'll show that.

789
00:29:12,959 --> 00:29:16,919
But yeah, so it's
pretty much gone,

790
00:29:16,919 --> 00:29:19,959
yeah, there's some other
cleanup that we'll look at.

791
00:29:19,959 --> 00:29:21,979
Yeah, other questions
people have.

792
00:29:21,979 --> 00:29:28,419
Yeah, right here.
Exit machine Yeah,

793
00:29:28,419 --> 00:29:29,639
if you reboot your machine

794
00:29:29,639 --> 00:29:31,219
or stuff like that,
it's still there.

795
00:29:31,219 --> 00:29:34,020
Y. I another handle.

796
00:29:39,700 --> 00:29:42,140
Oh, yeah, that's
a great question.

797
00:29:42,140 --> 00:29:43,799
So when I did ubuntu

798
00:29:43,799 --> 00:29:45,259
like that, how did
it know which one?

799
00:29:45,259 --> 00:29:47,080
So if I look at the images,

800
00:29:47,080 --> 00:29:49,819
I had tagged one of
these as the latest,

801
00:29:49,819 --> 00:29:51,500
and so it does that
one by default.

802
00:29:51,500 --> 00:29:52,719
And so that was
one of the reasons

803
00:29:52,719 --> 00:29:54,059
I ran this command because

804
00:29:54,059 --> 00:29:56,920
I wanted to spec maybe I
have a few different ubuntu.

805
00:29:56,920 --> 00:29:58,459
I want to say which one
is like the latest one

806
00:29:58,459 --> 00:29:59,779
that I would actually use.

807
00:29:59,779 --> 00:30:01,860
And then if I do that, then
I don't have to specify.

808
00:30:01,860 --> 00:30:04,104
So it looks for a
latest by default.

809
00:30:04,104 --> 00:30:06,189
Yeah, lots of good questions.

810
00:30:06,189 --> 00:30:09,590
Fantastic. Alright. Cool.
Let's run some other stuff.

811
00:30:09,590 --> 00:30:12,969
I'm going to do docker run well,

812
00:30:12,969 --> 00:30:14,329
actually, I've
already pulled this,

813
00:30:14,329 --> 00:30:15,830
but I'm going to pull Alpine

814
00:30:15,830 --> 00:30:19,389
3.15. And then
it's already here.

815
00:30:19,389 --> 00:30:20,909
If I look at that, you actually

816
00:30:20,909 --> 00:30:22,789
see a lot of different
docker images that

817
00:30:22,789 --> 00:30:24,409
are based on Alpine because

818
00:30:24,409 --> 00:30:26,509
when you're trying to
build a container image,

819
00:30:26,509 --> 00:30:27,829
you're just trying to
do one thing well,

820
00:30:27,829 --> 00:30:28,969
and you don't need
all the stuff you

821
00:30:28,969 --> 00:30:30,150
get like in a full ubuntu.

822
00:30:30,150 --> 00:30:32,229
So I can see that Alpine is like

823
00:30:32,229 --> 00:30:35,109
a tenth the size of
a ubuntu, right?

824
00:30:35,109 --> 00:30:37,029
So you'll see a lot of
things starting on that.

825
00:30:37,029 --> 00:30:41,190
If I do a docker run, Alpine.

826
00:30:41,190 --> 00:30:42,669
It's so stripped down that I

827
00:30:42,669 --> 00:30:43,929
don't even have
bash inside of it.

828
00:30:43,929 --> 00:30:44,849
I just have to have kind of,

829
00:30:44,849 --> 00:30:47,050
like this just generic shell,

830
00:30:47,050 --> 00:30:48,230
but I can do that, and there's

831
00:30:48,230 --> 00:30:49,909
things I can run inside of here.

832
00:30:49,909 --> 00:30:53,929
Another thing I want to show
you is that if I do this,

833
00:30:53,929 --> 00:30:57,309
I don't already have 316
of Alpine on my machine,

834
00:30:57,309 --> 00:30:59,029
but it'll actually
pull it for me,

835
00:30:59,029 --> 00:31:01,349
which is fast because it's
small, then it'll run it.

836
00:31:01,349 --> 00:31:03,749
So I can actually pull the
whole image and run it in,

837
00:31:03,749 --> 00:31:05,794
you know, maybe just
like a second or two.

838
00:31:05,794 --> 00:31:07,579
L et me it out of here. Let me

839
00:31:07,579 --> 00:31:09,400
show you a common
issue people run into.

840
00:31:09,400 --> 00:31:11,779
So I'm going to have a
typo, pretty obvious.

841
00:31:11,779 --> 00:31:14,499
I'm going to have Alpine
typo. I run that.

842
00:31:14,499 --> 00:31:16,799
And what it's trying
to do is since it can

843
00:31:16,799 --> 00:31:19,259
pull automatically
it first sees like,

844
00:31:19,259 --> 00:31:21,299
Oh, do I have it local,
and answer is no.

845
00:31:21,299 --> 00:31:22,780
So then it goes to
the Docker hub,

846
00:31:22,780 --> 00:31:24,480
and it says, Well, it's
not on Docker Hub.

847
00:31:24,480 --> 00:31:25,740
And then it's wondering, Oh,

848
00:31:25,740 --> 00:31:28,099
is this the name of some image

849
00:31:28,099 --> 00:31:30,479
on your private
corporate network,

850
00:31:30,479 --> 00:31:32,240
on your private
corporate registry?

851
00:31:32,240 --> 00:31:34,040
And it says, maybe you have
to log into something.

852
00:31:34,040 --> 00:31:36,059
So I've seen that
this error message

853
00:31:36,059 --> 00:31:37,579
has thrown off a
lot of students.

854
00:31:37,579 --> 00:31:39,119
When you get this,
it doesn't mean

855
00:31:39,119 --> 00:31:40,759
you actually have to
log into anything.

856
00:31:40,759 --> 00:31:42,885
It just means that that
image wasn't there.

857
00:31:42,885 --> 00:31:45,670
So maybe you had a typo
or I think more often,

858
00:31:45,670 --> 00:31:47,469
like in your projects,
you're supposed to, like,

859
00:31:47,469 --> 00:31:49,409
build images for your homework,

860
00:31:49,409 --> 00:31:50,989
and oftentimes people
just didn't, like,

861
00:31:50,989 --> 00:31:52,970
build it, they forgot to
build it, and that's why.

862
00:31:52,970 --> 00:31:55,849
So just know that all this
means is that it's missing,

863
00:31:55,849 --> 00:31:57,690
it doesn't mean that
you have to log

864
00:31:57,690 --> 00:32:00,970
into something. Alright, cool.

865
00:32:00,970 --> 00:32:06,009
Let's Can somebody remind
me what does PS do?

866
00:32:06,550 --> 00:32:10,050
Yeah, right here. It
lists all the processes.

867
00:32:10,050 --> 00:32:11,689
Excellent. And so a lot of

868
00:32:11,689 --> 00:32:14,329
the Docker commands are

869
00:32:14,329 --> 00:32:16,390
kind of similar to
the shell commands.

870
00:32:16,390 --> 00:32:17,970
So when I look at Docker,

871
00:32:17,970 --> 00:32:19,389
they have all these
different subcommands.

872
00:32:19,389 --> 00:32:20,989
One of them is Docker PS,

873
00:32:20,989 --> 00:32:23,629
which lists all the
running processes,

874
00:32:23,629 --> 00:32:26,429
and right now there are
no running processes.

875
00:32:26,429 --> 00:32:28,570
If I do A, that means

876
00:32:28,570 --> 00:32:30,730
I also want to see the
ones that have exited,

877
00:32:30,730 --> 00:32:31,929
and I see wi there's actually

878
00:32:31,929 --> 00:32:33,809
a bunch of them that
are not cleaned up,

879
00:32:33,809 --> 00:32:35,090
these are all using space,

880
00:32:35,090 --> 00:32:37,329
and I think that actually people

881
00:32:37,329 --> 00:32:38,649
commonly run out of space on

882
00:32:38,649 --> 00:32:39,989
their VMs during this course,

883
00:32:39,989 --> 00:32:41,670
and Docker is a big reason

884
00:32:41,670 --> 00:32:42,910
because all of these
are taking up space.

885
00:32:42,910 --> 00:32:44,070
You have to go through and clean

886
00:32:44,070 --> 00:32:45,289
that stuff up from now and then.

887
00:32:45,289 --> 00:32:49,289
Yeah, right here. A means all.

888
00:32:49,289 --> 00:32:51,450
So that means I don't want
just running containers,

889
00:32:51,450 --> 00:32:53,689
but I want exited
containers, too, right?

890
00:32:53,689 --> 00:32:55,749
So all the things I've done
so far have been kind of

891
00:32:55,749 --> 00:32:58,169
accumulate all these
exited containers.

892
00:32:58,169 --> 00:33:00,309
So one way we can delete this,

893
00:33:00,309 --> 00:33:01,670
I can say, remove,

894
00:33:01,670 --> 00:33:04,700
and I could grab I could grab,

895
00:33:04,700 --> 00:33:07,119
for example, the
ID of it, right?

896
00:33:07,119 --> 00:33:08,819
So I could grab
the container ID,

897
00:33:08,819 --> 00:33:09,879
and I could remove that.

898
00:33:09,879 --> 00:33:13,880
Another option is that
I could grab the name.

899
00:33:13,880 --> 00:33:15,080
So the way they
give these things

900
00:33:15,080 --> 00:33:16,619
names is they have a
list of famous people.

901
00:33:16,619 --> 00:33:17,999
They have a list of adjectives.

902
00:33:17,999 --> 00:33:20,420
They randomly pair them,
and they give it a name.

903
00:33:20,420 --> 00:33:22,159
So it's maybe a little
bit more human friendly,

904
00:33:22,159 --> 00:33:24,740
so I could remove
determined Wesco.

905
00:33:24,740 --> 00:33:26,419
And I could go
through one by one,

906
00:33:26,419 --> 00:33:28,940
and I might try to paste a
bunch of different IDs here.

907
00:33:28,940 --> 00:33:31,279
But I want a faster
way to do that.

908
00:33:31,279 --> 00:33:32,600
So what's a faster way?

909
00:33:32,600 --> 00:33:35,559
Well, I can say Docer PS and A.

910
00:33:35,559 --> 00:33:37,219
And what I might
do is I might say,

911
00:33:37,219 --> 00:33:38,700
I want quiet output.

912
00:33:38,700 --> 00:33:40,459
So Q means quiet.

913
00:33:40,459 --> 00:33:42,959
And what I'd like to do
is I'd like to take this,

914
00:33:42,959 --> 00:33:44,779
and I'd like to somehow feed it

915
00:33:44,779 --> 00:33:47,960
into to RM to
remove all of them.

916
00:33:47,960 --> 00:33:52,199
Now, if DocR RM was taking
input from standard input,

917
00:33:52,199 --> 00:33:54,939
then I would use a pipe, right?

918
00:33:54,939 --> 00:33:56,779
If that's how they built DCR RM,

919
00:33:56,779 --> 00:33:59,459
I would like to
pipe this to that.

920
00:33:59,459 --> 00:34:02,419
But DCR RM does not
take standard input.

921
00:34:02,419 --> 00:34:04,940
What it takes instead
is arguments,

922
00:34:04,940 --> 00:34:06,979
but there's still a
way to chain together

923
00:34:06,979 --> 00:34:09,600
two shell commands so
that we can either

924
00:34:09,600 --> 00:34:12,039
feed the output of one
program into standard N

925
00:34:12,039 --> 00:34:13,239
or we can feed the output of

926
00:34:13,239 --> 00:34:14,740
that first program
into arguments.

927
00:34:14,740 --> 00:34:16,999
The way we feed into arguments
is we use back tech.

928
00:34:16,999 --> 00:34:18,654
Let me say Ba tech B tech,

929
00:34:18,654 --> 00:34:20,649
and I'm going to take
this command up here,

930
00:34:20,649 --> 00:34:23,749
and I feed that in, and so
it'll run this command first.

931
00:34:23,749 --> 00:34:25,290
I'll get all those IDs,

932
00:34:25,290 --> 00:34:26,829
and then it'll
remove all of them.

933
00:34:26,829 --> 00:34:29,629
And now when I do that
and I run PSA again.

934
00:34:29,629 --> 00:34:30,789
I've kind of cleaned
everything up,

935
00:34:30,789 --> 00:34:31,769
so you can drove through,

936
00:34:31,769 --> 00:34:35,910
clean things up and
reclaim some space.

937
00:34:35,910 --> 00:34:38,209
Oh, right, fantastic.

938
00:34:38,209 --> 00:34:40,149
So other things you might do

939
00:34:40,149 --> 00:34:42,370
is you might say Docker system.

940
00:34:42,370 --> 00:34:44,449
There's a few different
commands under there.

941
00:34:44,449 --> 00:34:46,649
You might remember DF
from before, right,

942
00:34:46,649 --> 00:34:49,049
DF shows you how
much disk is used,

943
00:34:49,049 --> 00:34:50,509
and I often run it
kind of like human

944
00:34:50,509 --> 00:34:52,210
readable on the
current directory.

945
00:34:52,210 --> 00:34:54,489
So this tells me I
have 24 gigabytes,

946
00:34:54,489 --> 00:34:57,014
and I'm using like 4.7 of it.

947
00:34:57,014 --> 00:34:58,719
Right? So again, right, a lot of

948
00:34:58,719 --> 00:35:00,119
the Docker commands
mirror these.

949
00:35:00,119 --> 00:35:02,080
So I can say Docker system, DF,

950
00:35:02,080 --> 00:35:03,359
and I can see kind of

951
00:35:03,359 --> 00:35:05,859
how much space I'm using for
images or things like that.

952
00:35:05,859 --> 00:35:09,900
The other one I'll often
use is Docker system Pune.

953
00:35:09,900 --> 00:35:12,039
And that will try to
just delete, like,

954
00:35:12,039 --> 00:35:15,239
a lot of this extra stuff
as it's able to, right?

955
00:35:15,239 --> 00:35:16,899
So the semester
you often kind of,

956
00:35:16,899 --> 00:35:18,499
like, keep an eye
on your dis space,

957
00:35:18,499 --> 00:35:20,680
you know, delete
some big data sets,

958
00:35:20,680 --> 00:35:22,819
do Docker system, Prone
every once in a while.

959
00:35:22,819 --> 00:35:25,919
Then you'll be fine, like,
whenever you're law on space.

960
00:35:26,040 --> 00:35:29,559
All right. Cool. Any
questions people have so far?

961
00:35:29,559 --> 00:35:33,370
Here. Maximum space Dera

962
00:35:33,370 --> 00:35:35,069
So how can I

963
00:35:35,069 --> 00:35:37,090
check the maximum space
docker has available?

964
00:35:37,090 --> 00:35:38,929
So we don't have
space that's, like,

965
00:35:38,929 --> 00:35:41,030
kind of segmented
off for Docker,

966
00:35:41,030 --> 00:35:44,890
so it can use all the space
of my system for storage.

967
00:35:44,890 --> 00:35:47,589
And so I just have
to keep an eye on it

968
00:35:47,589 --> 00:35:50,649
and clean it up when I
basically run out of that.

969
00:35:50,649 --> 00:35:51,909
So I might totally have

970
00:35:51,909 --> 00:35:53,170
created a bunch of
stuff with Docker,

971
00:35:53,170 --> 00:35:55,009
and then I'm separately
trying to download a file,

972
00:35:55,009 --> 00:35:56,809
and I'll say no
space for the file.

973
00:35:56,809 --> 00:35:58,569
Then I'll go look at Docker as

974
00:35:58,569 --> 00:36:00,190
trying to the culprit,
even though it doesn't.

975
00:36:00,190 --> 00:36:01,489
No while I was using Docker.

976
00:36:01,489 --> 00:36:04,089
Do that make sense? Yeah,
other questions people have?

977
00:36:04,089 --> 00:36:11,149
Yeah, right here. Yeah.

978
00:36:13,030 --> 00:36:15,289
Yeah. So you're saying,
like, if we have

979
00:36:15,289 --> 00:36:16,930
files inside of a container,

980
00:36:16,930 --> 00:36:20,070
can they be on the
host computer?

981
00:36:20,070 --> 00:36:22,309
If I kind of, like, exit
it, but I didn't delete it.

982
00:36:22,309 --> 00:36:23,989
Yeah, there is a place they are,

983
00:36:23,989 --> 00:36:25,349
which is a little bit hidden.

984
00:36:25,349 --> 00:36:26,389
We'll eventually learn about

985
00:36:26,389 --> 00:36:27,549
something called a volume mount,

986
00:36:27,549 --> 00:36:29,210
which kind of is
for that scenario,

987
00:36:29,210 --> 00:36:30,109
and then they'll be in a place

988
00:36:30,109 --> 00:36:31,229
where you would expect it to be.

989
00:36:31,229 --> 00:36:32,929
So we'll eventually have
lectures about storage,

990
00:36:32,929 --> 00:36:34,389
and we'll see how to
do volume mounts.

991
00:36:34,389 --> 00:36:37,949
Yep. Yeah, lots of
good questions today.

992
00:36:37,949 --> 00:36:40,669
Fantastic. Okay, so
what I want to talk

993
00:36:40,669 --> 00:36:44,329
now about is debugging things.

994
00:36:44,329 --> 00:36:46,329
And kind of, like, we might

995
00:36:46,329 --> 00:36:48,229
often have a bunch of
different containers running.

996
00:36:48,229 --> 00:36:50,809
We have to check
up on them. And so

997
00:36:50,809 --> 00:36:52,569
I want to show an
example of something

998
00:36:52,569 --> 00:36:54,009
I might be running for
a long time, right?

999
00:36:54,009 --> 00:36:57,209
So I'm may say a
Docer run Ubuntu.

1000
00:36:57,209 --> 00:36:58,769
And I actually want to put,

1001
00:36:58,769 --> 00:36:59,989
like, a few different
commands here,

1002
00:36:59,989 --> 00:37:02,650
but the trick is that I
can only run one command.

1003
00:37:02,650 --> 00:37:04,329
And so when I want to
run multiple things,

1004
00:37:04,329 --> 00:37:05,809
but I only have one
command, I'm like,

1005
00:37:05,809 --> 00:37:08,249
Ha ha, my one command
will be a shell.

1006
00:37:08,249 --> 00:37:09,829
And it will take an argument

1007
00:37:09,829 --> 00:37:11,290
which is a string with
multiple commands.

1008
00:37:11,290 --> 00:37:12,570
Right? So I can only
give it one command,

1009
00:37:12,570 --> 00:37:13,329
which is a shell,

1010
00:37:13,329 --> 00:37:15,289
but I can kind of sneak
multiple commands in.

1011
00:37:15,289 --> 00:37:16,109
And I'm I do this.

1012
00:37:16,109 --> 00:37:17,749
I'm going to echo before. I am

1013
00:37:17,749 --> 00:37:19,450
going to sleep for 3 seconds,

1014
00:37:19,450 --> 00:37:21,209
and I'm going to echo after.

1015
00:37:21,209 --> 00:37:23,210
That's the command I'm to
run inside of a container,

1016
00:37:23,210 --> 00:37:27,509
so before sleep, After
done. Okay, great.

1017
00:37:27,509 --> 00:37:28,789
So if I was doing this for

1018
00:37:28,789 --> 00:37:30,709
something that takes
a long time to run,

1019
00:37:30,709 --> 00:37:33,410
this would be a
very boring example

1020
00:37:33,410 --> 00:37:35,550
N. We'd all sit
here for 5 minutes.

1021
00:37:35,550 --> 00:37:37,389
The way I want to run
something like this is,

1022
00:37:37,389 --> 00:37:39,429
I want to run it
as detached mode.

1023
00:37:39,429 --> 00:37:41,729
So I'm going to say
D, detached mode

1024
00:37:41,729 --> 00:37:43,490
is to be in the background.

1025
00:37:43,490 --> 00:37:45,689
Great. It's asynchronous now.

1026
00:37:45,689 --> 00:37:46,909
I don't have to
have anything here.

1027
00:37:46,909 --> 00:37:48,549
But you also see that I don't

1028
00:37:48,549 --> 00:37:50,969
have any kind of output, right?

1029
00:37:50,969 --> 00:37:53,170
This is the way you're going
to run most containers.

1030
00:37:53,170 --> 00:37:54,289
This semester because
you're going to have like

1031
00:37:54,289 --> 00:37:56,490
little clusters of
containers working together.

1032
00:37:56,490 --> 00:37:58,029
And of course, you could only be

1033
00:37:58,029 --> 00:37:59,629
looking at like one
container at the time.

1034
00:37:59,629 --> 00:38:02,189
Usually have a bunch of
containers in detached mode.

1035
00:38:02,189 --> 00:38:03,790
They're going to have
a bunch of output,

1036
00:38:03,790 --> 00:38:06,170
and you will not
see it by default.

1037
00:38:06,170 --> 00:38:07,449
That's like when
somebody comes to help,

1038
00:38:07,449 --> 00:38:08,609
that's like one of the
first things I want to see.

1039
00:38:08,609 --> 00:38:10,049
They're like, Oh, my
server is not running.

1040
00:38:10,049 --> 00:38:11,589
I'm like, Well,
what did it print?

1041
00:38:11,589 --> 00:38:12,809
Did it print an
error or whatever?

1042
00:38:12,809 --> 00:38:14,369
It's not trying to just
jump to the screen to you.

1043
00:38:14,369 --> 00:38:17,129
You have to go down and
try to dig in and find it.

1044
00:38:17,129 --> 00:38:19,389
So when I do Docker PS,
I see it's running.

1045
00:38:19,389 --> 00:38:21,950
And what I can do is I
can say docker logs,

1046
00:38:21,950 --> 00:38:25,569
Elastic Austin, and I see
that it says before, right?

1047
00:38:25,569 --> 00:38:27,110
So we did before, sleeping,

1048
00:38:27,110 --> 00:38:30,210
eventually, it'll say after.

1049
00:38:30,210 --> 00:38:32,409
Depending on the
program, I might be

1050
00:38:32,409 --> 00:38:34,289
printing a bunch of
more things right now.

1051
00:38:34,289 --> 00:38:35,809
And if I want to,
remember how we

1052
00:38:35,809 --> 00:38:37,889
had tail fallow tail dash off.

1053
00:38:37,889 --> 00:38:39,669
I can do logs follow as well.

1054
00:38:39,669 --> 00:38:41,309
I'll see everything
printed so far,

1055
00:38:41,309 --> 00:38:43,549
and then it'll wait as there's
more output, I'll see it.

1056
00:38:43,549 --> 00:38:43,749
Right?

1057
00:38:43,749 --> 00:38:44,509
I might have a bunch of

1058
00:38:44,509 --> 00:38:45,689
different containers
running and as I have

1059
00:38:45,689 --> 00:38:48,009
troubleshooting I might
tail this one for a while,

1060
00:38:48,009 --> 00:38:49,369
ta out tail that
one for a while,

1061
00:38:49,369 --> 00:38:50,509
figure out what's rowing on.

1062
00:38:50,509 --> 00:38:50,889
Right?

1063
00:38:50,889 --> 00:38:52,909
If you aren't using these
and seeing what's going on,

1064
00:38:52,909 --> 00:38:54,249
then it's like there's no way

1065
00:38:54,249 --> 00:38:55,649
you're going to troubleshoot
anything, right?

1066
00:38:55,649 --> 00:38:57,589
That's just like the basic
you have to do that.

1067
00:38:57,589 --> 00:38:58,909
Remember this, if you're

1068
00:38:58,909 --> 00:39:00,554
always googling this,
you're going to be slow.

1069
00:39:00,554 --> 00:39:01,659
This is the kind
of thing you just

1070
00:39:01,659 --> 00:39:02,780
want to get fastness
environment,

1071
00:39:02,780 --> 00:39:04,420
and there's just a bunch
of stuff to remember.

1072
00:39:04,420 --> 00:39:06,859
It's not interesting, but
you'll save time if you just,

1073
00:39:06,859 --> 00:39:09,039
you know, brute force
remember a lot of this stuff.

1074
00:39:09,039 --> 00:39:12,179
Alright I may he Ctrl C
to cancel out of that.

1075
00:39:12,530 --> 00:39:14,769
Other things I might want to

1076
00:39:14,769 --> 00:39:17,189
do to troubleshoot this thing.

1077
00:39:17,189 --> 00:39:19,029
Sometimes I like
to jump inside of

1078
00:39:19,029 --> 00:39:21,450
a container and start
running some commands.

1079
00:39:21,450 --> 00:39:23,549
And so there's a couple
of things we can do.

1080
00:39:23,549 --> 00:39:25,469
When I do Docker Run,

1081
00:39:25,469 --> 00:39:26,969
I'd say an image name,

1082
00:39:26,969 --> 00:39:30,150
and I create a container
from that image,

1083
00:39:30,150 --> 00:39:33,150
related to that, is I
can say Docker Exec.

1084
00:39:33,150 --> 00:39:35,370
And then here what I
have is a container.

1085
00:39:35,370 --> 00:39:36,869
And the idea of Exec is

1086
00:39:36,869 --> 00:39:38,590
that I'm not trying to
create a new container.

1087
00:39:38,590 --> 00:39:41,250
I'm going to add
a second command

1088
00:39:41,250 --> 00:39:43,009
in an existing container, right?

1089
00:39:43,009 --> 00:39:45,895
So the name of my container
is Elastic Austin.

1090
00:39:45,895 --> 00:39:49,519
And I want to get a bash
prompt inside of it,

1091
00:39:49,519 --> 00:39:51,380
and I need to have an
interactive terminal.

1092
00:39:51,380 --> 00:39:52,779
So I'm going to
run those things.

1093
00:39:52,779 --> 00:39:54,460
And now I'm inside
of this environment.

1094
00:39:54,460 --> 00:39:57,360
And if I say PS, maybe PS,

1095
00:39:57,360 --> 00:39:59,079
A X, it's kind of cool.

1096
00:39:59,079 --> 00:40:01,659
I can see that here was that
command that was running.

1097
00:40:01,659 --> 00:40:03,819
With some server, I could
check other things like what

1098
00:40:03,819 --> 00:40:05,059
ports is it using where I see

1099
00:40:05,059 --> 00:40:06,420
examples of that eventually.

1100
00:40:06,420 --> 00:40:07,679
I can kind of poke around in

1101
00:40:07,679 --> 00:40:09,719
this environment and
see what's going on.

1102
00:40:09,719 --> 00:40:14,159
It's also very interesting
that this has process ID one.

1103
00:40:14,159 --> 00:40:15,860
You don't see that too often

1104
00:40:15,860 --> 00:40:17,799
on your host operating
system, right?

1105
00:40:17,799 --> 00:40:20,599
I mean, the numbers
keep cycling through.

1106
00:40:20,599 --> 00:40:23,250
So you're pacing
big process IDs.

1107
00:40:23,250 --> 00:40:24,790
But when we start
a new container,

1108
00:40:24,790 --> 00:40:26,309
things start numbering from one.

1109
00:40:26,309 --> 00:40:28,629
And then I can kind
of see that there.

1110
00:40:28,629 --> 00:40:30,709
All right. So if I
wanted to, I could say,

1111
00:40:30,709 --> 00:40:33,069
for example, I could
kill a process ID six,

1112
00:40:33,069 --> 00:40:35,489
and then let me then

1113
00:40:35,489 --> 00:40:36,910
it actually exit out
of the container,

1114
00:40:36,910 --> 00:40:39,489
be the whole thing
finish finished running.

1115
00:40:39,489 --> 00:40:41,950
So this is another reason
why it's more secure

1116
00:40:41,950 --> 00:40:45,630
because I could have a bunch
of different containers.

1117
00:40:45,630 --> 00:40:48,389
Well, let's say I don't have
containers, and I have like,

1118
00:40:48,389 --> 00:40:49,989
an evil, malicious program,

1119
00:40:49,989 --> 00:40:51,730
and it tries to kill
another process.

1120
00:40:51,730 --> 00:40:53,329
It can use whatever you know,

1121
00:40:53,329 --> 00:40:54,809
any program can try to do kills,

1122
00:40:54,809 --> 00:40:57,569
and it can use whatever
process ID it wants, right?

1123
00:40:57,569 --> 00:41:00,330
Now, imagine I have a bunch
of different containers,

1124
00:41:00,330 --> 00:41:03,229
and they each have their
own process ID name space.

1125
00:41:03,229 --> 00:41:04,409
Maybe they each have

1126
00:41:04,409 --> 00:41:08,449
their own process ID process
with a process ID sex.

1127
00:41:08,449 --> 00:41:10,949
If I'm in this container
and I say kill sex,

1128
00:41:10,949 --> 00:41:12,709
I only have a way of

1129
00:41:12,709 --> 00:41:14,829
referring to containers
in my name space.

1130
00:41:14,829 --> 00:41:16,489
There's no way for me to kill

1131
00:41:16,489 --> 00:41:18,489
a container or somebody
else's sandbox, right?

1132
00:41:18,489 --> 00:41:21,890
So kind of this will make us
a little bit more secure.

1133
00:41:21,890 --> 00:41:25,589
Alright. Fantastic. Let me
just run that thing again.

1134
00:41:25,589 --> 00:41:28,530
And I want to show you
some other commands.

1135
00:41:28,530 --> 00:41:29,950
So we already saw Doctor PS.

1136
00:41:29,950 --> 00:41:32,590
I might also say Docer Stats.

1137
00:41:32,590 --> 00:41:34,810
Some of these things are
kind of like memory hogs,

1138
00:41:34,810 --> 00:41:36,910
and so we might see
that the containers

1139
00:41:36,910 --> 00:41:38,050
are using too much memory.

1140
00:41:38,050 --> 00:41:39,389
That's something you might
keep an eye on it if

1141
00:41:39,389 --> 00:41:42,209
you're having trouble
running things.

1142
00:41:42,209 --> 00:41:45,269
I'm going to hit
control C out of that.

1143
00:41:45,269 --> 00:41:48,910
What else might I do?
I have Docker PS.

1144
00:41:48,910 --> 00:41:50,749
If I wanted to, I could chill

1145
00:41:50,749 --> 00:41:51,929
this container so I could do

1146
00:41:51,929 --> 00:41:55,389
a kill blissful angle bar.

1147
00:41:55,389 --> 00:41:58,210
And then it's not
running anymore.

1148
00:41:58,210 --> 00:42:00,169
It's still there, right?

1149
00:42:00,169 --> 00:42:01,709
I could have to
go remove it too,

1150
00:42:01,709 --> 00:42:03,689
but I can chill
containers if I want,

1151
00:42:03,689 --> 00:42:06,050
and then restart them as needed.

1152
00:42:06,050 --> 00:42:08,470
Those are my best
troubleshooting techniques.

1153
00:42:08,470 --> 00:42:11,109
Any questions about those
about how to troubleshoot

1154
00:42:11,109 --> 00:42:16,179
these container environments?
Yeah, right here.

1155
00:42:20,700 --> 00:42:23,119
Oh, you're saying, like, can I

1156
00:42:23,119 --> 00:42:26,419
execute inside of this one?

1157
00:42:26,820 --> 00:42:31,319
There's a way, but I cannot
just do this, right?

1158
00:42:31,319 --> 00:42:36,219
If I just do I have
to restart it.

1159
00:42:36,219 --> 00:42:37,339
So there's a way to, kind of,

1160
00:42:37,339 --> 00:42:39,660
like resuscitate a
killed container

1161
00:42:39,660 --> 00:42:40,960
before it gets removed.

1162
00:42:40,960 --> 00:42:42,679
I think it's like
started or something.

1163
00:42:42,679 --> 00:42:44,060
I don't do it too
often, honestly,

1164
00:42:44,060 --> 00:42:46,559
but there is a way to revie it,

1165
00:42:46,559 --> 00:42:47,999
and then I can
start executing it.

1166
00:42:47,999 --> 00:42:49,939
I might do that if my container
crashed and I want to

1167
00:42:49,939 --> 00:42:51,040
kind of do a post mortem

1168
00:42:51,040 --> 00:42:52,239
and figure out what
went wrong with it.

1169
00:42:52,239 --> 00:42:54,580
Yeah, right here.
Kill container.

1170
00:42:54,580 --> 00:42:59,119
Yeah. So I wouldn't
kill an image,

1171
00:42:59,119 --> 00:43:00,699
but I would delete
an image, right?

1172
00:43:00,699 --> 00:43:04,019
And so Docker Oh, no.

1173
00:43:04,019 --> 00:43:09,699
This is the hopefully that
comes back in a momentarily.

1174
00:43:09,699 --> 00:43:13,260
I would do Docker RM
to remove a container,

1175
00:43:13,260 --> 00:43:17,499
and I would do Docker RM I
to remove an image. Yep.

1176
00:43:17,499 --> 00:43:18,739
And all that stuff should

1177
00:43:18,739 --> 00:43:19,839
just be in your
notes because you'll

1178
00:43:19,839 --> 00:43:21,880
have to remember and use it
frequently this semester.

1179
00:43:21,880 --> 00:43:24,819
Yeah, great question. The
other questions people have.

1180
00:43:25,260 --> 00:43:27,999
Right. Cool. So let

1181
00:43:27,999 --> 00:43:30,219
me we're getting a
little short on time.

1182
00:43:30,219 --> 00:43:33,820
Well, I want to talk
briefly about Docker files.

1183
00:43:33,820 --> 00:43:36,099
And so I'm going to make
a new directory for this.

1184
00:43:36,099 --> 00:43:37,939
I'm gonna call it Lecture two.

1185
00:43:37,939 --> 00:43:40,639
And basically what I do it,

1186
00:43:40,639 --> 00:43:42,379
I want to make a little
environment where I can

1187
00:43:42,379 --> 00:43:44,560
run a Python program
that uses Pandas.

1188
00:43:44,560 --> 00:43:46,719
And so I'm going to
create a Docker file.

1189
00:43:46,719 --> 00:43:48,299
And in a Docker file,

1190
00:43:48,299 --> 00:43:49,559
we have different directives.

1191
00:43:49,559 --> 00:43:52,319
And the first directive
we have is we have from.

1192
00:43:52,319 --> 00:43:54,680
I want to start from
a different image.

1193
00:43:54,680 --> 00:43:57,980
And so I'm going to start
from Ubuntu, 24.10.

1194
00:43:57,980 --> 00:44:01,540
And then the idea down here
is that I can run stuff.

1195
00:44:01,540 --> 00:44:03,039
And I'm just trying to go to

1196
00:44:03,039 --> 00:44:04,419
my lecture snippets because

1197
00:44:04,419 --> 00:44:06,259
I forget what I'm
supposed to type.

1198
00:44:06,259 --> 00:44:08,299
If I'm over here and
I go on to resources,

1199
00:44:08,299 --> 00:44:10,220
and I go to lecture snippets,

1200
00:44:10,220 --> 00:44:11,599
you can see these things,

1201
00:44:11,599 --> 00:44:13,519
and that can help you
follow along, too.

1202
00:44:13,519 --> 00:44:15,579
So the main thing
I want to do is

1203
00:44:15,579 --> 00:44:18,080
I want to do this
app, get Install.

1204
00:44:18,080 --> 00:44:19,879
And maybe first, I'm just

1205
00:44:19,879 --> 00:44:21,659
going to install
the on ZIP program,

1206
00:44:21,659 --> 00:44:23,080
and then maybe later I'll coment

1207
00:44:23,080 --> 00:44:25,099
this and install
some other things.

1208
00:44:25,099 --> 00:44:29,120
When I'm doing an
applicant install,

1209
00:44:29,120 --> 00:44:30,399
it's checking the repositories,

1210
00:44:30,399 --> 00:44:32,519
and I have to kind of
refresh my view of

1211
00:44:32,519 --> 00:44:35,319
what software is available
in those repositories.

1212
00:44:35,319 --> 00:44:39,189
So I'm going to also grab
this command right here.

1213
00:44:39,189 --> 00:44:41,759
Alright, so I'll update,
I'll refresh that view.

1214
00:44:41,759 --> 00:44:43,280
Then I'm going to
install some stuff,

1215
00:44:43,280 --> 00:44:45,619
and then I should be good to go.

1216
00:44:45,619 --> 00:44:47,699
You all, I think have
used App before.

1217
00:44:47,699 --> 00:44:49,380
App and AppCt are
pretty similar.

1218
00:44:49,380 --> 00:44:51,619
I mean, App is trying
to design for a human.

1219
00:44:51,619 --> 00:44:54,579
And if they have a nicer
syntax or things like that,

1220
00:44:54,579 --> 00:44:55,939
they just like update App,

1221
00:44:55,939 --> 00:44:57,659
whatever is nicest for a human.

1222
00:44:57,659 --> 00:44:59,519
AppG ideas it's for a strip,

1223
00:44:59,519 --> 00:45:02,199
and so they never change
anything because they

1224
00:45:02,199 --> 00:45:05,060
don't want to break your code
or your strips, basically.

1225
00:45:05,060 --> 00:45:06,719
So I'll normally use like App

1226
00:45:06,719 --> 00:45:08,680
when I'm in the shell myself.

1227
00:45:08,680 --> 00:45:11,060
And if I make it a Docker file
or something I'll use apk,

1228
00:45:11,060 --> 00:45:13,399
but not a super important
distinction for us.

1229
00:45:13,399 --> 00:45:15,080
Alright. So I have
these three lines.

1230
00:45:15,080 --> 00:45:18,640
And what I can do now is
I can say Docker build.

1231
00:45:18,640 --> 00:45:22,419
I have to tell at a directory
where that docker file is.

1232
00:45:22,419 --> 00:45:23,620
That's a current directory,

1233
00:45:23,620 --> 00:45:26,600
and then I have to give it
a name. I may call it demo.

1234
00:45:26,600 --> 00:45:28,699
So I'm going to run that thing,

1235
00:45:28,699 --> 00:45:31,620
and it's staring to do
the app to get update.

1236
00:45:31,620 --> 00:45:33,940
It is staring to do the
app to get install.

1237
00:45:33,940 --> 00:45:36,719
And then eventually
it finishes running.

1238
00:45:36,719 --> 00:45:37,939
And at that point, I could do

1239
00:45:37,939 --> 00:45:41,580
a docker run of my demo image,

1240
00:45:41,580 --> 00:45:43,199
and I could do a bash thing,

1241
00:45:43,199 --> 00:45:44,879
and then I guess the
big feature is that I

1242
00:45:44,879 --> 00:45:46,899
have the on ZIP
program inside of it.

1243
00:45:46,899 --> 00:45:49,939
Right? So I can do
that. Let's head

1244
00:45:49,939 --> 00:45:51,439
up to the Docker file again,

1245
00:45:51,439 --> 00:45:53,739
and I want to install
some more things

1246
00:45:53,739 --> 00:45:56,499
now like these two, right?

1247
00:45:56,499 --> 00:45:57,939
So I'm going to come
back here. I'm going

1248
00:45:57,939 --> 00:45:59,099
to show you a couple
of problems, right?

1249
00:45:59,099 --> 00:46:00,739
Issues that you're
going to run into.

1250
00:46:00,739 --> 00:46:05,519
I'm going to build
it again. All right.

1251
00:46:05,519 --> 00:46:08,159
And so the first thing
I want you to see is

1252
00:46:08,159 --> 00:46:12,700
that it does caching on
a line by line basis.

1253
00:46:12,700 --> 00:46:14,759
So what does that mean?
That means that I've

1254
00:46:14,759 --> 00:46:17,419
already done this app to
get update thing before.

1255
00:46:17,419 --> 00:46:18,939
And so whatever state that

1256
00:46:18,939 --> 00:46:20,459
drove the system to
it remember that,

1257
00:46:20,459 --> 00:46:22,679
and it just skips
that step this time,

1258
00:46:22,679 --> 00:46:24,280
that makes things faster.

1259
00:46:24,280 --> 00:46:26,499
And then this was only
line that changed.

1260
00:46:26,499 --> 00:46:28,319
Looking at everything before
then the Docker file.

1261
00:46:28,319 --> 00:46:29,940
It could just kind of skip.

1262
00:46:29,940 --> 00:46:32,839
And here's where it's actually
executing something new.

1263
00:46:32,839 --> 00:46:35,334
So what went wrong
with this one,

1264
00:46:35,334 --> 00:46:37,969
I come down here and I was
saying it was asking me,

1265
00:46:37,969 --> 00:46:39,969
like, do you want to
actually install that?

1266
00:46:39,969 --> 00:46:43,109
And of course, I do or I
wouldn't have written that.

1267
00:46:43,109 --> 00:46:45,409
But it's expected that
a human can type yes,

1268
00:46:45,409 --> 00:46:47,309
but a docker file
cannot type, yes.

1269
00:46:47,309 --> 00:46:49,229
So one thing I'm going to
change here is I'm going to

1270
00:46:49,229 --> 00:46:52,549
say y so that it
will not prompt me.

1271
00:46:52,549 --> 00:46:53,989
Right? If things are
above a certain size,

1272
00:46:53,989 --> 00:46:55,809
I get that prompt, I
just want to say yes.

1273
00:46:55,809 --> 00:46:57,889
That's one improvement
we should do.

1274
00:46:57,889 --> 00:47:01,829
The other thing is is that
This caching in general,

1275
00:47:01,829 --> 00:47:02,950
it usually makes things faster,

1276
00:47:02,950 --> 00:47:05,029
but it's actually a little
bit of a problem here,

1277
00:47:05,029 --> 00:47:07,870
right because the
software available

1278
00:47:07,870 --> 00:47:11,450
in these APT repositories
is always changing,

1279
00:47:11,450 --> 00:47:13,889
and I need to have kind
of a fresh view of it.

1280
00:47:13,889 --> 00:47:17,909
And so if I run this and
then I wait, say, like,

1281
00:47:17,909 --> 00:47:19,969
a few days, and then I run this

1282
00:47:19,969 --> 00:47:22,329
on here, it won't work, right?

1283
00:47:22,329 --> 00:47:23,669
Because the last time I kind of

1284
00:47:23,669 --> 00:47:25,410
viewed what software
is available,

1285
00:47:25,410 --> 00:47:28,109
it might have changed where
things are, things like that.

1286
00:47:28,109 --> 00:47:30,295
And so I have to run
these close together.

1287
00:47:30,295 --> 00:47:33,059
When I look in the door file,
they're close together,

1288
00:47:33,059 --> 00:47:36,059
but the problem I can run
into is that maybe it's like,

1289
00:47:36,059 --> 00:47:37,959
Oh, you ran this two weeks ago.

1290
00:47:37,959 --> 00:47:39,519
I don't have to do it again.

1291
00:47:39,519 --> 00:47:42,259
That's usually true, except
when I need it kind of fresh.

1292
00:47:42,259 --> 00:47:43,719
And so what people
will actually do,

1293
00:47:43,719 --> 00:47:46,380
since this cash happens
on the line by line basis

1294
00:47:46,380 --> 00:47:50,214
is they will combine this
into a single one liner.

1295
00:47:50,214 --> 00:47:51,849
Right to break that thing prom.

1296
00:47:51,849 --> 00:47:53,729
So you kind of see
these ugly lines.

1297
00:47:53,729 --> 00:47:56,229
There's a good reason for it,
why people are doing that.

1298
00:47:56,229 --> 00:47:57,609
One way that they kind of might

1299
00:47:57,609 --> 00:47:59,149
make it at least
look a little bit

1300
00:47:59,149 --> 00:48:00,649
nicer is that you

1301
00:48:00,649 --> 00:48:03,449
can put backslashes in
and then break it up.

1302
00:48:03,449 --> 00:48:05,589
It still counts as one line as

1303
00:48:05,589 --> 00:48:08,650
far as far as Docker
is concerned.

1304
00:48:08,650 --> 00:48:12,349
Right? So I'm going to do
this. I can build it again.

1305
00:48:12,390 --> 00:48:15,449
And then that was way too fast.

1306
00:48:15,449 --> 00:48:16,749
There's no way that that's Oh,

1307
00:48:16,749 --> 00:48:17,809
because I did in the morning.

1308
00:48:17,809 --> 00:48:19,289
That's why it tahed
that version.

1309
00:48:19,289 --> 00:48:22,984
And then I could run it,
and I should have Oh.

1310
00:48:22,984 --> 00:48:25,039
Let me just run this, and then I

1311
00:48:25,039 --> 00:48:27,040
should have Python
three installed.

1312
00:48:27,040 --> 00:48:28,579
The last thing I want
to talk about, I'll

1313
00:48:28,579 --> 00:48:30,179
wrap up because I know
I only have 1 minute

1314
00:48:30,179 --> 00:48:32,059
left is that before I

1315
00:48:32,059 --> 00:48:34,279
try to add any kind of
install to the docker file,

1316
00:48:34,279 --> 00:48:35,599
I kind of usually have
some stuff there,

1317
00:48:35,599 --> 00:48:36,699
and I'll test it out here

1318
00:48:36,699 --> 00:48:38,180
in this interactive environment.

1319
00:48:38,180 --> 00:48:42,380
So for example, if I do a
PEP three install Pandas.

1320
00:48:42,580 --> 00:48:45,739
Let's try that. I'm actually
going to get an error.

1321
00:48:45,739 --> 00:48:47,099
And what they're
trying to say is like,

1322
00:48:47,099 --> 00:48:49,320
Oh, you should use Python
virtual environments,

1323
00:48:49,320 --> 00:48:51,419
and I'm like, actually, I
don't really want to because I

1324
00:48:51,419 --> 00:48:53,739
have docker virtual
environments.

1325
00:48:53,739 --> 00:48:55,519
And it's saying that, so
you shouldn't install it

1326
00:48:55,519 --> 00:48:57,459
like that, and it says,

1327
00:48:57,459 --> 00:48:59,820
if you want to do something
scary and you trust yourself,

1328
00:48:59,820 --> 00:49:01,469
then do this, right?

1329
00:49:01,469 --> 00:49:03,269
And so I'm like, Okay,
well, I will do that.

1330
00:49:03,269 --> 00:49:04,509
And so I'll kind
of test this and

1331
00:49:04,509 --> 00:49:06,149
make sure I can do
the install here.

1332
00:49:06,149 --> 00:49:08,489
And then I think I'll just
got this a little bit wrong.

1333
00:49:08,489 --> 00:49:11,349
I'll kind of do that install
here and make sure it works.

1334
00:49:11,349 --> 00:49:14,129
And only after that, after
I get it working here,

1335
00:49:14,129 --> 00:49:16,890
then I go back to
my docker file,

1336
00:49:16,890 --> 00:49:21,229
and I will add that
down here, right?

1337
00:49:21,229 --> 00:49:22,849
That's how you can
kind of troubleshoot

1338
00:49:22,849 --> 00:49:25,210
these things and have it
interact and do things working.

1339
00:49:25,210 --> 00:49:27,269
And then I could build that.
And that'll take a while,

1340
00:49:27,269 --> 00:49:28,629
so we'll kind of wrap up.

1341
00:49:28,629 --> 00:49:31,069
Anyway, hopefully that helps
you debug your docker files,

1342
00:49:31,069 --> 00:49:32,269
debug your containers, and just

1343
00:49:32,269 --> 00:49:33,790
get very comfortable
in this environment.

1344
00:49:33,790 --> 00:49:35,470
Bs d be the whole semester.

1345
00:49:35,470 --> 00:49:37,209
Feel free to come up
and chat if you have

1346
00:49:37,209 --> 00:49:40,110
any questions and have a
good evening, everybody.
