1
00:00:00,000 --> 00:00:01,740
Great to see you all here today.

2
00:00:01,740 --> 00:00:04,119
Sorry continue talking
about big query.

3
00:00:04,119 --> 00:00:05,980
Last time we talked
about geographic data.

4
00:00:05,980 --> 00:00:08,800
We talked about how we could
pull data from spreadsheets.

5
00:00:08,800 --> 00:00:10,199
All that stuff is to
be in the project

6
00:00:10,199 --> 00:00:11,920
that we're releasing
later tonight.

7
00:00:11,920 --> 00:00:15,179
We're also going to talk
today about machine learning.

8
00:00:15,179 --> 00:00:16,759
We did some
introductory concepts,

9
00:00:16,759 --> 00:00:18,879
we're actually get some
hands on practice.

10
00:00:18,879 --> 00:00:20,900
And then we'll start looking at

11
00:00:20,900 --> 00:00:24,180
the billing models for
big query as well.

12
00:00:24,180 --> 00:00:25,279
Before we jump into that,

13
00:00:25,279 --> 00:00:26,399
I just want to do
a little bit of

14
00:00:26,399 --> 00:00:28,799
review for the machine
learning stuff from last time.

15
00:00:28,799 --> 00:00:34,360
So I'm just bring up a
top hat and go ahead.

16
00:01:06,940 --> 00:01:09,499
I'm sorry.

17
00:01:31,060 --> 00:01:34,340
About 30 seconds left.

18
00:02:05,690 --> 00:02:07,970
All right. So most
people are saying

19
00:02:07,970 --> 00:02:10,069
features in columns,
which is not quite right.

20
00:02:10,069 --> 00:02:12,329
It's actually it's just B.

21
00:02:12,329 --> 00:02:14,690
And so, of course, when
we're trading a model,

22
00:02:14,690 --> 00:02:15,909
it needs to know both what the

23
00:02:15,909 --> 00:02:17,389
labels and the features are.

24
00:02:17,389 --> 00:02:19,209
But think about how we
actually set this up.

25
00:02:19,209 --> 00:02:21,129
We write a query
first that gets all

26
00:02:21,129 --> 00:02:23,250
of that information about
the features and the label.

27
00:02:23,250 --> 00:02:24,989
And then we're passing
that into this,

28
00:02:24,989 --> 00:02:27,290
create a replace
model statement.

29
00:02:27,290 --> 00:02:28,589
And when we do
that, we just say,

30
00:02:28,589 --> 00:02:29,769
Okay, this is what the label is,

31
00:02:29,769 --> 00:02:31,190
and it automatically infers that

32
00:02:31,190 --> 00:02:32,730
everything else is a feature.

33
00:02:32,730 --> 00:02:34,389
All right. If you aren't
careful, it might be

34
00:02:34,389 --> 00:02:35,609
picking up columns
that you don't

35
00:02:35,609 --> 00:02:36,809
actually want as your features.

36
00:02:36,809 --> 00:02:38,030
You only specify the label,

37
00:02:38,030 --> 00:02:39,629
and to figure out which
features you have,

38
00:02:39,629 --> 00:02:41,809
you will adjust
the query prior to

39
00:02:41,809 --> 00:02:44,670
feeding it into that
statement. Alright, ol.

40
00:02:44,670 --> 00:02:48,090
So I'm going a head over
here to a notebook,

41
00:02:48,090 --> 00:02:49,310
and I just started

42
00:02:49,310 --> 00:02:50,749
a fresh one so that

43
00:02:50,749 --> 00:02:52,829
it's not too cluttered
with stuff from last time.

44
00:02:52,829 --> 00:02:55,390
And we I get some
hands on practice,

45
00:02:55,390 --> 00:02:58,869
training models, evaluating
them, predicting with them.

46
00:02:58,869 --> 00:03:01,049
I'm just going to do a
load extension here quick

47
00:03:01,049 --> 00:03:03,915
of Google dot cloud
dot Big query.

48
00:03:03,915 --> 00:03:06,479
So we can run queries later.

49
00:03:06,479 --> 00:03:07,740
Whenever I'm doing some kind

50
00:03:07,740 --> 00:03:08,719
of new machine learning thing,

51
00:03:08,719 --> 00:03:10,839
I like to just have
very simple data,

52
00:03:10,839 --> 00:03:12,400
that has an obvious pattern.

53
00:03:12,400 --> 00:03:13,759
Then I can figure
out, well, does

54
00:03:13,759 --> 00:03:15,819
that model identify
that pattern?

55
00:03:15,819 --> 00:03:17,940
So I just put this
in the starter code.

56
00:03:17,940 --> 00:03:19,799
And what is this doing?

57
00:03:19,799 --> 00:03:23,880
Well, it has randomly generated
X one and X two features,

58
00:03:23,880 --> 00:03:25,659
and then the y value
is just the sum of

59
00:03:25,659 --> 00:03:27,679
those plus some
random noise, right?

60
00:03:27,679 --> 00:03:28,899
And I can see that
here, right like

61
00:03:28,899 --> 00:03:30,559
four plus one is eight plus

62
00:03:30,559 --> 00:03:32,379
some pise eight plus two is

63
00:03:32,379 --> 00:03:35,340
ten plus some noise. So
a very simple pattern.

64
00:03:35,340 --> 00:03:36,659
And it turns out that this is

65
00:03:36,659 --> 00:03:38,799
a pandastta frame and
Pandastta frames have

66
00:03:38,799 --> 00:03:42,580
a function built in called
two Google big query.

67
00:03:42,580 --> 00:03:47,359
And when we do that, then we
can put in the project or we

68
00:03:47,359 --> 00:03:52,140
can say like the
data set table name,

69
00:03:52,140 --> 00:03:53,279
and then it will upload that.

70
00:03:53,279 --> 00:03:54,700
So it's very easy
to move between

71
00:03:54,700 --> 00:03:56,639
Pandas and these datasets.

72
00:03:56,639 --> 00:03:59,919
And in here, we've been
doing section two,

73
00:03:59,919 --> 00:04:02,240
for the name, I'm
just going to call

74
00:04:02,240 --> 00:04:04,529
it sample one. Alright, cool.

75
00:04:04,529 --> 00:04:06,289
So let me go ahead and do that.

76
00:04:06,289 --> 00:04:09,270
And now I have
that in Big query,

77
00:04:09,270 --> 00:04:11,510
right, as soon as this
finishes running.

78
00:04:11,510 --> 00:04:15,370
And remember that when you're
doing machine learning,

79
00:04:15,370 --> 00:04:17,389
often, you will do
a train test split.

80
00:04:17,389 --> 00:04:19,870
And what we saw last time is
that the train test split

81
00:04:19,870 --> 00:04:21,230
that Big Query does

82
00:04:21,230 --> 00:04:23,449
automatically is kind of
broken in a couple of ways.

83
00:04:23,449 --> 00:04:24,829
I does kind of some
strange things.

84
00:04:24,829 --> 00:04:26,430
And so now that we have
this data set there,

85
00:04:26,430 --> 00:04:27,690
we should figure out how to do

86
00:04:27,690 --> 00:04:30,190
the train test split
ourselves, right?

87
00:04:30,190 --> 00:04:32,370
So I'm just trying to say
a big query down here.

88
00:04:32,370 --> 00:04:35,890
And maybe I'll do a select star

89
00:04:35,890 --> 00:04:40,205
from section two sample one.

90
00:04:40,205 --> 00:04:42,900
And in addition to that,

91
00:04:42,900 --> 00:04:44,259
what I want to do
is I want to assign

92
00:04:44,259 --> 00:04:46,180
a random number for
each row, right?

93
00:04:46,180 --> 00:04:50,840
So say, let's get this
rand, that'll be 0-1.

94
00:04:50,840 --> 00:04:55,799
I actually, I loaded
the extension ops.

95
00:04:55,799 --> 00:04:57,300
I didn't load it
properly up here.

96
00:04:57,300 --> 00:04:58,839
So now that should be loaded,

97
00:04:58,839 --> 00:05:00,540
and then I should be able to get

98
00:05:00,540 --> 00:05:02,779
a random number for each
of these in the sample.

99
00:05:02,779 --> 00:05:05,119
And because it's 0-1,

100
00:05:05,119 --> 00:05:09,440
if I want to have say roughly
25% of test data, I can.

101
00:05:09,440 --> 00:05:11,219
I'm say if that's less than 25,

102
00:05:11,219 --> 00:05:13,810
I'm may call that a test, right?

103
00:05:13,810 --> 00:05:17,650
So I'll say up here that

104
00:05:17,650 --> 00:05:20,830
approximately 25% should be

105
00:05:20,830 --> 00:05:23,590
test data. Alright,
I'm to do that.

106
00:05:23,590 --> 00:05:25,410
And this is non deterministic.

107
00:05:25,410 --> 00:05:26,370
And so what we want to do is

108
00:05:26,370 --> 00:05:27,489
we want to save this somewhere,

109
00:05:27,489 --> 00:05:28,910
and then we're just
trying to keep using it

110
00:05:28,910 --> 00:05:30,770
wherever it has
been saved, right?

111
00:05:30,770 --> 00:05:32,370
So I can create a table,

112
00:05:32,370 --> 00:05:34,350
and or I may call this section

113
00:05:34,350 --> 00:05:36,770
two train train test, right?

114
00:05:36,770 --> 00:05:37,870
I'm may have my train test

115
00:05:37,870 --> 00:05:39,010
data together in the same table,

116
00:05:39,010 --> 00:05:40,710
but I'll have that
Boolean column

117
00:05:40,710 --> 00:05:42,250
indicate which rows
are for training,

118
00:05:42,250 --> 00:05:43,489
which are for testing.

119
00:05:43,489 --> 00:05:46,330
A I'm to do that,
and I'll create

120
00:05:46,330 --> 00:05:50,565
or replace table train
test. Let's run that.

121
00:05:50,565 --> 00:05:53,680
And then we'll just do a quick
check and make sure that

122
00:05:53,680 --> 00:05:57,140
I got my ratios kind of
approximately what we wanted.

123
00:05:57,140 --> 00:06:00,720
It's not going to be exactly
75 25, but let's just check.

124
00:06:00,720 --> 00:06:04,820
I say test and then
count of star from

125
00:06:04,820 --> 00:06:10,660
section two train
test group by test.

126
00:06:10,660 --> 00:06:14,160
Alright, great. So
we have 31 rows for

127
00:06:14,160 --> 00:06:16,340
testing data and then 69 for

128
00:06:16,340 --> 00:06:18,660
training data. Alright, cool.

129
00:06:18,660 --> 00:06:22,019
So now what I want to do is
I want to train a model,

130
00:06:22,019 --> 00:06:24,429
and the very first step
to training a model,

131
00:06:24,429 --> 00:06:27,160
is to select the training
data with a query, right?

132
00:06:27,160 --> 00:06:29,559
I'm going to do that first.
I'm going to write a query,

133
00:06:29,559 --> 00:06:33,520
which will be select
X one, X two,

134
00:06:33,520 --> 00:06:38,099
and y from this new thing
that I just created,

135
00:06:38,099 --> 00:06:45,610
and I only want it where it
where it is not test data,

136
00:06:45,610 --> 00:06:47,590
right because I only want
to get the training data.

137
00:06:47,590 --> 00:06:48,929
Okay, I like to specify

138
00:06:48,929 --> 00:06:49,850
all these hears I'm using

139
00:06:49,850 --> 00:06:50,909
the star because
then if it changes,

140
00:06:50,909 --> 00:06:53,350
I'm very explicit
about what columns

141
00:06:53,350 --> 00:06:55,070
I'm actually using
for model training.

142
00:06:55,070 --> 00:06:58,410
I'm going to get that
training data, as so.

143
00:06:58,410 --> 00:07:00,430
And then what I want
to do is I want

144
00:07:00,430 --> 00:07:02,450
to feed it into a model.

145
00:07:02,450 --> 00:07:04,510
And so we saw the
syntax up here where we

146
00:07:04,510 --> 00:07:07,809
can create or
replace a table as,

147
00:07:07,809 --> 00:07:09,329
and the syntax for creating

148
00:07:09,329 --> 00:07:11,230
a model is very similar, right?

149
00:07:11,230 --> 00:07:13,730
We can either take that
data dump in a table or we

150
00:07:13,730 --> 00:07:16,369
can take that data and
feed it into a model.

151
00:07:16,369 --> 00:07:18,749
So instead of table,
I'm going to say model.

152
00:07:18,749 --> 00:07:21,510
And then for my model over here,

153
00:07:21,510 --> 00:07:22,989
I may do a linear regression,

154
00:07:22,989 --> 00:07:24,850
so I'll just say L R, right?

155
00:07:24,850 --> 00:07:26,469
So I'll create or replace model

156
00:07:26,469 --> 00:07:28,830
as while that query down there.

157
00:07:28,830 --> 00:07:30,770
Okay. Sets most of it.

158
00:07:30,770 --> 00:07:32,890
Now, there's some other
things that I have to do,

159
00:07:32,890 --> 00:07:36,089
and primarily, I have to
have this options line.

160
00:07:36,089 --> 00:07:38,569
And for this options line,

161
00:07:38,569 --> 00:07:40,090
I have to say what
model type it is.

162
00:07:40,090 --> 00:07:45,290
I'm going to say model type
equals linear regression.

163
00:07:45,290 --> 00:07:47,710
Okay. And then from
these down here,

164
00:07:47,710 --> 00:07:50,550
I have to specify which
one is my label column.

165
00:07:50,550 --> 00:07:56,490
Right? I'm going to say,
input label columns equals y.

166
00:07:56,490 --> 00:07:59,330
That's the only thing I want
to really predict, right?

167
00:07:59,330 --> 00:08:01,610
And what is the linear
regression trying to do?

168
00:08:01,610 --> 00:08:03,670
Maybe some of you are more
or less familiar with that.

169
00:08:03,670 --> 00:08:06,289
But what it wants to
find is some formula,

170
00:08:06,289 --> 00:08:08,439
where y is trying to equal

171
00:08:08,439 --> 00:08:10,390
some number times X one and

172
00:08:10,390 --> 00:08:12,210
some other number times X two.

173
00:08:12,210 --> 00:08:14,590
Those numbers that
are multiplying

174
00:08:14,590 --> 00:08:17,010
x1x2 are called co
efficients or weights,

175
00:08:17,010 --> 00:08:18,250
we multiply it by both of them,

176
00:08:18,250 --> 00:08:20,089
add them together, maybe

177
00:08:20,089 --> 00:08:22,590
add in some constant
factor, and that will be y.

178
00:08:22,590 --> 00:08:24,570
We have to figure, what is
a good constant factor?

179
00:08:24,570 --> 00:08:26,370
What co efficients
do we do we want?

180
00:08:26,370 --> 00:08:28,770
That's what a linear
regression model does, right?

181
00:08:28,770 --> 00:08:30,650
So I'm going to run this,

182
00:08:30,650 --> 00:08:33,089
and this should create
that model for me here.

183
00:08:33,089 --> 00:08:34,750
So this is running for a while.

184
00:08:34,750 --> 00:08:38,539
And then after that runs,

185
00:08:38,539 --> 00:08:43,510
It should show up over
on the Cloud Console.

186
00:08:43,510 --> 00:08:44,869
Over here, I'm going to come

187
00:08:44,869 --> 00:08:51,250
to big query, which
is somewhere.

188
00:08:57,210 --> 00:08:59,470
Did I hide it somewhere?

189
00:08:59,470 --> 00:09:01,389
Okay. Let me search for it.

190
00:09:01,389 --> 00:09:03,690
Can I search for it here?

191
00:09:14,490 --> 00:09:16,850
All right, fine. I
don't know if maybe

192
00:09:16,850 --> 00:09:18,650
I forgot to pen it or something.

193
00:09:18,650 --> 00:09:23,049
I bet that's what I did. I'm
pin that. Okay, fantastic.

194
00:09:23,049 --> 00:09:25,330
And so under here,

195
00:09:25,330 --> 00:09:27,029
right if I go to Section two,

196
00:09:27,029 --> 00:09:28,369
where we are, we see we

197
00:09:28,369 --> 00:09:29,750
have all these tables
that we've created,

198
00:09:29,750 --> 00:09:31,669
and now we also have
a model here, right?

199
00:09:31,669 --> 00:09:34,609
So I could come and inspect
this model, and, you know,

200
00:09:34,609 --> 00:09:37,049
seen it when it's trained,
depending on what model it is,

201
00:09:37,049 --> 00:09:39,229
I might get various
stats from it, right?

202
00:09:39,229 --> 00:09:41,370
They even compute
some evaluation

203
00:09:41,370 --> 00:09:42,790
metrics for me up front.

204
00:09:42,790 --> 00:09:45,049
Okay, great. So I
have this right now.

205
00:09:45,049 --> 00:09:48,129
And one of the things that
we have to remember is

206
00:09:48,129 --> 00:09:51,730
that is that by default,

207
00:09:51,730 --> 00:09:53,190
unless I say
something else here,

208
00:09:53,190 --> 00:09:55,049
it might try to do a
train test split for me.

209
00:09:55,049 --> 00:09:57,089
The default is that if you
of less than 500 rows.

210
00:09:57,089 --> 00:09:58,590
I will not everything
is training data.

211
00:09:58,590 --> 00:09:59,709
So I don't need to
worry about that.

212
00:09:59,709 --> 00:10:00,729
But for a bigger data set,

213
00:10:00,729 --> 00:10:03,790
it would be really important
that I say don't split.

214
00:10:03,790 --> 00:10:05,630
Otherwise, they're
going to split

215
00:10:05,630 --> 00:10:06,970
my training data into

216
00:10:06,970 --> 00:10:09,170
a further training
and test dataset.

217
00:10:09,170 --> 00:10:11,329
Alright, trait so
I have that model.

218
00:10:11,329 --> 00:10:13,449
And there's a few
different things

219
00:10:13,449 --> 00:10:15,164
I could do with it.
Yeah, question.

220
00:10:15,164 --> 00:10:19,459
The option. Yeah, sure.

221
00:10:19,459 --> 00:10:22,119
Let me just grab
that in the slides.

222
00:10:22,119 --> 00:10:25,399
Where it's this one
right here, right.

223
00:10:25,399 --> 00:10:26,600
So this is the option.

224
00:10:26,600 --> 00:10:28,039
You know, why not?

225
00:10:28,039 --> 00:10:29,699
Let's just put it
in here, right.

226
00:10:29,699 --> 00:10:32,580
Then let's make sure that
runs again just fine.

227
00:10:32,580 --> 00:10:35,719
Yeah. We can just tell it to
not do any spudding for us.

228
00:10:35,719 --> 00:10:37,300
Yeah, good question.

229
00:10:37,300 --> 00:10:40,069
Yeah other questions
people have. What's that?

230
00:10:40,069 --> 00:10:42,680
Well, they have a few
different options, I mean,

231
00:10:42,680 --> 00:10:44,539
maybe you could
specify a ratio or

232
00:10:44,539 --> 00:10:45,439
something I forget like what

233
00:10:45,439 --> 00:10:46,980
the other options
are side no split.

234
00:10:46,980 --> 00:10:49,919
No splits the one I remember
because I never use it.

235
00:10:49,919 --> 00:10:52,179
The default is to
do weird things.

236
00:10:52,179 --> 00:10:54,359
L they'll choose the ratio,
depending on how big it is.

237
00:10:54,359 --> 00:10:56,400
I think if it's less than 500,

238
00:10:56,400 --> 00:10:58,320
they train on
everything, and they

239
00:10:58,320 --> 00:11:00,380
will test on the same
thing, weird decision.

240
00:11:00,380 --> 00:11:02,500
And then if it's
like more than 500,

241
00:11:02,500 --> 00:11:04,419
they'll have like an 80 20,

242
00:11:04,419 --> 00:11:06,959
and then after, like 50,000,

243
00:11:06,959 --> 00:11:09,180
then the test size, it's
just like a constant size.

244
00:11:09,180 --> 00:11:10,619
So it's just like they
do weird things and

245
00:11:10,619 --> 00:11:12,520
then they cash it
for like two days,

246
00:11:12,520 --> 00:11:13,979
and then it's non deterministic.

247
00:11:13,979 --> 00:11:16,419
So anyway, I just like
always say, no split,

248
00:11:16,419 --> 00:11:18,040
if I have more than 500 rows,

249
00:11:18,040 --> 00:11:21,219
and then then I avoid
all those problems.

250
00:11:21,460 --> 00:11:24,259
Cool. So now I have this model,

251
00:11:24,259 --> 00:11:26,459
and there's lots of things
I might want to do with it.

252
00:11:26,459 --> 00:11:29,739
I might want to inspect
it and see, well,

253
00:11:29,739 --> 00:11:31,260
what coefficients
are they actually

254
00:11:31,260 --> 00:11:34,159
using on X one and X two.

255
00:11:34,159 --> 00:11:36,840
I might want to use it to
go predict new things.

256
00:11:36,840 --> 00:11:38,700
And then finally, I
probably want to evaluate

257
00:11:38,700 --> 00:11:40,600
it and see how well it's
doing on this data.

258
00:11:40,600 --> 00:11:41,580
It should be doing very well

259
00:11:41,580 --> 00:11:42,779
because this is a
very simple pattern.

260
00:11:42,779 --> 00:11:46,280
Any decent model will immediately
recognize that pattern.

261
00:11:46,280 --> 00:11:48,279
I'm just adding two numbers
together. All right.

262
00:11:48,279 --> 00:11:49,940
So let's do each
of those things.

263
00:11:49,940 --> 00:11:52,399
And remember that
for a big query,

264
00:11:52,399 --> 00:11:54,159
they have all of these,
I don't know if you

265
00:11:54,159 --> 00:11:56,000
want to call them like
views or psudo tables,

266
00:11:56,000 --> 00:11:59,360
but they have these
tabular functions that I

267
00:11:59,360 --> 00:12:00,639
can query from to get

268
00:12:00,639 --> 00:12:03,099
information about my
model or use my model.

269
00:12:03,099 --> 00:12:04,619
And so they're all ML something,

270
00:12:04,619 --> 00:12:05,939
and the first one is weights.

271
00:12:05,939 --> 00:12:07,619
And when I do this,
I have to say model,

272
00:12:07,619 --> 00:12:09,959
and then the name of
the model, right?

273
00:12:09,959 --> 00:12:12,104
And so the name of my model,

274
00:12:12,104 --> 00:12:15,130
Is section two
linear regression.

275
00:12:15,130 --> 00:12:18,889
And so if I want to, I can
just select star from that.

276
00:12:18,889 --> 00:12:20,430
I can treat it like a table,

277
00:12:20,430 --> 00:12:23,170
and I'll just say a
big query up here.

278
00:12:23,170 --> 00:12:23,449
All right.

279
00:12:23,449 --> 00:12:25,709
So let's just take a look
at what those weights are.

280
00:12:25,709 --> 00:12:27,869
And I can see that it
did a pretty good job.

281
00:12:27,869 --> 00:12:29,249
Remember that for X one and X

282
00:12:29,249 --> 00:12:31,549
two, I just added them together.

283
00:12:31,549 --> 00:12:34,629
I don't have any coefficients
on there other than one,

284
00:12:34,629 --> 00:12:35,850
I guess, one is the default.

285
00:12:35,850 --> 00:12:37,589
So try to figure that out that,

286
00:12:37,589 --> 00:12:40,309
you know, both of these troy
fissions are roughly one.

287
00:12:40,309 --> 00:12:43,030
I was adding random noise 0-1.

288
00:12:43,030 --> 00:12:44,630
So it's also good
that they found

289
00:12:44,630 --> 00:12:47,170
an intercept, kind
of close to 0.5.

290
00:12:47,170 --> 00:12:49,390
The model is doing
reasonable things

291
00:12:49,390 --> 00:12:50,770
for me. Alright, cool.

292
00:12:50,770 --> 00:12:52,710
So I can do that. Now, I might

293
00:12:52,710 --> 00:12:55,649
want to use this model to
make some predictions.

294
00:12:55,649 --> 00:12:59,049
And so in that case,
what am I going to do?

295
00:12:59,049 --> 00:13:01,290
I'm going to have
ML dot predict.

296
00:13:01,290 --> 00:13:03,750
And in that case, we say
the model like before,

297
00:13:03,750 --> 00:13:07,029
but we also have to
have some query, right?

298
00:13:07,029 --> 00:13:08,769
The query is going to

299
00:13:08,769 --> 00:13:11,389
give us the features
that we need, right?

300
00:13:11,389 --> 00:13:14,189
And so what I will
do is I'm going

301
00:13:14,189 --> 00:13:18,190
to maybe actually
just split this off.

302
00:13:18,190 --> 00:13:19,989
I think that's often a
little bit more elegant.

303
00:13:19,989 --> 00:13:22,449
And I'm going to say
select X one and X

304
00:13:22,449 --> 00:13:27,199
two from from that
table that we have,

305
00:13:27,199 --> 00:13:28,700
which was called train test.

306
00:13:28,700 --> 00:13:30,399
And this time, I'm going to

307
00:13:30,399 --> 00:13:32,239
say where it's test data, right?

308
00:13:32,239 --> 00:13:35,980
So before I specifically
selected training data,

309
00:13:35,980 --> 00:13:38,379
now I'm selecting the test
data, to see how it's doing.

310
00:13:38,379 --> 00:13:40,659
And so this will look
like a table for me,

311
00:13:40,659 --> 00:13:42,319
and it's a table that I

312
00:13:42,319 --> 00:13:44,979
can select from. I'm
going to select from it.

313
00:13:44,979 --> 00:13:46,660
And it's going to
have three columns.

314
00:13:46,660 --> 00:13:49,920
The three columns will
be the inputs here,

315
00:13:49,920 --> 00:13:51,119
whatever I put here, will show

316
00:13:51,119 --> 00:13:52,760
up on the other side as well.

317
00:13:52,760 --> 00:13:54,199
And then the
additional column will

318
00:13:54,199 --> 00:13:56,080
be the prediction
that it's making.

319
00:13:56,080 --> 00:14:00,419
I can do that. And let me see.

320
00:14:00,419 --> 00:14:03,499
I'm going to do a big query.

321
00:14:04,880 --> 00:14:09,439
Star is like a table so I
have to say the word from.

322
00:14:09,439 --> 00:14:14,659
And that's a a little
bit long. Tell you what?

323
00:14:14,659 --> 00:14:21,639
I'm just trying
to say like Well,

324
00:14:21,639 --> 00:14:23,339
the data is more
interesting at the end,

325
00:14:23,339 --> 00:14:24,999
right because sort
it in some way.

326
00:14:24,999 --> 00:14:26,979
Anyway, I can see it's doing
something reasonable, right?

327
00:14:26,979 --> 00:14:30,439
It's nine plus one is
ten plus some noise,

328
00:14:30,439 --> 00:14:32,140
if I kind of go in the middle.

329
00:14:32,140 --> 00:14:34,900
Six plus two is eight
plus some noise.

330
00:14:34,900 --> 00:14:37,139
It's doing something
reasonably well.

331
00:14:37,139 --> 00:14:39,080
Now, if I want to, I can put

332
00:14:39,080 --> 00:14:41,339
additional things here
that are not features.

333
00:14:41,339 --> 00:14:43,959
So for example, I could
see the original y value,

334
00:14:43,959 --> 00:14:45,619
and then I could do
all kinds of things.

335
00:14:45,619 --> 00:14:47,539
Maybe I want to have a
scatter plot where I have

336
00:14:47,539 --> 00:14:49,239
the real y values on

337
00:14:49,239 --> 00:14:51,419
the x axis and the
predicted y values,

338
00:14:51,419 --> 00:14:52,760
maybe like the y axis.

339
00:14:52,760 --> 00:14:54,339
I could see what
kinds of mistakes

340
00:14:54,339 --> 00:14:55,999
it's making any kind of

341
00:14:55,999 --> 00:14:57,700
metric that describes how

342
00:14:57,700 --> 00:14:58,979
the model is doing

343
00:14:58,979 --> 00:15:00,399
is going to be comparing
these in some way,

344
00:15:00,399 --> 00:15:01,460
there's a lot of metrics baked

345
00:15:01,460 --> 00:15:02,600
in, but if you have
those directly,

346
00:15:02,600 --> 00:15:04,280
you could you know,
compute whatever

347
00:15:04,280 --> 00:15:06,439
metric you want yourself, right?

348
00:15:06,439 --> 00:15:09,659
So I can do any kinds
of predictions I want.

349
00:15:09,659 --> 00:15:12,160
You know, sometimes
when you have a model,

350
00:15:12,160 --> 00:15:13,560
you're not doing predictions

351
00:15:13,560 --> 00:15:14,919
on like a whole table at a time.

352
00:15:14,919 --> 00:15:15,939
You just want to feed in

353
00:15:15,939 --> 00:15:17,799
one input and then
make a prediction.

354
00:15:17,799 --> 00:15:20,419
And we can absolutely
do that as well.

355
00:15:20,419 --> 00:15:22,799
It looks a little bit
strange because we're so

356
00:15:22,799 --> 00:15:26,000
like comfortable selecting
data from a table.

357
00:15:26,000 --> 00:15:26,959
In this case, the thing we're

358
00:15:26,959 --> 00:15:28,359
predicting doesn't
live in a table.

359
00:15:28,359 --> 00:15:29,954
So I'm going to
delete all of this.

360
00:15:29,954 --> 00:15:31,889
And I have to figure out,

361
00:15:31,889 --> 00:15:33,530
well, what are these
X one and X twos?

362
00:15:33,530 --> 00:15:34,869
And what I could
do is I could say

363
00:15:34,869 --> 00:15:37,610
three as X one and maybe,

364
00:15:37,610 --> 00:15:39,289
like, five as X two.

365
00:15:39,289 --> 00:15:41,409
I can totally just, you know,

366
00:15:41,409 --> 00:15:44,049
select a single row of data
with whatever values I want.

367
00:15:44,049 --> 00:15:46,929
Okay? So three plus five is
eight plus some noise, right?

368
00:15:46,929 --> 00:15:48,549
I can draw ahead in
and I can do that.

369
00:15:48,549 --> 00:15:50,069
I could use this to start

370
00:15:50,069 --> 00:15:52,230
making real predictions
for real things.

371
00:15:52,230 --> 00:15:54,170
All right. Any questions

372
00:15:54,170 --> 00:15:55,190
maybe I'll draw the to

373
00:15:55,190 --> 00:15:56,550
this one because it's
more interesting.

374
00:15:56,550 --> 00:15:58,229
But any questions about

375
00:15:58,229 --> 00:16:00,149
the predict or the
weight so far here,

376
00:16:00,149 --> 00:16:06,729
right here. How do we tell what?

377
00:16:06,729 --> 00:16:14,490
How does it, how
does it know Oh,

378
00:16:14,490 --> 00:16:15,830
you mean for these predictions,

379
00:16:15,830 --> 00:16:17,789
you're saying, what is
the calculation it does?

380
00:16:17,789 --> 00:16:20,170
Oh, yeah. So if I
have an X one value,

381
00:16:20,170 --> 00:16:22,409
it'll multiply it by about one.

382
00:16:22,409 --> 00:16:23,770
And if it has an X two value,

383
00:16:23,770 --> 00:16:25,649
it'll multiply it by about one.

384
00:16:25,649 --> 00:16:27,970
And then we'll add those
two results together,

385
00:16:27,970 --> 00:16:29,370
add in an intercept as well,

386
00:16:29,370 --> 00:16:31,910
and that will give
me my final results.

387
00:16:31,910 --> 00:16:34,849
That's just like a classic
like linear regression.

388
00:16:34,849 --> 00:16:39,630
Yeah. Yeah, sure.

389
00:16:39,630 --> 00:16:42,590
Yeah. Yeah. You can
tell them weights.

390
00:16:42,590 --> 00:16:44,509
You might call them t
efficient. Yep. Exactly.

391
00:16:44,509 --> 00:16:46,169
Yeah, right here. If it

392
00:16:46,169 --> 00:16:48,749
has an X one, it
doesn't ignore it.

393
00:16:48,749 --> 00:16:51,229
If it has an X one.
What do you mean?

394
00:16:51,229 --> 00:16:53,109
Oh, oh, yeah. Great
question, right?

395
00:16:53,109 --> 00:16:56,210
You're saying, Hey, what if I
tried to make a prediction?

396
00:16:56,210 --> 00:16:57,310
I don't have the features?

397
00:16:57,310 --> 00:16:59,309
It's not trying to be
able to do that, right?

398
00:16:59,309 --> 00:17:02,370
So, machine learning
people sometimes,

399
00:17:02,370 --> 00:17:04,009
impute a value or
things like that.

400
00:17:04,009 --> 00:17:05,710
But yeah,

401
00:17:05,710 --> 00:17:07,010
as far as big y is concerned,

402
00:17:07,010 --> 00:17:08,709
there has to be a value there.

403
00:17:08,709 --> 00:17:10,529
Yeah, Yeah, good questions.

404
00:17:10,529 --> 00:17:12,009
What else do people
want to know?

405
00:17:12,009 --> 00:17:14,689
Maybe to pause there.

406
00:17:14,689 --> 00:17:18,230
Oh, right. Cool. So,
what have we done?

407
00:17:18,230 --> 00:17:19,829
We've looked at the weights.

408
00:17:19,829 --> 00:17:24,309
We've looked at, different
ways to do predictions.

409
00:17:24,309 --> 00:17:26,789
How can we evaluate this thing?

410
00:17:26,789 --> 00:17:29,589
There's different metrics, and

411
00:17:29,589 --> 00:17:32,969
they're all going to be inside
something called evaluate.

412
00:17:32,969 --> 00:17:35,509
And so this case,
it's kind of similar.

413
00:17:35,509 --> 00:17:36,750
We have to have a model name,

414
00:17:36,750 --> 00:17:38,269
and then we have
to have a query.

415
00:17:38,269 --> 00:17:39,549
This is a lot like predict,

416
00:17:39,549 --> 00:17:41,469
but this query has to give us

417
00:17:41,469 --> 00:17:44,229
the label or the y
values as well, right?

418
00:17:44,229 --> 00:17:45,030
We can't say how good

419
00:17:45,030 --> 00:17:46,369
the predictions are unless
we know what they are.

420
00:17:46,369 --> 00:17:48,030
So it's kind of
similar to predicting,

421
00:17:48,030 --> 00:17:50,309
but also a little bit
different, right?

422
00:17:50,309 --> 00:17:54,150
And so I'm going to copy all
of this as my query up here.

423
00:17:54,150 --> 00:17:59,119
And And then I will
paste this in.

424
00:17:59,119 --> 00:18:01,539
All right. And now
this is required.

425
00:18:01,539 --> 00:18:02,820
I'll just show
that this is true.

426
00:18:02,820 --> 00:18:06,259
I mean, I select star from that,

427
00:18:06,259 --> 00:18:08,820
and that should give me
an error because I'm

428
00:18:08,820 --> 00:18:11,379
not giving at the label value.
Before it was optional.

429
00:18:11,379 --> 00:18:14,240
Now it is actually required,

430
00:18:14,240 --> 00:18:15,659
and I have to give
it a name, right?

431
00:18:15,659 --> 00:18:18,780
I think I called the section
two linear regression.

432
00:18:18,780 --> 00:18:20,839
Okay now, I'll complain
that it doesn't have a Y,

433
00:18:20,839 --> 00:18:22,540
so I'll select my Y value.

434
00:18:22,540 --> 00:18:25,160
And I may get back this table

435
00:18:25,160 --> 00:18:27,459
with all these
different metrics.

436
00:18:27,459 --> 00:18:30,620
So for example, the
R squared score

437
00:18:30,620 --> 00:18:32,439
is a measure of
explained variance.

438
00:18:32,439 --> 00:18:33,700
I mean, this y value I'm

439
00:18:33,700 --> 00:18:35,699
doing has a bunch
of variance in it.

440
00:18:35,699 --> 00:18:38,300
If I have these features,

441
00:18:38,300 --> 00:18:39,919
I could explain a lot of
that variance, right?

442
00:18:39,919 --> 00:18:42,259
So score of one
would be Perfect.

443
00:18:42,259 --> 00:18:43,639
This is a fantastic score, too.

444
00:18:43,639 --> 00:18:45,679
This is such an
easy pattern that

445
00:18:45,679 --> 00:18:48,739
any decent model could figure
out what it is, right?

446
00:18:48,739 --> 00:18:51,039
So I may just look at how
I could pull this out.

447
00:18:51,039 --> 00:18:52,680
Once I have that
pulled out, I could

448
00:18:52,680 --> 00:18:54,019
figure out which
metrics I want, right?

449
00:18:54,019 --> 00:18:55,220
I want row zero.

450
00:18:55,220 --> 00:18:56,620
There is only one row,

451
00:18:56,620 --> 00:18:58,479
and then the R squared

452
00:18:58,479 --> 00:19:01,019
score that gives
me a num pi float,

453
00:19:01,019 --> 00:19:03,940
which I can just invert
to a Python float.

454
00:19:03,940 --> 00:19:05,420
And I can see what is
the explained variance.

455
00:19:05,420 --> 00:19:07,040
Yeah, sure.

456
00:19:14,650 --> 00:19:16,929
What's that?

457
00:19:18,730 --> 00:19:21,030
It does not train
the model again.

458
00:19:21,030 --> 00:19:22,890
No, no, it does not
train the model again.

459
00:19:22,890 --> 00:19:24,609
And so when you're like
around the console,

460
00:19:24,609 --> 00:19:26,250
you might also see
an R square score.

461
00:19:26,250 --> 00:19:28,290
So when they train on
the training data,

462
00:19:28,290 --> 00:19:31,010
they will also evaluate

463
00:19:31,010 --> 00:19:32,149
on the training data
at the same time.

464
00:19:32,149 --> 00:19:34,029
And so you will find
R square score here.

465
00:19:34,029 --> 00:19:35,809
But this is an R square score

466
00:19:35,809 --> 00:19:38,889
specifically for
the data that I.

467
00:19:38,889 --> 00:19:40,569
This is kind of a
more meaningful one.

468
00:19:40,569 --> 00:19:42,569
The other one is kind
of a nice metric

469
00:19:42,569 --> 00:19:45,204
in some ways because you might
be able to recognize that,

470
00:19:45,204 --> 00:19:47,239
You know, different models,

471
00:19:47,239 --> 00:19:48,819
maybe it's like overfitting.

472
00:19:48,819 --> 00:19:50,399
I just remembering the patterns.

473
00:19:50,399 --> 00:19:52,640
Other times, maybe your
model is too simple,

474
00:19:52,640 --> 00:19:53,979
and it cannot fit the pattern

475
00:19:53,979 --> 00:19:55,880
even that appears in
the training data.

476
00:19:55,880 --> 00:19:57,139
So that's why it's
also useful to

477
00:19:57,139 --> 00:19:58,700
know what is our
R squared score?

478
00:19:58,700 --> 00:20:00,859
I you know, if I

479
00:20:00,859 --> 00:20:02,220
train the model in
the training data

480
00:20:02,220 --> 00:20:03,639
and evaluate it on the
training data as well.

481
00:20:03,639 --> 00:20:04,819
So you'll see that
in the counsel, but

482
00:20:04,819 --> 00:20:06,160
this one is just
for the test data,

483
00:20:06,160 --> 00:20:08,579
or whatever other data
I might feed into it.

484
00:20:08,579 --> 00:20:12,174
Yeah, great question. Yeah,
other questions people have.

485
00:20:12,174 --> 00:20:18,230
Right. Cool. So lots
of good stuff there.

486
00:20:18,230 --> 00:20:21,309
I'm going to head
back to the slides,

487
00:20:21,309 --> 00:20:23,670
and we're going to talk
about feature transformers.

488
00:20:23,670 --> 00:20:25,089
This might be familiar to

489
00:20:25,089 --> 00:20:26,609
some folks, or it
might be new to you.

490
00:20:26,609 --> 00:20:28,990
I think there is fine.

491
00:20:28,990 --> 00:20:31,450
I'm going to show
you some examples

492
00:20:31,450 --> 00:20:33,649
of tricky cases, right?

493
00:20:33,649 --> 00:20:35,730
Now, on the left hand side,

494
00:20:35,730 --> 00:20:38,690
I have an X feature,
and on the y,

495
00:20:38,690 --> 00:20:40,769
I have a label column, right?

496
00:20:40,769 --> 00:20:42,849
I want to predict the
y based on the X.

497
00:20:42,849 --> 00:20:44,369
And what we can see is that

498
00:20:44,369 --> 00:20:46,530
these points are not really
quite on the straight line.

499
00:20:46,530 --> 00:20:47,889
They kind of slope
up steeper and

500
00:20:47,889 --> 00:20:51,769
steeper as we go, right? And,

501
00:20:51,769 --> 00:20:53,649
You know, some models, if I

502
00:20:53,649 --> 00:20:55,110
had a deperal network,
that would be fine.

503
00:20:55,110 --> 00:20:57,229
They can deal with like a non
linear pattern like that.

504
00:20:57,229 --> 00:20:58,409
But if we're doing that linear

505
00:20:58,409 --> 00:20:59,930
regression model
I was just doing,

506
00:20:59,930 --> 00:21:02,389
what it wants to do is it
wants to say something like

507
00:21:02,389 --> 00:21:05,530
y equals x times a weight.

508
00:21:05,530 --> 00:21:06,729
And so whatever
weight I do there,

509
00:21:06,729 --> 00:21:08,769
it doesn't quite fit
that curve pattern.

510
00:21:08,769 --> 00:21:10,389
Right? So that's
one problem, right?

511
00:21:10,389 --> 00:21:12,230
Can I use the linear regression

512
00:21:12,230 --> 00:21:13,710
model in a reasonable way?

513
00:21:13,710 --> 00:21:15,969
Yes, but I have to do
some pre processing on

514
00:21:15,969 --> 00:21:18,749
my data first if I want to
use that specific model.

515
00:21:18,749 --> 00:21:21,790
Okay, what about over here
on the right hand side?

516
00:21:21,890 --> 00:21:25,829
Sometimes I have
categorical data, right?

517
00:21:25,829 --> 00:21:27,870
Maybe maybe I have like
cat, dog, and mouse,

518
00:21:27,870 --> 00:21:29,069
and then maybe I'm
trying to predict

519
00:21:29,069 --> 00:21:30,629
what is the weight of
the animal, right?

520
00:21:30,629 --> 00:21:32,769
Maybe that's on
the y axis, right?

521
00:21:32,769 --> 00:21:34,410
So the dog is the heaviest,

522
00:21:34,410 --> 00:21:36,129
the mouse is the
smallest, right?

523
00:21:36,129 --> 00:21:40,389
And some models will
do great at that.

524
00:21:40,389 --> 00:21:42,410
If I have a decision tree,

525
00:21:42,410 --> 00:21:44,729
And a given node in the
decision tree, I mean,

526
00:21:44,729 --> 00:21:46,930
I could have, is x
greater than five,

527
00:21:46,930 --> 00:21:49,289
or I could also say is
x equal to dog, right?

528
00:21:49,289 --> 00:21:51,170
I can ask categorical questions

529
00:21:51,170 --> 00:21:52,870
very naturally in
a decision tree.

530
00:21:52,870 --> 00:21:56,870
But maybe maybe for like a
linear regression model,

531
00:21:56,870 --> 00:21:58,089
again, I can't do

532
00:21:58,089 --> 00:21:59,909
that because what is
like dog times three?

533
00:21:59,909 --> 00:22:01,929
That doesn't have
any meaning, right?

534
00:22:01,929 --> 00:22:03,549
So in both of these cases,

535
00:22:03,549 --> 00:22:05,189
depending on what model
I'm working with,

536
00:22:05,189 --> 00:22:07,889
I may or may not have to
transform my input data.

537
00:22:07,889 --> 00:22:09,350
So I don't know if
somebody who's like taken

538
00:22:09,350 --> 00:22:11,689
320 or maybe seen this
in another course.

539
00:22:11,689 --> 00:22:15,029
What kind of transformation
might I want to do on

540
00:22:15,029 --> 00:22:17,009
the left hand side
if I want to use

541
00:22:17,009 --> 00:22:21,059
a linear regression model
effectively? Yeah, right here.

542
00:22:21,059 --> 00:22:23,219
Pomal features, right?

543
00:22:23,219 --> 00:22:25,060
It's not a direct correlation,

544
00:22:25,060 --> 00:22:27,799
but it's a squared relationship.

545
00:22:27,799 --> 00:22:29,040
What about on the
right hand side?

546
00:22:29,040 --> 00:22:30,499
Anybody have any
thoughts on what I

547
00:22:30,499 --> 00:22:32,259
should do if I have
categorical data like that?

548
00:22:32,259 --> 00:22:34,539
It's a common transformation.

549
00:22:39,260 --> 00:22:45,289
Yeah, go ahead. Yeah, we need
to cort numbers some way?

550
00:22:45,289 --> 00:22:46,929
There's a particular like,
answer I'm looking for.

551
00:22:46,929 --> 00:22:48,070
I mean there's different
ways that we could

552
00:22:48,070 --> 00:22:49,749
incorporate the numbers.
Yeah, right here.

553
00:22:49,749 --> 00:22:51,369
Yeah, one hot trotter is

554
00:22:51,369 --> 00:22:52,769
kind of what I'm
looking for, right?

555
00:22:52,769 --> 00:22:55,149
So let's see how we would do
this in both cases, right?

556
00:22:55,149 --> 00:22:57,189
So in the first case,

557
00:22:57,189 --> 00:23:02,670
if I just multiply x
squared by some constant,

558
00:23:02,670 --> 00:23:04,749
well, then that's fine, right?

559
00:23:04,749 --> 00:23:07,410
From the perspective of the
linear regression model,

560
00:23:07,410 --> 00:23:09,169
I can tip it however
many columns I want,

561
00:23:09,169 --> 00:23:10,209
and it doesn't need to know

562
00:23:10,209 --> 00:23:11,409
where those columns came from.

563
00:23:11,409 --> 00:23:12,889
It's just trying to
see, like, can I

564
00:23:12,889 --> 00:23:14,349
find a linear relationship

565
00:23:14,349 --> 00:23:18,069
between this column
and the y value?

566
00:23:18,069 --> 00:23:19,729
And so it's totally fine, right,

567
00:23:19,729 --> 00:23:22,709
if I have a data frame
with a column of x value,

568
00:23:22,709 --> 00:23:24,309
I can just add another column of

569
00:23:24,309 --> 00:23:26,569
a data frame and troll
up the x squared column,

570
00:23:26,569 --> 00:23:27,969
and I can compute it by

571
00:23:27,969 --> 00:23:29,429
squaring the original
values, right?

572
00:23:29,429 --> 00:23:30,649
And then I have a column of

573
00:23:30,649 --> 00:23:32,409
data that the linear
regression model can

574
00:23:32,409 --> 00:23:35,689
just slap a consonant
and troll drug, right?

575
00:23:35,689 --> 00:23:38,370
So I need to have some kind
of pinbal feature transformer

576
00:23:38,370 --> 00:23:40,730
to make this work on
the left hand side.

577
00:23:40,730 --> 00:23:42,130
Right? Then the right hand side,

578
00:23:42,130 --> 00:23:43,970
we have to assign
numbers to each

579
00:23:43,970 --> 00:23:46,029
of these categories if we
want to multiply them.

580
00:23:46,029 --> 00:23:47,309
And I think what people are

581
00:23:47,309 --> 00:23:49,169
often tempted to do is
they're attempted to say,

582
00:23:49,169 --> 00:23:52,009
a mouse cat dog is
one, two, three.

583
00:23:52,009 --> 00:23:54,649
And the problem with that is

584
00:23:54,649 --> 00:23:56,770
that the linear regression model

585
00:23:56,770 --> 00:23:58,879
is trying to put a
coefficient on the animal,

586
00:23:58,879 --> 00:24:01,289
It's baking in an
assumption that somehow

587
00:24:01,289 --> 00:24:04,150
a cat is an average
of a mouse and a dog.

588
00:24:04,150 --> 00:24:05,889
And that just doesn't
make sense, right?

589
00:24:05,889 --> 00:24:07,889
So I can't just slap
different numbers on it,

590
00:24:07,889 --> 00:24:09,130
and then multiply that a bio

591
00:24:09,130 --> 00:24:10,750
cooefficient in a
reasonable way.

592
00:24:10,750 --> 00:24:12,950
So what we do instead, right
is when we have categories,

593
00:24:12,950 --> 00:24:16,569
we'll actually add multiple
numerical columns.

594
00:24:16,569 --> 00:24:19,369
I'm going to have
like a mouse column.

595
00:24:19,369 --> 00:24:20,789
And in the mouse
column, it'll be

596
00:24:20,789 --> 00:24:22,750
one if it's a mouse and zero,

597
00:24:22,750 --> 00:24:24,749
if it's not, same thing
for a cat column,

598
00:24:24,749 --> 00:24:26,889
same thing for a
dog column, right?

599
00:24:26,889 --> 00:24:29,629
And so then when I'm looking
at a specific row, right?

600
00:24:29,629 --> 00:24:32,749
I see like, Oh, there's
like a mouse cat dog value.

601
00:24:32,749 --> 00:24:34,470
I'll put a one in that cell,

602
00:24:34,470 --> 00:24:35,689
if it is that kind of animal,

603
00:24:35,689 --> 00:24:39,239
and I'll put a zero
if it is not, right?

604
00:24:39,239 --> 00:24:42,479
And so then what is great
is that the coefficients,

605
00:24:42,479 --> 00:24:43,579
I can put a coefficient on

606
00:24:43,579 --> 00:24:44,999
the cat column or
the dog column.

607
00:24:44,999 --> 00:24:46,279
And then based on
what animal it is,

608
00:24:46,279 --> 00:24:49,559
I can contribute some
amount to the y value.

609
00:24:49,559 --> 00:24:53,499
Any questions about
that? All right.

610
00:24:53,499 --> 00:24:55,439
Cool. So those are
the two kinds of

611
00:24:55,439 --> 00:24:58,039
encodings that the
transformations we want to do.

612
00:24:58,039 --> 00:24:59,340
And I'm going to see how both

613
00:24:59,340 --> 00:25:00,500
of those show up in big query.

614
00:25:00,500 --> 00:25:02,120
What I see is that for
the left hand side,

615
00:25:02,120 --> 00:25:04,179
we actually have to do a
fair bit of manual work,

616
00:25:04,179 --> 00:25:05,339
and then on the right hand side,

617
00:25:05,339 --> 00:25:07,079
that actually happens
automatically for us.

618
00:25:07,079 --> 00:25:08,759
You need to know what's
happening automatically

619
00:25:08,759 --> 00:25:11,384
so you don't duplicate
efforts, right?

620
00:25:11,384 --> 00:25:15,469
Alright, I'm going my head
back here. Excuse me.

621
00:25:15,469 --> 00:25:18,189
And in this case, what
am I going to do?

622
00:25:18,189 --> 00:25:20,729
I'm going to generate
some new data that

623
00:25:20,729 --> 00:25:24,090
has like a non linear pattern,

624
00:25:24,090 --> 00:25:28,549
and I'm may copy the
same data as before.

625
00:25:28,549 --> 00:25:32,469
All right. I'm going to
paste this down here.

626
00:25:32,469 --> 00:25:34,349
And let's just make
it more interesting.

627
00:25:34,349 --> 00:25:36,029
I'm going to say
two times this X

628
00:25:36,029 --> 00:25:37,729
one thing and I'm
going to square it.

629
00:25:37,729 --> 00:25:39,849
And then let's say minus

630
00:25:39,849 --> 00:25:42,489
minus three times
that column, right?

631
00:25:42,489 --> 00:25:44,270
So a more complicated
relationship.

632
00:25:44,270 --> 00:25:45,689
I have to figure out that we

633
00:25:45,689 --> 00:25:47,349
have put a co efficient
on the square of it

634
00:25:47,349 --> 00:25:50,649
instead of just the
regular All right,

635
00:25:50,649 --> 00:25:52,629
so I have that.

636
00:25:52,629 --> 00:25:54,469
And then what I'm going
to do is I'm just

637
00:25:54,469 --> 00:25:55,870
going to again put
it to Big Query.

638
00:25:55,870 --> 00:25:58,069
So I'll put it to
Google Big Query,

639
00:25:58,069 --> 00:26:01,789
Section two, and I'm just
trying to call this table one.

640
00:26:01,789 --> 00:26:05,030
And if it exists,

641
00:26:05,030 --> 00:26:06,749
I'm just trying to replace

642
00:26:06,749 --> 00:26:08,049
it, right? I'm
going to run that.

643
00:26:08,049 --> 00:26:11,900
And You know, if I was
doing things properly,

644
00:26:11,900 --> 00:26:14,020
I would do a train test split,

645
00:26:14,020 --> 00:26:16,539
but I don't want to complicate
this example with that.

646
00:26:16,539 --> 00:26:17,759
And we already
talked about that.

647
00:26:17,759 --> 00:26:19,240
For this one, I'm going to train

648
00:26:19,240 --> 00:26:20,720
and test on the same date.

649
00:26:20,720 --> 00:26:22,180
That's a bad thing to
do, but I can still

650
00:26:22,180 --> 00:26:24,159
demonstrate what I want
to demonstrate right now.

651
00:26:24,159 --> 00:26:27,099
Alright, cool. So I have
generated that thing.

652
00:26:27,099 --> 00:26:29,519
It's there, and then

653
00:26:29,519 --> 00:26:31,919
I can start training
a model with it.

654
00:26:31,919 --> 00:26:33,499
And so what I think
I will do first is

655
00:26:33,499 --> 00:26:35,439
I'll just fit a
linear model to it,

656
00:26:35,439 --> 00:26:37,819
and the linear model
will be bad, right?

657
00:26:37,819 --> 00:26:40,059
Because it's a non
linear pattern, right?

658
00:26:40,059 --> 00:26:41,519
It's a polynomial pattern.

659
00:26:41,519 --> 00:26:45,204
But let's try it. And so I'm
going to do a big query.

660
00:26:45,204 --> 00:26:48,209
And I have select X one, X two,

661
00:26:48,209 --> 00:26:54,329
and y from Section
two table one.

662
00:26:54,329 --> 00:26:57,130
Let's just take a quick
look at our data.

663
00:26:57,360 --> 00:27:00,739
There it is. And then we can

664
00:27:00,739 --> 00:27:05,180
create or replace
model, as usual.

665
00:27:05,180 --> 00:27:07,539
I'm going to call
this just Model one.

666
00:27:07,539 --> 00:27:10,399
And then I'm Model two
is going to be basically

667
00:27:10,399 --> 00:27:12,199
a better machine
learning model that

668
00:27:12,199 --> 00:27:14,479
can handle the
polynomial aspect of it.

669
00:27:14,479 --> 00:27:16,359
I'm going to say, as always,

670
00:27:16,359 --> 00:27:17,820
I have to have
some options here.

671
00:27:17,820 --> 00:27:20,960
And so I have to say,
like model type equals,

672
00:27:20,960 --> 00:27:23,379
linear regression.

673
00:27:23,379 --> 00:27:25,759
And then what else
do I need to say?

674
00:27:25,759 --> 00:27:28,780
I need to say, input,

675
00:27:28,780 --> 00:27:33,179
label, columns,
equals, that y value.

676
00:27:33,179 --> 00:27:37,749
I'm going to do that. And
we're in Section two.

677
00:27:37,749 --> 00:27:39,669
My apologies, right?
So let's train it

678
00:27:39,669 --> 00:27:43,310
on the data we have,
right in that new table.

679
00:27:43,310 --> 00:27:46,970
It's running and
after that's done,

680
00:27:46,970 --> 00:27:50,389
then I may draw in and try
to evaluate it, right?

681
00:27:54,620 --> 00:27:57,800
All right, well, what I'm
going to do now is I'm

682
00:27:57,800 --> 00:28:01,199
going to say mL dot evaluate.

683
00:28:01,199 --> 00:28:06,379
And the model name
is section two.m1.

684
00:28:06,379 --> 00:28:08,479
And then I have to have
some query that gives

685
00:28:08,479 --> 00:28:10,799
me both features
and columns, right?

686
00:28:10,799 --> 00:28:12,119
So I'm just going
over here to say

687
00:28:12,119 --> 00:28:16,719
select star from
section two table one.

688
00:28:16,719 --> 00:28:18,839
And again, this is the bad
thing I'm doing, right?

689
00:28:18,839 --> 00:28:20,420
I trained on this data, and now

690
00:28:20,420 --> 00:28:22,739
I'm evaluating on the
same data, right?

691
00:28:22,739 --> 00:28:24,980
But it's not going to
be feted even thugh

692
00:28:24,980 --> 00:28:27,419
it's this data before because
it's a non linear pattern,

693
00:28:27,419 --> 00:28:29,039
and we have a linear
model, right?

694
00:28:29,039 --> 00:28:32,279
So I'm going to say, big query,

695
00:28:32,279 --> 00:28:35,239
select star from that, right?

696
00:28:35,239 --> 00:28:38,239
So I have that, and select star,

697
00:28:38,239 --> 00:28:41,499
and I always forget it's
basically like a table, right?

698
00:28:41,499 --> 00:28:44,680
What else do I
have? So Evaluate.

699
00:28:44,680 --> 00:28:46,940
And if I have a
typo or something

700
00:28:46,940 --> 00:28:50,185
somewhere and people
let me know, feel free.

701
00:28:50,185 --> 00:28:52,109
Oh, there we go.

702
00:28:52,109 --> 00:28:55,530
Parentheses. Let's try
that. All right. Excellent.

703
00:28:55,530 --> 00:28:56,590
Thank you. Good Ketch.

704
00:28:56,590 --> 00:28:58,650
And not a horrible
R squared score,

705
00:28:58,650 --> 00:29:00,070
but it's quite a bit worse than

706
00:29:00,070 --> 00:29:02,050
the 99% that we saw before.

707
00:29:02,050 --> 00:29:03,310
And this is a simple
enough pattern.

708
00:29:03,310 --> 00:29:06,949
We should be able to get
like a 99% out of it.

709
00:29:06,949 --> 00:29:10,709
Okay. And so what I want to
do is I want to come back

710
00:29:10,709 --> 00:29:15,369
to this query that we were
working with before, right?

711
00:29:15,369 --> 00:29:17,489
So we have this query here.

712
00:29:17,489 --> 00:29:23,119
And The strategy that I
want you to think about is,

713
00:29:23,119 --> 00:29:25,280
how can we add
additional columns

714
00:29:25,280 --> 00:29:28,519
on top of these raw features
that we have, right?

715
00:29:28,519 --> 00:29:31,599
And we can do that by doing
another select on top of it.

716
00:29:31,599 --> 00:29:35,419
So select something from
from this stuff, right?

717
00:29:35,419 --> 00:29:37,119
And so, you know, I want to have

718
00:29:37,119 --> 00:29:38,920
all those same features
showing up again,

719
00:29:38,920 --> 00:29:40,379
and I guess the y value.

720
00:29:40,379 --> 00:29:42,619
But I can add other
things here here as well.

721
00:29:42,619 --> 00:29:45,739
So for example, I could raise
X one to the power of two,

722
00:29:45,739 --> 00:29:47,279
and maybe I call that X two,

723
00:29:47,279 --> 00:29:50,499
or maybe I raise the power of
X two to the power of two,

724
00:29:50,499 --> 00:29:53,720
and I call that X I'm sorry,

725
00:29:53,720 --> 00:29:56,159
I'm gonna call this X two

726
00:29:56,159 --> 00:29:59,219
to the power of two and X
one to the power of two,

727
00:29:59,219 --> 00:30:01,539
try a naming convention,
right that like that?

728
00:30:01,539 --> 00:30:03,579
Or you know, maybe I put in like

729
00:30:03,579 --> 00:30:06,479
a logarithm or any kind
of function you want.

730
00:30:06,479 --> 00:30:07,899
You can put whatever you want.

731
00:30:07,899 --> 00:30:11,939
Maybe I want to multiply
X one times X two,

732
00:30:11,939 --> 00:30:15,499
and I'll call that X
one, X two, right?

733
00:30:15,499 --> 00:30:17,139
I could put whatever
I want here, right?

734
00:30:17,139 --> 00:30:21,179
So I could do that. And did

735
00:30:21,179 --> 00:30:24,079
you mean X two,
probably, but where?

736
00:30:24,079 --> 00:30:27,200
Next two to Oh,

737
00:30:27,200 --> 00:30:28,639
great. Dred Catch. Thank you.

738
00:30:28,639 --> 00:30:31,240
So as Oh, oh,

739
00:30:31,240 --> 00:30:32,960
okay, great. Dred Catch.

740
00:30:32,960 --> 00:30:35,700
Good Ctch. Thank you. You're
sharper than I am today.

741
00:30:35,700 --> 00:30:38,000
All right. So great,
I've prepped the date.

742
00:30:38,000 --> 00:30:39,279
I can have whatever
times I want.

743
00:30:39,279 --> 00:30:41,760
And now I can dive this to
a linear regression model.

744
00:30:41,760 --> 00:30:43,820
And the liar linear
regression model

745
00:30:43,820 --> 00:30:45,939
will very happily figure out,

746
00:30:45,939 --> 00:30:48,860
should I put a coefficient
on any of these?

747
00:30:48,860 --> 00:30:51,240
And looking back at
the relationship,

748
00:30:51,240 --> 00:30:53,459
we see that I'm hoping that

749
00:30:53,459 --> 00:30:56,184
it is trying to
put a two on that

750
00:30:56,184 --> 00:30:58,309
X one squared column I had.

751
00:30:58,309 --> 00:31:01,749
Do we ever have X two squared
in the original thing?

752
00:31:01,749 --> 00:31:03,309
No, no, we don't. And so

753
00:31:03,309 --> 00:31:05,769
it's fine that I have a column
there that's like that.

754
00:31:05,769 --> 00:31:07,930
But what I'm hoping is
that the model will put

755
00:31:07,930 --> 00:31:11,329
a zero coefficient on top
of that column for me.

756
00:31:11,329 --> 00:31:14,089
Okay? I'm gonna
come down here and

757
00:31:14,089 --> 00:31:16,289
what I will do is that this is

758
00:31:16,289 --> 00:31:18,369
now my new training data, right?

759
00:31:18,369 --> 00:31:21,549
And so just how I
trained M one before,

760
00:31:21,549 --> 00:31:23,349
which was up here, right?

761
00:31:23,349 --> 00:31:26,289
I'm going to do the
same thing, but now it

762
00:31:26,289 --> 00:31:29,689
gets this extra
this, what is that?

763
00:31:29,689 --> 00:31:34,459
It gets that extra those

764
00:31:34,459 --> 00:31:36,319
extra values for
training, right?

765
00:31:36,319 --> 00:31:39,920
Alright. Fantastic. So I may
call this M two, by the way.

766
00:31:39,920 --> 00:31:41,799
So that's my better model,

767
00:31:41,799 --> 00:31:43,019
and so I'm going to train that,

768
00:31:43,019 --> 00:31:45,080
and that will all work fine.

769
00:31:45,080 --> 00:31:48,284
And then what I want to do,

770
00:31:48,284 --> 00:31:50,569
After that thing
trains is I want

771
00:31:50,569 --> 00:31:52,589
to evaluate it, right?
So I'm gonna come back.

772
00:31:52,589 --> 00:31:56,409
I'm going to evaluate it
the way I did before.

773
00:31:56,409 --> 00:31:59,169
And I'm going to
run this down here,

774
00:31:59,169 --> 00:32:00,609
and you know instead of M one,

775
00:32:00,609 --> 00:32:02,209
let's try M two, right?

776
00:32:02,209 --> 00:32:04,449
And now I have a problem.

777
00:32:04,449 --> 00:32:07,550
This is going to actually fail.

778
00:32:07,550 --> 00:32:10,429
I think, should be failing.
It should have failed by now.

779
00:32:10,429 --> 00:32:12,070
This is very unnerving,

780
00:32:12,070 --> 00:32:13,469
that it's ce I'm

781
00:32:13,469 --> 00:32:15,209
replacing a model. That's
not what I wanted to do.

782
00:32:15,209 --> 00:32:18,289
Okay. What am I doing there?

783
00:32:18,330 --> 00:32:20,670
Let me just I'm doing too fast,

784
00:32:20,670 --> 00:32:21,889
and I need to slow down and make

785
00:32:21,889 --> 00:32:23,389
sure I'm doing
something reasonable.

786
00:32:23,389 --> 00:32:25,729
All right. So I train
the M one model.

787
00:32:25,729 --> 00:32:28,149
I you evaluate the M one model.

788
00:32:28,149 --> 00:32:29,730
I'm training the M two model,

789
00:32:29,730 --> 00:32:32,030
which I think I just
overwrote, unfortunately.

790
00:32:32,030 --> 00:32:33,990
And then what I
wanted to copy down

791
00:32:33,990 --> 00:32:36,010
was an evaluation
of the M two model.

792
00:32:36,010 --> 00:32:38,309
I copy down the wrong
cell. My apologies.

793
00:32:38,309 --> 00:32:40,410
And so I'm going
to just evaluate

794
00:32:40,410 --> 00:32:41,989
the M two model on that.

795
00:32:41,989 --> 00:32:43,969
And now I think

796
00:32:43,969 --> 00:32:45,989
I'm going to get an error
right when I do this.

797
00:32:45,989 --> 00:32:48,150
And the issue is
saying, well, hey,

798
00:32:48,150 --> 00:32:49,869
I don't have that X
one squared column,

799
00:32:49,869 --> 00:32:51,269
and there's probably
other ones if I fix that,

800
00:32:51,269 --> 00:32:52,709
there'll be other
ones that show up.

801
00:32:52,709 --> 00:32:56,109
And that's because when I was
training the model up here,

802
00:32:56,109 --> 00:32:59,309
it had all of these
different columns,

803
00:32:59,309 --> 00:33:02,549
and table one does
not have that, right?

804
00:33:02,549 --> 00:33:04,109
That's a real problem, right?

805
00:33:04,109 --> 00:33:08,189
And so The solution, right?

806
00:33:08,189 --> 00:33:10,530
Is that however I transform
the data for training,

807
00:33:10,530 --> 00:33:12,129
I have to transform
in exactly the

808
00:33:12,129 --> 00:33:14,649
same way for testing, right?

809
00:33:14,649 --> 00:33:16,289
And so one thing I could do,

810
00:33:16,289 --> 00:33:19,009
which is a bad thing
would be to select all of

811
00:33:19,009 --> 00:33:22,449
this and add that down
here. I could do that.

812
00:33:22,449 --> 00:33:24,549
When you copy and paste
big complicated stuff

813
00:33:24,549 --> 00:33:25,709
like that, it's
dangerous, right?

814
00:33:25,709 --> 00:33:27,450
Because maybe I update it later,

815
00:33:27,450 --> 00:33:29,129
and I forget to update
it both places.

816
00:33:29,129 --> 00:33:30,429
And all of a sudden, then I

817
00:33:30,429 --> 00:33:32,429
trained my data with
one transformation,

818
00:33:32,429 --> 00:33:34,230
that I like predicting later

819
00:33:34,230 --> 00:33:36,389
with a different transformation,
may get garbage, right?

820
00:33:36,389 --> 00:33:37,929
And so what I want to have

821
00:33:37,929 --> 00:33:39,729
happen is I want this
transformation to

822
00:33:39,729 --> 00:33:43,339
be baked directly into
the model itself,

823
00:33:43,339 --> 00:33:45,379
so that, you know, whatever
transformation happens for

824
00:33:45,379 --> 00:33:47,739
the training is going to
happen for the testing, too.

825
00:33:47,739 --> 00:33:48,959
That's what I would like. And so

826
00:33:48,959 --> 00:33:50,499
I'm just going to
comment this out.

827
00:33:50,499 --> 00:33:52,960
And I'm going to copy
this line up here,

828
00:33:52,960 --> 00:33:55,400
and we're going to
modify it a bit.

829
00:33:55,400 --> 00:33:56,879
Okay? So what we will

830
00:33:56,879 --> 00:34:00,820
do is we're going to add what
is called a transform line.

831
00:34:00,820 --> 00:34:03,539
We're going to add a
transform line up here.

832
00:34:04,790 --> 00:34:07,049
And I can put something here.

833
00:34:07,049 --> 00:34:10,150
And the thing I put here
can basically be whatever

834
00:34:10,150 --> 00:34:13,529
you would put on a select
line like that, right?

835
00:34:13,529 --> 00:34:15,329
So all any of these
transformations

836
00:34:15,329 --> 00:34:16,529
here, I can say,
Hey, do it there,

837
00:34:16,529 --> 00:34:18,469
and it will happen
automatically for me

838
00:34:18,469 --> 00:34:21,669
both when I train and
when I test, right?

839
00:34:21,669 --> 00:34:24,609
And so I'm gonna just top
you all of this, right?

840
00:34:24,609 --> 00:34:26,829
I'm gonna paste it up here.

841
00:34:27,040 --> 00:34:29,359
And then what I'm
going to do is I'm

842
00:34:29,359 --> 00:34:31,219
going to delete all actually
all of this, right?

843
00:34:31,219 --> 00:34:32,879
It's more elegant
already, right?

844
00:34:32,879 --> 00:34:34,819
It looks kind of nicer, right?

845
00:34:34,819 --> 00:34:36,179
And I can differentiate.

846
00:34:36,179 --> 00:34:37,039
I can see like, Well,

847
00:34:37,039 --> 00:34:38,819
these are my raw features
that are coming in.

848
00:34:38,819 --> 00:34:41,760
And then these are
ways I would transform

849
00:34:41,760 --> 00:34:42,860
those features to generate

850
00:34:42,860 --> 00:34:45,059
more features that I can
use for training, right?

851
00:34:45,059 --> 00:34:46,319
That's what I'm going to do.

852
00:34:46,319 --> 00:34:48,439
And so I'm going to run this.

853
00:34:48,439 --> 00:34:51,399
And this is going to over old

854
00:34:51,399 --> 00:34:53,859
M two because this is like
the proper way to do it.

855
00:34:53,859 --> 00:34:55,820
And then when that works,

856
00:34:55,820 --> 00:34:58,759
this thing that was
failing before,

857
00:34:58,759 --> 00:35:01,699
is going to start
working for me, right?

858
00:35:01,699 --> 00:35:04,439
Alright, I'll just pause and
let that run for a moment.

859
00:35:04,439 --> 00:35:06,639
Any questions all
that's running?

860
00:35:08,060 --> 00:35:12,059
All right. So that, R.
Let's evaluate it now.

861
00:35:12,059 --> 00:35:14,579
And so one thing
that's better is

862
00:35:14,579 --> 00:35:15,739
that I can see that that was

863
00:35:15,739 --> 00:35:16,979
a good transformation, right?

864
00:35:16,979 --> 00:35:21,320
When when I have that
X one squared column,

865
00:35:21,320 --> 00:35:23,119
it was able to put a
coefficient on that and

866
00:35:23,119 --> 00:35:25,359
rod prediction up to 99% again.

867
00:35:25,359 --> 00:35:27,359
And then the other thing,
is that down here,

868
00:35:27,359 --> 00:35:31,239
I just have x1x2 and y.

869
00:35:31,239 --> 00:35:32,619
And if somebody goes
and they change

870
00:35:32,619 --> 00:35:33,219
that model they can

871
00:35:33,219 --> 00:35:34,679
do different
transformations, whatever,

872
00:35:34,679 --> 00:35:36,499
I don't have to
change my code for

873
00:35:36,499 --> 00:35:38,520
how I do predictions
or evaluation.

874
00:35:38,520 --> 00:35:42,599
Yeah, question here.
What. Yeah, sure.

875
00:35:42,599 --> 00:35:44,539
Let's see what
proficiens it picked.

876
00:35:44,539 --> 00:35:49,559
So let's do Let's
do a big query and

877
00:35:49,559 --> 00:35:55,320
select star from L dot
evaluate evaluate dot weights.

878
00:35:55,320 --> 00:36:01,399
And my model this time is
called section 22, right?

879
00:36:01,399 --> 00:36:03,759
Let's see what it picked, right?

880
00:36:03,759 --> 00:36:07,399
And so let's take
a look at this.

881
00:36:07,399 --> 00:36:11,059
And so Lots of kind of
small coefficients,

882
00:36:11,059 --> 00:36:12,779
right, it has a small
coefficient on x one.

883
00:36:12,779 --> 00:36:15,199
It has a small
coefficient on X two

884
00:36:15,199 --> 00:36:18,699
squared has a small coefficient
on X one times X two.

885
00:36:18,699 --> 00:36:20,599
Has this big coefficient

886
00:36:20,599 --> 00:36:24,440
here and a big one here to
even though it's negative.

887
00:36:24,440 --> 00:36:26,019
So let me check that. Do I have

888
00:36:26,019 --> 00:36:30,740
two and negative three
when I generated my data?

889
00:36:31,220 --> 00:36:34,359
I sure did, right?
I had two times the

890
00:36:34,359 --> 00:36:35,820
squared one and then negative

891
00:36:35,820 --> 00:36:37,359
three times the
other one, right?

892
00:36:37,359 --> 00:36:39,980
So the model is doing exactly
what it was supposed.

893
00:36:39,980 --> 00:36:41,059
It was okay that
I gave it much of

894
00:36:41,059 --> 00:36:43,080
other features because
they weren't informative,

895
00:36:43,080 --> 00:36:44,199
and it just ignored them, right?

896
00:36:44,199 --> 00:36:45,939
But at least it had something
there to work with.

897
00:36:45,939 --> 00:36:48,570
Yeah, right here.
Should still be 0.5.

898
00:36:48,570 --> 00:36:50,729
The intercept should
still be 0.5.

899
00:36:50,729 --> 00:36:54,810
Yeah, that's a good
question. Why is it not 0.5?

900
00:36:54,810 --> 00:37:01,010
You know, I guess, is it
trying to fit all this stuff?

901
00:37:01,050 --> 00:37:04,549
It penalizes, like,
large differences more,

902
00:37:04,549 --> 00:37:05,689
and those might happen more when

903
00:37:05,689 --> 00:37:06,929
there's a squared relationship.

904
00:37:06,929 --> 00:37:08,589
And so, you know,
maybe it's trying

905
00:37:08,589 --> 00:37:11,749
to shuffle it up or down to
like better fit some points.

906
00:37:11,749 --> 00:37:13,070
I don't know. It's
not trying to always

907
00:37:13,070 --> 00:37:15,809
be exactly 0.5, right?

908
00:37:15,809 --> 00:37:18,009
I'm sorry square things,
it kind of goes over

909
00:37:18,009 --> 00:37:19,930
a bigger range and
the white intercept

910
00:37:19,930 --> 00:37:21,030
becomes less relevant,

911
00:37:21,030 --> 00:37:22,509
right towards doing
a good score.

912
00:37:22,509 --> 00:37:25,169
So it'll be noisier.
Yeah, good question.

913
00:37:25,169 --> 00:37:30,839
Other questions people have.
Yeah, question right here.

914
00:37:32,920 --> 00:37:39,619
Yeah. Yeah, so if

915
00:37:39,619 --> 00:37:41,479
you don't know that, could
you automatically do it?

916
00:37:41,479 --> 00:37:43,639
Yeah, and I think the
kind of broad category of

917
00:37:43,639 --> 00:37:45,079
those things would
be like AutoML

918
00:37:45,079 --> 00:37:46,359
or automatic machine learning.

919
00:37:46,359 --> 00:37:47,919
There are things out
there that would do that.

920
00:37:47,919 --> 00:37:49,719
You know, you could look at

921
00:37:49,719 --> 00:37:51,320
a bunch of scatter
plots manually,

922
00:37:51,320 --> 00:37:52,699
right, or you could just

923
00:37:52,699 --> 00:37:54,899
throw a bunch of
stuff at it, right?

924
00:37:54,899 --> 00:37:58,560
But, so there's different
different approaches.

925
00:37:58,560 --> 00:38:07,619
Y, Yeah. Oh, oh, yeah.

926
00:38:07,619 --> 00:38:11,959
Could you do at a statistical
significance test?

927
00:38:11,959 --> 00:38:13,479
Yeah, I'm sure you could.

928
00:38:13,479 --> 00:38:14,899
I'd have to think
a little bit, I

929
00:38:14,899 --> 00:38:17,019
don't I don't do
enough stats like,

930
00:38:17,019 --> 00:38:19,259
just tell you off the top
of my head to do that.

931
00:38:19,259 --> 00:38:23,999
I don't think people do a lot
of statistical significance

932
00:38:23,999 --> 00:38:29,809
for machine learning
models because You know,

933
00:38:29,809 --> 00:38:31,689
because I guess, what does
that mean then, right?

934
00:38:31,689 --> 00:38:33,630
So like predicting some y value,

935
00:38:33,630 --> 00:38:35,049
and could I say that, Hey,

936
00:38:35,049 --> 00:38:36,949
like, the y values I'm doing are

937
00:38:36,949 --> 00:38:39,829
kind of like better
than Chance, right?

938
00:38:39,829 --> 00:38:42,389
If I kind of have, like,

939
00:38:42,389 --> 00:38:44,489
terrible y values that
are all over the place,

940
00:38:44,489 --> 00:38:46,490
but it's like there
is a clear pattern,

941
00:38:46,490 --> 00:38:48,789
and there will be a clear
pattern if I have enough data,

942
00:38:48,789 --> 00:38:51,249
then kind of statistical
significance

943
00:38:51,249 --> 00:38:53,649
is a low bar, right?

944
00:38:53,649 --> 00:38:56,909
Maybe I can explain 5%
of the variance, right?

945
00:38:56,909 --> 00:38:58,629
But I can definitely show that

946
00:38:58,629 --> 00:39:01,069
I'm like beating
something random, right?

947
00:39:01,069 --> 00:39:02,489
So it's like, Well,
is that good, right?

948
00:39:02,489 --> 00:39:04,649
I could show, as I have
a bigger better data,

949
00:39:04,649 --> 00:39:07,409
I could have any p
value I want, right?

950
00:39:07,409 --> 00:39:09,409
But it doesn't mean it's
a good model, right?

951
00:39:09,409 --> 00:39:10,710
It's just like, we're competent.

952
00:39:10,710 --> 00:39:11,850
It's like knows something,

953
00:39:11,850 --> 00:39:14,149
but that doesn't
mean it knows a lot.

954
00:39:14,149 --> 00:39:16,029
So yeah, sometimes I've

955
00:39:16,029 --> 00:39:17,610
seen people do
physical significance,

956
00:39:17,610 --> 00:39:19,129
but I don't see them
doing it very often.

957
00:39:19,129 --> 00:39:20,089
Interesting thought.

958
00:39:20,089 --> 00:39:22,069
Yeah, there are other
thoughts or impressions

959
00:39:22,069 --> 00:39:25,369
people have. Oh, right.

960
00:39:25,369 --> 00:39:29,294
Cool. So moving along,

961
00:39:29,294 --> 00:39:31,479
We've done those
transformations.

962
00:39:31,479 --> 00:39:33,919
And what I want to do now
is I want to see how we

963
00:39:33,919 --> 00:39:37,920
can do that with Ashley.

964
00:39:37,920 --> 00:39:39,139
There was one more
thing I want to do.

965
00:39:39,139 --> 00:39:40,419
I want to just try to go through

966
00:39:40,419 --> 00:39:42,459
all these steps of kind
of end to end, like,

967
00:39:42,459 --> 00:39:44,799
I have M one, which is
kind of not that great,

968
00:39:44,799 --> 00:39:46,619
and then M two, which
is much better.

969
00:39:46,619 --> 00:39:48,939
Like, how could I
create a bar plot and

970
00:39:48,939 --> 00:39:50,379
show that to somebody who maybe

971
00:39:50,379 --> 00:39:51,939
doesn't even know a lot
about machine learning,

972
00:39:51,939 --> 00:39:54,179
but to show them, hey, like,
M two is doing better.

973
00:39:54,179 --> 00:39:56,119
And so what I'm
going to do is I'm I

974
00:39:56,119 --> 00:39:58,779
come back to how I
evaluate these things,

975
00:39:58,779 --> 00:40:01,739
and I'm going to
grab it like this.

976
00:40:01,739 --> 00:40:05,439
And let's just see if we can
compare these things, right?

977
00:40:05,439 --> 00:40:07,599
I'm to do a big query.

978
00:40:07,650 --> 00:40:10,869
This one will evaluate
M two for me,

979
00:40:10,869 --> 00:40:14,129
and if I do it again,

980
00:40:14,129 --> 00:40:15,329
then I can evaluate M one

981
00:40:15,329 --> 00:40:17,229
as well. I can do both of those.

982
00:40:17,229 --> 00:40:18,670
Now, I might want
to get the stats

983
00:40:18,670 --> 00:40:19,989
for both of these on top of each

984
00:40:19,989 --> 00:40:22,710
other and so I can do
a union all and SQL,

985
00:40:22,710 --> 00:40:24,669
that means basically canate,

986
00:40:24,669 --> 00:40:27,549
these rows and append
them to other rows,

987
00:40:27,549 --> 00:40:29,609
and so I can get the
stats for both of these.

988
00:40:29,609 --> 00:40:31,849
I'm really just interest
in that R squared score.

989
00:40:31,849 --> 00:40:35,134
I'm going to get the R squared
score from both of them.

990
00:40:35,134 --> 00:40:37,579
And then finally, what
I want to do is I

991
00:40:37,579 --> 00:40:40,119
want to give each of these
models a name, right?

992
00:40:40,119 --> 00:40:42,099
And so I may call
this one M one,

993
00:40:42,099 --> 00:40:45,139
which is linear, and I can say,

994
00:40:45,139 --> 00:40:46,559
well, that's the model name.

995
00:40:46,559 --> 00:40:48,899
And then I can do that
down here as well, right?

996
00:40:48,899 --> 00:40:50,799
So let's just try to do an
end end example where we

997
00:40:50,799 --> 00:40:52,839
have an nice plot
comparing these, right?

998
00:40:52,839 --> 00:40:55,060
So this is like a non linear.

999
00:40:55,060 --> 00:40:58,739
U And then I'm

1000
00:40:58,739 --> 00:41:00,339
just trying to capture
that in a data frame

1001
00:41:00,339 --> 00:41:01,639
so we can work with it.

1002
00:41:01,639 --> 00:41:03,280
I go to get that data frame,

1003
00:41:03,280 --> 00:41:05,299
I'm going to peek
at it down here.

1004
00:41:05,299 --> 00:41:07,699
And then I want to
plot this thing.

1005
00:41:07,699 --> 00:41:10,019
Let me try doing a plot.

1006
00:41:10,019 --> 00:41:11,839
And I'm going to
just actually take

1007
00:41:11,839 --> 00:41:14,359
a look at it up here so I
can compare side by side.

1008
00:41:14,359 --> 00:41:18,059
The plot I want to do
specifically is a bar plot.

1009
00:41:18,179 --> 00:41:20,319
I can see that the

1010
00:41:20,319 --> 00:41:22,339
model numbers are just
like zero and one,

1011
00:41:22,339 --> 00:41:24,699
and that's because when
I plot a data frame,

1012
00:41:24,699 --> 00:41:25,880
it's pulling from the index.

1013
00:41:25,880 --> 00:41:27,779
The dex is the x axis, right?

1014
00:41:27,779 --> 00:41:30,679
And so what I want to do
up here is do a set dex

1015
00:41:30,679 --> 00:41:35,139
of the model so that these
things will go to the x axis.

1016
00:41:35,139 --> 00:41:36,799
Same thing down here.
I'm going to do that.

1017
00:41:36,799 --> 00:41:39,019
It's kind of awfully
a big plot to, right?

1018
00:41:39,019 --> 00:41:40,719
So I'm to say fix
size equals like

1019
00:41:40,719 --> 00:41:43,839
I don't know, three by 2.5.

1020
00:41:43,839 --> 00:41:46,239
All right. I'm to do that.

1021
00:41:46,239 --> 00:41:47,819
The other thing I'm
going to do is,

1022
00:41:47,819 --> 00:41:50,899
I'm just trying to pull
out that R square score.

1023
00:41:50,899 --> 00:41:53,959
So it doesn't have to have
its own own label. All right.

1024
00:41:53,959 --> 00:41:55,819
So this is looking a
little bit better.

1025
00:41:55,819 --> 00:41:58,039
Let me just slap an
access label on it.

1026
00:41:58,039 --> 00:42:01,179
I'm to say dot set y label,

1027
00:42:01,179 --> 00:42:03,539
and I can say something like

1028
00:42:03,539 --> 00:42:08,119
maybe the R square
score. I can do that.

1029
00:42:08,119 --> 00:42:09,960
Of course, I've done
with two models,

1030
00:42:09,960 --> 00:42:11,639
but usually when you're
doing this kind of wore,

1031
00:42:11,639 --> 00:42:13,059
trying to do a whole
bunch of things and

1032
00:42:13,059 --> 00:42:14,719
you'll create a plot like
this and you'll see, well,

1033
00:42:14,719 --> 00:42:15,879
these ones perform better or

1034
00:42:15,879 --> 00:42:18,739
worse for this
particular training da.

1035
00:42:18,739 --> 00:42:25,479
Yeah, right. Tu Zoom

1036
00:42:25,479 --> 00:42:27,319
in on the top part? Yeah,
so you could, right?

1037
00:42:27,319 --> 00:42:28,759
So I guess what you could
say is you could say,

1038
00:42:28,759 --> 00:42:33,239
like Y m equals 0.8 to one?

1039
00:42:33,239 --> 00:42:35,259
And now it will look like that.

1040
00:42:35,259 --> 00:42:37,399
Now, is that a good thing to do?

1041
00:42:37,399 --> 00:42:41,220
Maybe, often, when I talk to
people who are making plots,

1042
00:42:41,220 --> 00:42:42,579
people often say, like, I

1043
00:42:42,579 --> 00:42:44,219
want to see the
difference, right?

1044
00:42:44,219 --> 00:42:46,979
And do we want to
see the difference?

1045
00:42:46,979 --> 00:42:49,099
Is the conclusion that,

1046
00:42:49,099 --> 00:42:51,139
like, hey, they're
really definite,

1047
00:42:51,139 --> 00:42:52,579
is the conclusion,
actually that they both

1048
00:42:52,579 --> 00:42:55,819
perform pretty well.
Yeah, I don't know.

1049
00:42:55,819 --> 00:42:58,419
I guess, so I'm
always reluctant.

1050
00:42:58,419 --> 00:43:01,219
I very rarely like plots
that don't start from zero.

1051
00:43:01,219 --> 00:43:02,439
On the other hand, I
mean, you can make

1052
00:43:02,439 --> 00:43:06,119
an argument that you
might want to show,

1053
00:43:06,119 --> 00:43:07,839
you know, mistakes or
something like that.

1054
00:43:07,839 --> 00:43:09,519
Maybe you'd chose a different
metric then, right?

1055
00:43:09,519 --> 00:43:12,999
Because maybe each mistake
is costly for some reason.

1056
00:43:12,999 --> 00:43:15,499
It's hard to say, like, hey,
how we're using this model?

1057
00:43:15,499 --> 00:43:18,620
Is it like, like,
mistakes that are costly,

1058
00:43:18,620 --> 00:43:20,159
or is it that getting

1059
00:43:20,159 --> 00:43:21,960
things right have
most of the benefit?

1060
00:43:21,960 --> 00:43:23,439
Yeah, so, you could, right,

1061
00:43:23,439 --> 00:43:25,159
but I'm not sure you'd
want to. I don't know.

1062
00:43:25,159 --> 00:43:27,669
There's This is controversial.

1063
00:43:27,669 --> 00:43:30,969
Yeah, other questions or
comments people have.

1064
00:43:31,530 --> 00:43:33,989
Fantastic. Okay, so what I

1065
00:43:33,989 --> 00:43:35,589
want to do now is
I want to see how

1066
00:43:35,589 --> 00:43:39,149
we can work with some
non linear data, right?

1067
00:43:39,149 --> 00:43:42,049
So I'm gonna get some different
practice data over here.

1068
00:43:42,049 --> 00:43:44,469
Let's throw that
down. I'm sorry.

1069
00:43:44,469 --> 00:43:45,889
We've already been
doing nonlinear data.

1070
00:43:45,889 --> 00:43:47,149
I want to do categorical data.

1071
00:43:47,149 --> 00:43:48,889
I want to have letters or

1072
00:43:48,889 --> 00:43:50,949
strings or something instead
of just numbers, right?

1073
00:43:50,949 --> 00:43:53,289
So I'm gonna get this
data frame here.

1074
00:43:53,289 --> 00:43:55,549
And so now X two
is still a number,

1075
00:43:55,549 --> 00:43:59,130
but X one is A B or C. For
the purpose of computing,

1076
00:43:59,130 --> 00:44:02,269
y, I treat each letter
as a number, right?

1077
00:44:02,269 --> 00:44:03,789
So like A is one, B is five,

1078
00:44:03,789 --> 00:44:05,069
C is 15, right?

1079
00:44:05,069 --> 00:44:06,629
These different
letters contribute to

1080
00:44:06,629 --> 00:44:09,409
the y value to different
degrees, right?

1081
00:44:09,409 --> 00:44:10,889
And I want to C, Can I train

1082
00:44:10,889 --> 00:44:12,769
a model that figures that out?

1083
00:44:12,769 --> 00:44:16,049
You know, y that C
will contribute to

1084
00:44:16,049 --> 00:44:17,909
a bigger y value where

1085
00:44:17,909 --> 00:44:20,409
an A will probably be
like a smaller y value.

1086
00:44:20,409 --> 00:44:23,829
Can I figure that out just by
looking at the data, right?

1087
00:44:23,829 --> 00:44:25,449
And so this is

1088
00:44:25,449 --> 00:44:26,909
where we have to do the
one hot and toting.

1089
00:44:26,909 --> 00:44:29,909
And what's cool is that
Big C will do it for us.

1090
00:44:29,909 --> 00:44:31,769
But if I want to
trip of the results,

1091
00:44:31,769 --> 00:44:33,289
I need to know that
it's doing it for us.

1092
00:44:33,289 --> 00:44:35,009
Right? I'm to come down here.

1093
00:44:35,009 --> 00:44:37,950
I'm to say, big query,

1094
00:44:37,950 --> 00:44:41,229
and I am going to actual
I have to put all of

1095
00:44:41,229 --> 00:44:46,359
this in my in my table
somewhere, right?

1096
00:44:46,359 --> 00:44:48,280
Maybe I'll just say data framed

1097
00:44:48,280 --> 00:44:51,499
two big query, Google Big query.

1098
00:44:51,499 --> 00:44:53,499
And this is Section two,

1099
00:44:53,499 --> 00:44:55,599
and I'll just call
this table two.

1100
00:44:55,599 --> 00:44:59,300
And then if exists
equals replace.

1101
00:44:59,300 --> 00:45:01,099
And then all the
same stuff I said

1102
00:45:01,099 --> 00:45:02,020
last time the disclaimer

1103
00:45:02,020 --> 00:45:03,199
about how I should
do train tests,

1104
00:45:03,199 --> 00:45:04,639
and I'm not doing it right now.

1105
00:45:04,639 --> 00:45:06,799
Because I just want to
focus on the transformation

1106
00:45:06,799 --> 00:45:08,839
in the simplest way
possible. All right.

1107
00:45:08,839 --> 00:45:12,379
So I have that thing, and then
I can select X one, X two,

1108
00:45:12,379 --> 00:45:16,439
and Y from Section
two table two.

1109
00:45:16,439 --> 00:45:21,039
I can do all of that. And
that all looks great, right?

1110
00:45:21,039 --> 00:45:23,899
So this maybe let me
see, down here, right?

1111
00:45:23,899 --> 00:45:27,819
So I guess this was 15
and this was a nine,

1112
00:45:27,819 --> 00:45:29,420
right? That should be like a 24.

1113
00:45:29,420 --> 00:45:32,380
Well, that's actually
kind of strange

1114
00:45:32,380 --> 00:45:34,799
that's such a large value,
right? What was it?

1115
00:45:34,799 --> 00:45:39,379
Was it really plus
two times X two.

1116
00:45:39,379 --> 00:45:40,739
Okay, that makes sense, right?

1117
00:45:40,739 --> 00:45:42,659
So I have this, and
then two times X two.

1118
00:45:42,659 --> 00:45:44,779
Okay, great. So I think
that's all looking good.

1119
00:45:44,779 --> 00:45:46,419
And so I want to
train a model for it.

1120
00:45:46,419 --> 00:45:52,639
I'm going to say, create
or replace model.

1121
00:45:52,639 --> 00:45:54,499
And I'll call the section two M

1122
00:45:54,499 --> 00:45:56,499
three because I'm terrible
at naming things.

1123
00:45:56,499 --> 00:45:59,000
And as usual we have
to have the options.

1124
00:45:59,000 --> 00:46:02,239
And so let me just check my
notes here. How do I do that?

1125
00:46:02,239 --> 00:46:04,439
I have to say the model type is

1126
00:46:04,439 --> 00:46:07,219
a linear regression as usual,

1127
00:46:07,219 --> 00:46:10,599
and the input label columns

1128
00:46:10,599 --> 00:46:13,850
is just going to be Y. I'm
going to train that model.

1129
00:46:13,850 --> 00:46:18,179
L et's make it happen.
Fantastic. And then

1130
00:46:18,179 --> 00:46:19,939
then what are we
going to do with it?

1131
00:46:19,939 --> 00:46:22,959
So then we will,
after it's done,

1132
00:46:22,959 --> 00:46:24,599
I want to try to figure
out, did it find out

1133
00:46:24,599 --> 00:46:26,959
that relationship with AB and C?

1134
00:46:26,959 --> 00:46:31,039
And so from Lights,

1135
00:46:31,039 --> 00:46:37,459
I want to look at the
model section two M three,

1136
00:46:37,540 --> 00:46:40,779
let's select star from that.

1137
00:46:43,010 --> 00:46:45,529
I'm just going to throw
in a data frame so

1138
00:46:45,529 --> 00:46:47,249
we can use it for stuff, right?

1139
00:46:47,249 --> 00:46:50,229
And I always forget
to say from when

1140
00:46:50,229 --> 00:46:51,369
I'm using these functions for

1141
00:46:51,369 --> 00:46:53,769
whatever reason. Okay, cool.

1142
00:46:53,769 --> 00:46:57,049
And so I may get that data
frame, and when I look at it,

1143
00:46:57,049 --> 00:46:59,469
I can see that they put

1144
00:46:59,469 --> 00:47:02,849
the weight just directly
for H two as normal.

1145
00:47:02,849 --> 00:47:04,389
Whereas X one is categorical,

1146
00:47:04,389 --> 00:47:05,929
and say added extra
columns for us.

1147
00:47:05,929 --> 00:47:07,289
And so they are
actually a bunch of

1148
00:47:07,289 --> 00:47:09,589
weights corresponding
to that, right?

1149
00:47:09,589 --> 00:47:11,509
And so what I want to do is I
want to come along and see,

1150
00:47:11,509 --> 00:47:14,229
well, how much do each of
these contribute, right?

1151
00:47:14,229 --> 00:47:17,329
And so if I look
at the data frame,

1152
00:47:17,329 --> 00:47:19,529
I can say, you know,

1153
00:47:19,529 --> 00:47:21,629
I should say set index,

1154
00:47:21,629 --> 00:47:25,090
to the processed input,

1155
00:47:25,090 --> 00:47:27,629
I don't want a hard code zero
because maybe that changes.

1156
00:47:27,629 --> 00:47:29,589
And then I can say dot at,

1157
00:47:29,589 --> 00:47:32,149
and I want the X one

1158
00:47:32,149 --> 00:47:36,509
and the category weights.
I'm going to pull that out.

1159
00:47:36,509 --> 00:47:41,189
And that's going to give me
an array of dictionaries.

1160
00:47:41,189 --> 00:47:42,409
What I'd like to do
with this array of

1161
00:47:42,409 --> 00:47:43,929
dictionaries is
turn into a table.

1162
00:47:43,929 --> 00:47:45,369
I want a table where there's

1163
00:47:45,369 --> 00:47:47,670
a category column
and a weight column.

1164
00:47:47,670 --> 00:47:48,929
Because if I have
a table, then I'm

1165
00:47:48,929 --> 00:47:50,889
pretty close to being
able to plot this.

1166
00:47:50,889 --> 00:47:52,989
I cannot convert an array of

1167
00:47:52,989 --> 00:47:54,590
dictionaries to a
data frame directly,

1168
00:47:54,590 --> 00:47:57,069
but I can do a list
of dictionaries.

1169
00:47:57,069 --> 00:47:59,069
Right? I'm to say two list,

1170
00:47:59,069 --> 00:48:03,009
and I'll just draw this,
maybe my weights. All right.

1171
00:48:03,009 --> 00:48:05,329
So let's do that. And then

1172
00:48:05,329 --> 00:48:07,509
what I can do is I
can create a weight.

1173
00:48:07,509 --> 00:48:14,450
DF is going to be panest
data frame of those weights.

1174
00:48:15,280 --> 00:48:18,039
And now I could go
ahead and I could

1175
00:48:18,039 --> 00:48:20,019
set an index on it if I
want to plot it, right?

1176
00:48:20,019 --> 00:48:22,059
The category is going to go to

1177
00:48:22,059 --> 00:48:24,300
the index because I want
it to be the x axis,

1178
00:48:24,300 --> 00:48:27,999
and I can say plot R, right?

1179
00:48:27,999 --> 00:48:30,179
And did it figure
out the pattern?

1180
00:48:30,179 --> 00:48:32,139
Well, C contributes the most,

1181
00:48:32,139 --> 00:48:35,040
then B and then A. I
figured relatively.

1182
00:48:35,040 --> 00:48:37,399
Now, I didn't recapture

1183
00:48:37,399 --> 00:48:41,379
these same numbers
up here, which were.

1184
00:48:41,379 --> 00:48:45,019
I captured relatively speaking
what these were A B and C,

1185
00:48:45,019 --> 00:48:48,619
but it didn't capture 15 and 15.

1186
00:48:48,619 --> 00:48:53,079
I wonder if anybody knows why
it's not able to do that.

1187
00:49:02,070 --> 00:49:09,289
Any speculation? All right.

1188
00:49:09,289 --> 00:49:10,869
Let's take a look down here.

1189
00:49:10,869 --> 00:49:12,289
This is the catch right here.

1190
00:49:12,289 --> 00:49:14,269
We have a Y intercept, right?

1191
00:49:14,269 --> 00:49:17,449
And so when I look at where
I generated this data,

1192
00:49:17,449 --> 00:49:20,229
I could have added in
an intercept over here.

1193
00:49:20,229 --> 00:49:21,409
I could have said like plus ten,

1194
00:49:21,409 --> 00:49:22,649
and then this would have been,

1195
00:49:22,649 --> 00:49:25,489
negative nine, and
this would have been,

1196
00:49:25,489 --> 00:49:27,749
I guess, like, negative five.

1197
00:49:27,749 --> 00:49:31,109
And this one would have
just been five, right?

1198
00:49:31,109 --> 00:49:33,309
If I had done it that way,

1199
00:49:33,309 --> 00:49:35,989
The data would have
looked exactly the same.

1200
00:49:35,989 --> 00:49:37,369
So there's different ways

1201
00:49:37,369 --> 00:49:38,509
we would be on the
same thing, right?

1202
00:49:38,509 --> 00:49:40,229
So I'll show me
relatively speaking,

1203
00:49:40,229 --> 00:49:42,169
but given there's that
intercept and it doesn't have

1204
00:49:42,169 --> 00:49:43,269
any way to differentiate what's

1205
00:49:43,269 --> 00:49:44,469
an intercept or what these are.

1206
00:49:44,469 --> 00:49:44,769
Right?

1207
00:49:44,769 --> 00:49:46,629
I just want you to understand
the limitations of it.

1208
00:49:46,629 --> 00:49:47,829
But it also helped us

1209
00:49:47,829 --> 00:49:51,250
realize which of these
ABC were most important

1210
00:49:51,250 --> 00:49:54,350
for contributing to
the final weights

1211
00:49:54,350 --> 00:49:56,289
or the final y value.

1212
00:49:56,289 --> 00:49:56,549
Right?

1213
00:49:56,549 --> 00:49:57,349
So I'm wondering if I can

1214
00:49:57,349 --> 00:49:59,489
just leave it there
because I'm out of time.

1215
00:49:59,489 --> 00:50:01,169
So thanks and feel

1216
00:50:01,169 --> 00:50:02,729
free to come up and chat
if you have any questions.

1217
00:50:02,729 --> 00:50:04,909
I hope you have a great evening.
